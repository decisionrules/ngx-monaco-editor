/*!-----------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Type definitions for monaco-editor
 * Released under the MIT license
*-----------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uYWNvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL25neC1tb25hY28tZWRpdG9yL3NyYy9saWIvaW50ZXJmYWNlcy9tb25hY28udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OERBSThEO0FBQzlEOzs7Z0dBR2dHIiwic291cmNlc0NvbnRlbnQiOlsiLyohLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVHlwZSBkZWZpbml0aW9ucyBmb3IgbW9uYWNvLWVkaXRvclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmRlY2xhcmUgbGV0IE1vbmFjb0Vudmlyb25tZW50OiBtb25hY28uRW52aXJvbm1lbnQgfCB1bmRlZmluZWQ7XG5cbmludGVyZmFjZSBXaW5kb3cge1xuICAgIE1vbmFjb0Vudmlyb25tZW50PzogbW9uYWNvLkVudmlyb25tZW50IHwgdW5kZWZpbmVkO1xufVxuXG5kZWNsYXJlIG5hbWVzcGFjZSBtb25hY28ge1xuXG4gICAgZXhwb3J0IHR5cGUgVGhlbmFibGU8VD4gPSBQcm9taXNlTGlrZTxUPjtcblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRW52aXJvbm1lbnQge1xuICAgICAgICBnbG9iYWxBUEk/OiBib29sZWFuO1xuICAgICAgICBiYXNlVXJsPzogc3RyaW5nO1xuICAgICAgICBnZXRXb3JrZXI/KHdvcmtlcklkOiBzdHJpbmcsIGxhYmVsOiBzdHJpbmcpOiBXb3JrZXI7XG4gICAgICAgIGdldFdvcmtlclVybD8od29ya2VySWQ6IHN0cmluZywgbGFiZWw6IHN0cmluZyk6IHN0cmluZztcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElEaXNwb3NhYmxlIHtcbiAgICAgICAgZGlzcG9zZSgpOiB2b2lkO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUV2ZW50PFQ+IHtcbiAgICAgICAgKGxpc3RlbmVyOiAoZTogVCkgPT4gYW55LCB0aGlzQXJnPzogYW55KTogSURpc3Bvc2FibGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBoZWxwZXIgdGhhdCBhbGxvd3MgdG8gZW1pdCBhbmQgbGlzdGVuIHRvIHR5cGVkIGV2ZW50c1xuICAgICAqL1xuICAgIGV4cG9ydCBjbGFzcyBFbWl0dGVyPFQ+IHtcbiAgICAgICAgY29uc3RydWN0b3IoKTtcbiAgICAgICAgcmVhZG9ubHkgZXZlbnQ6IElFdmVudDxUPjtcbiAgICAgICAgZmlyZShldmVudDogVCk6IHZvaWQ7XG4gICAgICAgIGRpc3Bvc2UoKTogdm9pZDtcbiAgICB9XG5cblxuICAgIGV4cG9ydCBlbnVtIE1hcmtlclRhZyB7XG4gICAgICAgIFVubmVjZXNzYXJ5ID0gMSxcbiAgICAgICAgRGVwcmVjYXRlZCA9IDJcbiAgICB9XG5cbiAgICBleHBvcnQgZW51bSBNYXJrZXJTZXZlcml0eSB7XG4gICAgICAgIEhpbnQgPSAxLFxuICAgICAgICBJbmZvID0gMixcbiAgICAgICAgV2FybmluZyA9IDQsXG4gICAgICAgIEVycm9yID0gOFxuICAgIH1cblxuICAgIGV4cG9ydCBjbGFzcyBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHBhcmVudD86IENhbmNlbGxhdGlvblRva2VuKTtcbiAgICAgICAgZ2V0IHRva2VuKCk6IENhbmNlbGxhdGlvblRva2VuO1xuICAgICAgICBjYW5jZWwoKTogdm9pZDtcbiAgICAgICAgZGlzcG9zZShjYW5jZWw/OiBib29sZWFuKTogdm9pZDtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIENhbmNlbGxhdGlvblRva2VuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgZmxhZyBzaWduYWxsaW5nIGlzIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBpc0NhbmNlbGxhdGlvblJlcXVlc3RlZDogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGV2ZW50IHdoaWNoIGZpcmVzIHdoZW4gY2FuY2VsbGF0aW9uIGlzIHJlcXVlc3RlZC4gVGhpcyBldmVudFxuICAgICAgICAgKiBvbmx5IGV2ZXIgZmlyZXMgYG9uY2VgIGFzIGNhbmNlbGxhdGlvbiBjYW4gb25seSBoYXBwZW4gb25jZS4gTGlzdGVuZXJzXG4gICAgICAgICAqIHRoYXQgYXJlIHJlZ2lzdGVyZWQgYWZ0ZXIgY2FuY2VsbGF0aW9uIHdpbGwgYmUgY2FsbGVkIChuZXh0IGV2ZW50IGxvb3AgcnVuKSxcbiAgICAgICAgICogYnV0IGFsc28gb25seSBvbmNlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnRcbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IG9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkOiAobGlzdGVuZXI6IChlOiBhbnkpID0+IGFueSwgdGhpc0FyZ3M/OiBhbnksIGRpc3Bvc2FibGVzPzogSURpc3Bvc2FibGVbXSkgPT4gSURpc3Bvc2FibGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVuaWZvcm0gUmVzb3VyY2UgSWRlbnRpZmllciAoVXJpKSBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2LlxuICAgICAqIFRoaXMgY2xhc3MgaXMgYSBzaW1wbGUgcGFyc2VyIHdoaWNoIGNyZWF0ZXMgdGhlIGJhc2ljIGNvbXBvbmVudCBwYXJ0c1xuICAgICAqIChodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tMykgd2l0aCBtaW5pbWFsIHZhbGlkYXRpb25cbiAgICAgKiBhbmQgZW5jb2RpbmcuXG4gICAgICpcbiAgICAgKiBgYGB0eHRcbiAgICAgKiAgICAgICBmb286Ly9leGFtcGxlLmNvbTo4MDQyL292ZXIvdGhlcmU/bmFtZT1mZXJyZXQjbm9zZVxuICAgICAqICAgICAgIFxcXy8gICBcXF9fX19fX19fX19fX19fL1xcX19fX19fX19fLyBcXF9fX19fX19fXy8gXFxfXy9cbiAgICAgKiAgICAgICAgfCAgICAgICAgICAgfCAgICAgICAgICAgIHwgICAgICAgICAgICB8ICAgICAgICB8XG4gICAgICogICAgIHNjaGVtZSAgICAgYXV0aG9yaXR5ICAgICAgIHBhdGggICAgICAgIHF1ZXJ5ICAgZnJhZ21lbnRcbiAgICAgKiAgICAgICAgfCAgIF9fX19fX19fX19fX19fX19fX19fX3xfX1xuICAgICAqICAgICAgIC8gXFwgLyAgICAgICAgICAgICAgICAgICAgICAgIFxcXG4gICAgICogICAgICAgdXJuOmV4YW1wbGU6YW5pbWFsOmZlcnJldDpub3NlXG4gICAgICogYGBgXG4gICAgICovXG4gICAgZXhwb3J0IGNsYXNzIFVyaSBpbXBsZW1lbnRzIFVyaUNvbXBvbmVudHMge1xuICAgICAgICBzdGF0aWMgaXNVcmkodGhpbmc6IGFueSk6IHRoaW5nIGlzIFVyaTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNjaGVtZSBpcyB0aGUgJ2h0dHAnIHBhcnQgb2YgJ2h0dHA6Ly93d3cubXNmdC5jb20vc29tZS9wYXRoP3F1ZXJ5I2ZyYWdtZW50Jy5cbiAgICAgICAgICogVGhlIHBhcnQgYmVmb3JlIHRoZSBmaXJzdCBjb2xvbi5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHNjaGVtZTogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogYXV0aG9yaXR5IGlzIHRoZSAnd3d3Lm1zZnQuY29tJyBwYXJ0IG9mICdodHRwOi8vd3d3Lm1zZnQuY29tL3NvbWUvcGF0aD9xdWVyeSNmcmFnbWVudCcuXG4gICAgICAgICAqIFRoZSBwYXJ0IGJldHdlZW4gdGhlIGZpcnN0IGRvdWJsZSBzbGFzaGVzIGFuZCB0aGUgbmV4dCBzbGFzaC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGF1dGhvcml0eTogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogcGF0aCBpcyB0aGUgJy9zb21lL3BhdGgnIHBhcnQgb2YgJ2h0dHA6Ly93d3cubXNmdC5jb20vc29tZS9wYXRoP3F1ZXJ5I2ZyYWdtZW50Jy5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHBhdGg6IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHF1ZXJ5IGlzIHRoZSAncXVlcnknIHBhcnQgb2YgJ2h0dHA6Ly93d3cubXNmdC5jb20vc29tZS9wYXRoP3F1ZXJ5I2ZyYWdtZW50Jy5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHF1ZXJ5OiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBmcmFnbWVudCBpcyB0aGUgJ2ZyYWdtZW50JyBwYXJ0IG9mICdodHRwOi8vd3d3Lm1zZnQuY29tL3NvbWUvcGF0aD9xdWVyeSNmcmFnbWVudCcuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBmcmFnbWVudDogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGNvcnJlc3BvbmRpbmcgZmlsZSBzeXN0ZW0gcGF0aCBvZiB0aGlzIFVyaS5cbiAgICAgICAgICogV2lsbCBoYW5kbGUgVU5DIHBhdGhzLCBub3JtYWxpemVzIHdpbmRvd3MgZHJpdmUgbGV0dGVycyB0byBsb3dlci1jYXNlLCBhbmQgdXNlcyB0aGVcbiAgICAgICAgICogcGxhdGZvcm0gc3BlY2lmaWMgcGF0aCBzZXBhcmF0b3IuXG4gICAgICAgICAqXG4gICAgICAgICAqICogV2lsbCAqbm90KiB2YWxpZGF0ZSB0aGUgcGF0aCBmb3IgaW52YWxpZCBjaGFyYWN0ZXJzIGFuZCBzZW1hbnRpY3MuXG4gICAgICAgICAqICogV2lsbCAqbm90KiBsb29rIGF0IHRoZSBzY2hlbWUgb2YgdGhpcyBVcmkuXG4gICAgICAgICAqICogVGhlIHJlc3VsdCBzaGFsbCAqbm90KiBiZSB1c2VkIGZvciBkaXNwbGF5IHB1cnBvc2VzIGJ1dCBmb3IgYWNjZXNzaW5nIGEgZmlsZSBvbiBkaXNrLlxuICAgICAgICAgKlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGUgKmRpZmZlcmVuY2UqIHRvIGBVcmkjcGF0aGAgaXMgdGhlIHVzZSBvZiB0aGUgcGxhdGZvcm0gc3BlY2lmaWMgc2VwYXJhdG9yIGFuZCB0aGUgaGFuZGxpbmdcbiAgICAgICAgICogb2YgVU5DIHBhdGhzLiBTZWUgdGhlIGJlbG93IHNhbXBsZSBvZiBhIGZpbGUtdXJpIHdpdGggYW4gYXV0aG9yaXR5IChVTkMgcGF0aCkuXG4gICAgICAgICAqXG4gICAgICAgICAqIGBgYHRzXG4gICAgICAgICAgICBjb25zdCB1ID0gVXJpLnBhcnNlKCdmaWxlOi8vc2VydmVyL2MkL2ZvbGRlci9maWxlLnR4dCcpXG4gICAgICAgICAgICB1LmF1dGhvcml0eSA9PT0gJ3NlcnZlcidcbiAgICAgICAgICAgIHUucGF0aCA9PT0gJy9zaGFyZXMvYyQvZmlsZS50eHQnXG4gICAgICAgICAgICB1LmZzUGF0aCA9PT0gJ1xcXFxzZXJ2ZXJcXGMkXFxmb2xkZXJcXGZpbGUudHh0J1xuICAgICAgICBgYGBcbiAgICAgICAgICpcbiAgICAgICAgICogVXNpbmcgYFVyaSNwYXRoYCB0byByZWFkIGEgZmlsZSAodXNpbmcgZnMtYXBpcykgd291bGQgbm90IGJlIGVub3VnaCBiZWNhdXNlIHBhcnRzIG9mIHRoZSBwYXRoLFxuICAgICAgICAgKiBuYW1lbHkgdGhlIHNlcnZlciBuYW1lLCB3b3VsZCBiZSBtaXNzaW5nLiBUaGVyZWZvcmUgYFVyaSNmc1BhdGhgIGV4aXN0cyAtIGl0J3Mgc3VnYXIgdG8gZWFzZSB3b3JraW5nXG4gICAgICAgICAqIHdpdGggVVJJcyB0aGF0IHJlcHJlc2VudCBmaWxlcyBvbiBkaXNrIChgZmlsZWAgc2NoZW1lKS5cbiAgICAgICAgICovXG4gICAgICAgIGdldCBmc1BhdGgoKTogc3RyaW5nO1xuICAgICAgICB3aXRoKGNoYW5nZToge1xuICAgICAgICAgICAgc2NoZW1lPzogc3RyaW5nO1xuICAgICAgICAgICAgYXV0aG9yaXR5Pzogc3RyaW5nIHwgbnVsbDtcbiAgICAgICAgICAgIHBhdGg/OiBzdHJpbmcgfCBudWxsO1xuICAgICAgICAgICAgcXVlcnk/OiBzdHJpbmcgfCBudWxsO1xuICAgICAgICAgICAgZnJhZ21lbnQ/OiBzdHJpbmcgfCBudWxsO1xuICAgICAgICB9KTogVXJpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIG5ldyBVcmkgZnJvbSBhIHN0cmluZywgZS5nLiBgaHR0cDovL3d3dy5tc2Z0LmNvbS9zb21lL3BhdGhgLFxuICAgICAgICAgKiBgZmlsZTovLy91c3IvaG9tZWAsIG9yIGBzY2hlbWU6d2l0aC9wYXRoYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHZhbHVlIEEgc3RyaW5nIHdoaWNoIHJlcHJlc2VudHMgYW4gVXJpIChzZWUgYFVyaSN0b1N0cmluZ2ApLlxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIHBhcnNlKHZhbHVlOiBzdHJpbmcsIF9zdHJpY3Q/OiBib29sZWFuKTogVXJpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIG5ldyBVcmkgZnJvbSBhIGZpbGUgc3lzdGVtIHBhdGgsIGUuZy4gYGM6XFxteVxcZmlsZXNgLFxuICAgICAgICAgKiBgL3Vzci9ob21lYCwgb3IgYFxcXFxzZXJ2ZXJcXHNoYXJlXFxzb21lXFxwYXRoYC5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlICpkaWZmZXJlbmNlKiBiZXR3ZWVuIGBVcmkjcGFyc2VgIGFuZCBgVXJpI2ZpbGVgIGlzIHRoYXQgdGhlIGxhdHRlciB0cmVhdHMgdGhlIGFyZ3VtZW50XG4gICAgICAgICAqIGFzIHBhdGgsIG5vdCBhcyBzdHJpbmdpZmllZC11cmkuIEUuZy4gYFVyaS5maWxlKHBhdGgpYCBpcyAqKm5vdCB0aGUgc2FtZSBhcyoqXG4gICAgICAgICAqIGBVcmkucGFyc2UoJ2ZpbGU6Ly8nICsgcGF0aClgIGJlY2F1c2UgdGhlIHBhdGggbWlnaHQgY29udGFpbiBjaGFyYWN0ZXJzIHRoYXQgYXJlXG4gICAgICAgICAqIGludGVycHJldGVkICgjIGFuZCA/KS4gU2VlIHRoZSBmb2xsb3dpbmcgc2FtcGxlOlxuICAgICAgICAgKiBgYGB0c1xuICAgICAgICBjb25zdCBnb29kID0gVXJpLmZpbGUoJy9jb2RpbmcvYyMvcHJvamVjdDEnKTtcbiAgICAgICAgZ29vZC5zY2hlbWUgPT09ICdmaWxlJztcbiAgICAgICAgZ29vZC5wYXRoID09PSAnL2NvZGluZy9jIy9wcm9qZWN0MSc7XG4gICAgICAgIGdvb2QuZnJhZ21lbnQgPT09ICcnO1xuICAgICAgICBjb25zdCBiYWQgPSBVcmkucGFyc2UoJ2ZpbGU6Ly8nICsgJy9jb2RpbmcvYyMvcHJvamVjdDEnKTtcbiAgICAgICAgYmFkLnNjaGVtZSA9PT0gJ2ZpbGUnO1xuICAgICAgICBiYWQucGF0aCA9PT0gJy9jb2RpbmcvYyc7IC8vIHBhdGggaXMgbm93IGJyb2tlblxuICAgICAgICBiYWQuZnJhZ21lbnQgPT09ICcvcHJvamVjdDEnO1xuICAgICAgICBgYGBcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHBhdGggQSBmaWxlIHN5c3RlbSBwYXRoIChzZWUgYFVyaSNmc1BhdGhgKVxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGZpbGUocGF0aDogc3RyaW5nKTogVXJpO1xuICAgICAgICBzdGF0aWMgZnJvbShjb21wb25lbnRzOiB7XG4gICAgICAgICAgICBzY2hlbWU6IHN0cmluZztcbiAgICAgICAgICAgIGF1dGhvcml0eT86IHN0cmluZztcbiAgICAgICAgICAgIHBhdGg/OiBzdHJpbmc7XG4gICAgICAgICAgICBxdWVyeT86IHN0cmluZztcbiAgICAgICAgICAgIGZyYWdtZW50Pzogc3RyaW5nO1xuICAgICAgICB9KTogVXJpO1xuICAgICAgICAvKipcbiAgICAgICAgICogSm9pbiBhIFVyaSBwYXRoIHdpdGggcGF0aCBmcmFnbWVudHMgYW5kIG5vcm1hbGl6ZXMgdGhlIHJlc3VsdGluZyBwYXRoLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdXJpIFRoZSBpbnB1dCBVcmkuXG4gICAgICAgICAqIEBwYXJhbSBwYXRoRnJhZ21lbnQgVGhlIHBhdGggZnJhZ21lbnQgdG8gYWRkIHRvIHRoZSBVcmkgcGF0aC5cbiAgICAgICAgICogQHJldHVybnMgVGhlIHJlc3VsdGluZyBVcmkuXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgam9pblBhdGgodXJpOiBVcmksIC4uLnBhdGhGcmFnbWVudDogc3RyaW5nW10pOiBVcmk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIGZvciB0aGlzIFVyaS4gSXQncyBndWFyYW50ZWVkIHRoYXQgY2FsbGluZ1xuICAgICAgICAgKiBgVXJpLnBhcnNlYCB3aXRoIHRoZSByZXN1bHQgb2YgdGhpcyBmdW5jdGlvbiBjcmVhdGVzIGFuIFVyaSB3aGljaCBpcyBlcXVhbFxuICAgICAgICAgKiB0byB0aGlzIFVyaS5cbiAgICAgICAgICpcbiAgICAgICAgICogKiBUaGUgcmVzdWx0IHNoYWxsICpub3QqIGJlIHVzZWQgZm9yIGRpc3BsYXkgcHVycG9zZXMgYnV0IGZvciBleHRlcm5hbGl6YXRpb24gb3IgdHJhbnNwb3J0LlxuICAgICAgICAgKiAqIFRoZSByZXN1bHQgd2lsbCBiZSBlbmNvZGVkIHVzaW5nIHRoZSBwZXJjZW50YWdlIGVuY29kaW5nIGFuZCBlbmNvZGluZyBoYXBwZW5zIG1vc3RseVxuICAgICAgICAgKiBpZ25vcmUgdGhlIHNjaGVtZS1zcGVjaWZpYyBlbmNvZGluZyBydWxlcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHNraXBFbmNvZGluZyBEbyBub3QgZW5jb2RlIHRoZSByZXN1bHQsIGRlZmF1bHQgaXMgYGZhbHNlYFxuICAgICAgICAgKi9cbiAgICAgICAgdG9TdHJpbmcoc2tpcEVuY29kaW5nPzogYm9vbGVhbik6IHN0cmluZztcbiAgICAgICAgdG9KU09OKCk6IFVyaUNvbXBvbmVudHM7XG4gICAgICAgIHN0YXRpYyByZXZpdmUoZGF0YTogVXJpQ29tcG9uZW50cyB8IFVyaSk6IFVyaTtcbiAgICAgICAgc3RhdGljIHJldml2ZShkYXRhOiBVcmlDb21wb25lbnRzIHwgVXJpIHwgdW5kZWZpbmVkKTogVXJpIHwgdW5kZWZpbmVkO1xuICAgICAgICBzdGF0aWMgcmV2aXZlKGRhdGE6IFVyaUNvbXBvbmVudHMgfCBVcmkgfCBudWxsKTogVXJpIHwgbnVsbDtcbiAgICAgICAgc3RhdGljIHJldml2ZShkYXRhOiBVcmlDb21wb25lbnRzIHwgVXJpIHwgdW5kZWZpbmVkIHwgbnVsbCk6IFVyaSB8IHVuZGVmaW5lZCB8IG51bGw7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBVcmlDb21wb25lbnRzIHtcbiAgICAgICAgc2NoZW1lOiBzdHJpbmc7XG4gICAgICAgIGF1dGhvcml0eTogc3RyaW5nO1xuICAgICAgICBwYXRoOiBzdHJpbmc7XG4gICAgICAgIHF1ZXJ5OiBzdHJpbmc7XG4gICAgICAgIGZyYWdtZW50OiBzdHJpbmc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFZpcnR1YWwgS2V5IENvZGVzLCB0aGUgdmFsdWUgZG9lcyBub3QgaG9sZCBhbnkgaW5oZXJlbnQgbWVhbmluZy5cbiAgICAgKiBJbnNwaXJlZCBzb21ld2hhdCBmcm9tIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvd2luZG93cy9kZXNrdG9wL2RkMzc1NzMxKHY9dnMuODUpLmFzcHhcbiAgICAgKiBCdXQgdGhlc2UgYXJlIFwibW9yZSBnZW5lcmFsXCIsIGFzIHRoZXkgc2hvdWxkIHdvcmsgYWNyb3NzIGJyb3dzZXJzICYgT1Ngcy5cbiAgICAgKi9cbiAgICBleHBvcnQgZW51bSBLZXlDb2RlIHtcbiAgICAgICAgRGVwZW5kc09uS2JMYXlvdXQgPSAtMSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBsYWNlZCBmaXJzdCB0byBjb3ZlciB0aGUgMCB2YWx1ZSBvZiB0aGUgZW51bS5cbiAgICAgICAgICovXG4gICAgICAgIFVua25vd24gPSAwLFxuICAgICAgICBCYWNrc3BhY2UgPSAxLFxuICAgICAgICBUYWIgPSAyLFxuICAgICAgICBFbnRlciA9IDMsXG4gICAgICAgIFNoaWZ0ID0gNCxcbiAgICAgICAgQ3RybCA9IDUsXG4gICAgICAgIEFsdCA9IDYsXG4gICAgICAgIFBhdXNlQnJlYWsgPSA3LFxuICAgICAgICBDYXBzTG9jayA9IDgsXG4gICAgICAgIEVzY2FwZSA9IDksXG4gICAgICAgIFNwYWNlID0gMTAsXG4gICAgICAgIFBhZ2VVcCA9IDExLFxuICAgICAgICBQYWdlRG93biA9IDEyLFxuICAgICAgICBFbmQgPSAxMyxcbiAgICAgICAgSG9tZSA9IDE0LFxuICAgICAgICBMZWZ0QXJyb3cgPSAxNSxcbiAgICAgICAgVXBBcnJvdyA9IDE2LFxuICAgICAgICBSaWdodEFycm93ID0gMTcsXG4gICAgICAgIERvd25BcnJvdyA9IDE4LFxuICAgICAgICBJbnNlcnQgPSAxOSxcbiAgICAgICAgRGVsZXRlID0gMjAsXG4gICAgICAgIERpZ2l0MCA9IDIxLFxuICAgICAgICBEaWdpdDEgPSAyMixcbiAgICAgICAgRGlnaXQyID0gMjMsXG4gICAgICAgIERpZ2l0MyA9IDI0LFxuICAgICAgICBEaWdpdDQgPSAyNSxcbiAgICAgICAgRGlnaXQ1ID0gMjYsXG4gICAgICAgIERpZ2l0NiA9IDI3LFxuICAgICAgICBEaWdpdDcgPSAyOCxcbiAgICAgICAgRGlnaXQ4ID0gMjksXG4gICAgICAgIERpZ2l0OSA9IDMwLFxuICAgICAgICBLZXlBID0gMzEsXG4gICAgICAgIEtleUIgPSAzMixcbiAgICAgICAgS2V5QyA9IDMzLFxuICAgICAgICBLZXlEID0gMzQsXG4gICAgICAgIEtleUUgPSAzNSxcbiAgICAgICAgS2V5RiA9IDM2LFxuICAgICAgICBLZXlHID0gMzcsXG4gICAgICAgIEtleUggPSAzOCxcbiAgICAgICAgS2V5SSA9IDM5LFxuICAgICAgICBLZXlKID0gNDAsXG4gICAgICAgIEtleUsgPSA0MSxcbiAgICAgICAgS2V5TCA9IDQyLFxuICAgICAgICBLZXlNID0gNDMsXG4gICAgICAgIEtleU4gPSA0NCxcbiAgICAgICAgS2V5TyA9IDQ1LFxuICAgICAgICBLZXlQID0gNDYsXG4gICAgICAgIEtleVEgPSA0NyxcbiAgICAgICAgS2V5UiA9IDQ4LFxuICAgICAgICBLZXlTID0gNDksXG4gICAgICAgIEtleVQgPSA1MCxcbiAgICAgICAgS2V5VSA9IDUxLFxuICAgICAgICBLZXlWID0gNTIsXG4gICAgICAgIEtleVcgPSA1MyxcbiAgICAgICAgS2V5WCA9IDU0LFxuICAgICAgICBLZXlZID0gNTUsXG4gICAgICAgIEtleVogPSA1NixcbiAgICAgICAgTWV0YSA9IDU3LFxuICAgICAgICBDb250ZXh0TWVudSA9IDU4LFxuICAgICAgICBGMSA9IDU5LFxuICAgICAgICBGMiA9IDYwLFxuICAgICAgICBGMyA9IDYxLFxuICAgICAgICBGNCA9IDYyLFxuICAgICAgICBGNSA9IDYzLFxuICAgICAgICBGNiA9IDY0LFxuICAgICAgICBGNyA9IDY1LFxuICAgICAgICBGOCA9IDY2LFxuICAgICAgICBGOSA9IDY3LFxuICAgICAgICBGMTAgPSA2OCxcbiAgICAgICAgRjExID0gNjksXG4gICAgICAgIEYxMiA9IDcwLFxuICAgICAgICBGMTMgPSA3MSxcbiAgICAgICAgRjE0ID0gNzIsXG4gICAgICAgIEYxNSA9IDczLFxuICAgICAgICBGMTYgPSA3NCxcbiAgICAgICAgRjE3ID0gNzUsXG4gICAgICAgIEYxOCA9IDc2LFxuICAgICAgICBGMTkgPSA3NyxcbiAgICAgICAgTnVtTG9jayA9IDc4LFxuICAgICAgICBTY3JvbGxMb2NrID0gNzksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVc2VkIGZvciBtaXNjZWxsYW5lb3VzIGNoYXJhY3RlcnM7IGl0IGNhbiB2YXJ5IGJ5IGtleWJvYXJkLlxuICAgICAgICAgKiBGb3IgdGhlIFVTIHN0YW5kYXJkIGtleWJvYXJkLCB0aGUgJzs6JyBrZXlcbiAgICAgICAgICovXG4gICAgICAgIFNlbWljb2xvbiA9IDgwLFxuICAgICAgICAvKipcbiAgICAgICAgICogRm9yIGFueSBjb3VudHJ5L3JlZ2lvbiwgdGhlICcrJyBrZXlcbiAgICAgICAgICogRm9yIHRoZSBVUyBzdGFuZGFyZCBrZXlib2FyZCwgdGhlICc9Kycga2V5XG4gICAgICAgICAqL1xuICAgICAgICBFcXVhbCA9IDgxLFxuICAgICAgICAvKipcbiAgICAgICAgICogRm9yIGFueSBjb3VudHJ5L3JlZ2lvbiwgdGhlICcsJyBrZXlcbiAgICAgICAgICogRm9yIHRoZSBVUyBzdGFuZGFyZCBrZXlib2FyZCwgdGhlICcsPCcga2V5XG4gICAgICAgICAqL1xuICAgICAgICBDb21tYSA9IDgyLFxuICAgICAgICAvKipcbiAgICAgICAgICogRm9yIGFueSBjb3VudHJ5L3JlZ2lvbiwgdGhlICctJyBrZXlcbiAgICAgICAgICogRm9yIHRoZSBVUyBzdGFuZGFyZCBrZXlib2FyZCwgdGhlICctXycga2V5XG4gICAgICAgICAqL1xuICAgICAgICBNaW51cyA9IDgzLFxuICAgICAgICAvKipcbiAgICAgICAgICogRm9yIGFueSBjb3VudHJ5L3JlZ2lvbiwgdGhlICcuJyBrZXlcbiAgICAgICAgICogRm9yIHRoZSBVUyBzdGFuZGFyZCBrZXlib2FyZCwgdGhlICcuPicga2V5XG4gICAgICAgICAqL1xuICAgICAgICBQZXJpb2QgPSA4NCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVzZWQgZm9yIG1pc2NlbGxhbmVvdXMgY2hhcmFjdGVyczsgaXQgY2FuIHZhcnkgYnkga2V5Ym9hcmQuXG4gICAgICAgICAqIEZvciB0aGUgVVMgc3RhbmRhcmQga2V5Ym9hcmQsIHRoZSAnLz8nIGtleVxuICAgICAgICAgKi9cbiAgICAgICAgU2xhc2ggPSA4NSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVzZWQgZm9yIG1pc2NlbGxhbmVvdXMgY2hhcmFjdGVyczsgaXQgY2FuIHZhcnkgYnkga2V5Ym9hcmQuXG4gICAgICAgICAqIEZvciB0aGUgVVMgc3RhbmRhcmQga2V5Ym9hcmQsIHRoZSAnYH4nIGtleVxuICAgICAgICAgKi9cbiAgICAgICAgQmFja3F1b3RlID0gODYsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVc2VkIGZvciBtaXNjZWxsYW5lb3VzIGNoYXJhY3RlcnM7IGl0IGNhbiB2YXJ5IGJ5IGtleWJvYXJkLlxuICAgICAgICAgKiBGb3IgdGhlIFVTIHN0YW5kYXJkIGtleWJvYXJkLCB0aGUgJ1t7JyBrZXlcbiAgICAgICAgICovXG4gICAgICAgIEJyYWNrZXRMZWZ0ID0gODcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVc2VkIGZvciBtaXNjZWxsYW5lb3VzIGNoYXJhY3RlcnM7IGl0IGNhbiB2YXJ5IGJ5IGtleWJvYXJkLlxuICAgICAgICAgKiBGb3IgdGhlIFVTIHN0YW5kYXJkIGtleWJvYXJkLCB0aGUgJ1xcfCcga2V5XG4gICAgICAgICAqL1xuICAgICAgICBCYWNrc2xhc2ggPSA4OCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVzZWQgZm9yIG1pc2NlbGxhbmVvdXMgY2hhcmFjdGVyczsgaXQgY2FuIHZhcnkgYnkga2V5Ym9hcmQuXG4gICAgICAgICAqIEZvciB0aGUgVVMgc3RhbmRhcmQga2V5Ym9hcmQsIHRoZSAnXX0nIGtleVxuICAgICAgICAgKi9cbiAgICAgICAgQnJhY2tldFJpZ2h0ID0gODksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVc2VkIGZvciBtaXNjZWxsYW5lb3VzIGNoYXJhY3RlcnM7IGl0IGNhbiB2YXJ5IGJ5IGtleWJvYXJkLlxuICAgICAgICAgKiBGb3IgdGhlIFVTIHN0YW5kYXJkIGtleWJvYXJkLCB0aGUgJydcIicga2V5XG4gICAgICAgICAqL1xuICAgICAgICBRdW90ZSA9IDkwLFxuICAgICAgICAvKipcbiAgICAgICAgICogVXNlZCBmb3IgbWlzY2VsbGFuZW91cyBjaGFyYWN0ZXJzOyBpdCBjYW4gdmFyeSBieSBrZXlib2FyZC5cbiAgICAgICAgICovXG4gICAgICAgIE9FTV84ID0gOTEsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFaXRoZXIgdGhlIGFuZ2xlIGJyYWNrZXQga2V5IG9yIHRoZSBiYWNrc2xhc2gga2V5IG9uIHRoZSBSVCAxMDIta2V5IGtleWJvYXJkLlxuICAgICAgICAgKi9cbiAgICAgICAgSW50bEJhY2tzbGFzaCA9IDkyLFxuICAgICAgICBOdW1wYWQwID0gOTMsXG4gICAgICAgIE51bXBhZDEgPSA5NCxcbiAgICAgICAgTnVtcGFkMiA9IDk1LFxuICAgICAgICBOdW1wYWQzID0gOTYsXG4gICAgICAgIE51bXBhZDQgPSA5NyxcbiAgICAgICAgTnVtcGFkNSA9IDk4LFxuICAgICAgICBOdW1wYWQ2ID0gOTksXG4gICAgICAgIE51bXBhZDcgPSAxMDAsXG4gICAgICAgIE51bXBhZDggPSAxMDEsXG4gICAgICAgIE51bXBhZDkgPSAxMDIsXG4gICAgICAgIE51bXBhZE11bHRpcGx5ID0gMTAzLFxuICAgICAgICBOdW1wYWRBZGQgPSAxMDQsXG4gICAgICAgIE5VTVBBRF9TRVBBUkFUT1IgPSAxMDUsXG4gICAgICAgIE51bXBhZFN1YnRyYWN0ID0gMTA2LFxuICAgICAgICBOdW1wYWREZWNpbWFsID0gMTA3LFxuICAgICAgICBOdW1wYWREaXZpZGUgPSAxMDgsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb3ZlciBhbGwga2V5IGNvZGVzIHdoZW4gSU1FIGlzIHByb2Nlc3NpbmcgaW5wdXQuXG4gICAgICAgICAqL1xuICAgICAgICBLRVlfSU5fQ09NUE9TSVRJT04gPSAxMDksXG4gICAgICAgIEFCTlRfQzEgPSAxMTAsXG4gICAgICAgIEFCTlRfQzIgPSAxMTEsXG4gICAgICAgIEF1ZGlvVm9sdW1lTXV0ZSA9IDExMixcbiAgICAgICAgQXVkaW9Wb2x1bWVVcCA9IDExMyxcbiAgICAgICAgQXVkaW9Wb2x1bWVEb3duID0gMTE0LFxuICAgICAgICBCcm93c2VyU2VhcmNoID0gMTE1LFxuICAgICAgICBCcm93c2VySG9tZSA9IDExNixcbiAgICAgICAgQnJvd3NlckJhY2sgPSAxMTcsXG4gICAgICAgIEJyb3dzZXJGb3J3YXJkID0gMTE4LFxuICAgICAgICBNZWRpYVRyYWNrTmV4dCA9IDExOSxcbiAgICAgICAgTWVkaWFUcmFja1ByZXZpb3VzID0gMTIwLFxuICAgICAgICBNZWRpYVN0b3AgPSAxMjEsXG4gICAgICAgIE1lZGlhUGxheVBhdXNlID0gMTIyLFxuICAgICAgICBMYXVuY2hNZWRpYVBsYXllciA9IDEyMyxcbiAgICAgICAgTGF1bmNoTWFpbCA9IDEyNCxcbiAgICAgICAgTGF1bmNoQXBwMiA9IDEyNSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBsYWNlZCBsYXN0IHRvIGNvdmVyIHRoZSBsZW5ndGggb2YgdGhlIGVudW0uXG4gICAgICAgICAqIFBsZWFzZSBkbyBub3QgZGVwZW5kIG9uIHRoaXMgdmFsdWUhXG4gICAgICAgICAqL1xuICAgICAgICBNQVhfVkFMVUUgPSAxMjZcbiAgICB9XG4gICAgZXhwb3J0IGNsYXNzIEtleU1vZCB7XG4gICAgICAgIHN0YXRpYyByZWFkb25seSBDdHJsQ21kOiBudW1iZXI7XG4gICAgICAgIHN0YXRpYyByZWFkb25seSBTaGlmdDogbnVtYmVyO1xuICAgICAgICBzdGF0aWMgcmVhZG9ubHkgQWx0OiBudW1iZXI7XG4gICAgICAgIHN0YXRpYyByZWFkb25seSBXaW5DdHJsOiBudW1iZXI7XG4gICAgICAgIHN0YXRpYyBjaG9yZChmaXJzdFBhcnQ6IG51bWJlciwgc2Vjb25kUGFydDogbnVtYmVyKTogbnVtYmVyO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU1hcmtkb3duU3RyaW5nIHtcbiAgICAgICAgcmVhZG9ubHkgdmFsdWU6IHN0cmluZztcbiAgICAgICAgcmVhZG9ubHkgaXNUcnVzdGVkPzogYm9vbGVhbjtcbiAgICAgICAgcmVhZG9ubHkgc3VwcG9ydFRoZW1lSWNvbnM/OiBib29sZWFuO1xuICAgICAgICByZWFkb25seSBzdXBwb3J0SHRtbD86IGJvb2xlYW47XG4gICAgICAgIHVyaXM/OiB7XG4gICAgICAgICAgICBbaHJlZjogc3RyaW5nXTogVXJpQ29tcG9uZW50cztcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElLZXlib2FyZEV2ZW50IHtcbiAgICAgICAgcmVhZG9ubHkgX3N0YW5kYXJkS2V5Ym9hcmRFdmVudEJyYW5kOiB0cnVlO1xuICAgICAgICByZWFkb25seSBicm93c2VyRXZlbnQ6IEtleWJvYXJkRXZlbnQ7XG4gICAgICAgIHJlYWRvbmx5IHRhcmdldDogSFRNTEVsZW1lbnQ7XG4gICAgICAgIHJlYWRvbmx5IGN0cmxLZXk6IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IHNoaWZ0S2V5OiBib29sZWFuO1xuICAgICAgICByZWFkb25seSBhbHRLZXk6IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IG1ldGFLZXk6IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IGtleUNvZGU6IEtleUNvZGU7XG4gICAgICAgIHJlYWRvbmx5IGNvZGU6IHN0cmluZztcbiAgICAgICAgZXF1YWxzKGtleWJpbmRpbmc6IG51bWJlcik6IGJvb2xlYW47XG4gICAgICAgIHByZXZlbnREZWZhdWx0KCk6IHZvaWQ7XG4gICAgICAgIHN0b3BQcm9wYWdhdGlvbigpOiB2b2lkO1xuICAgIH1cbiAgICBleHBvcnQgaW50ZXJmYWNlIElNb3VzZUV2ZW50IHtcbiAgICAgICAgcmVhZG9ubHkgYnJvd3NlckV2ZW50OiBNb3VzZUV2ZW50O1xuICAgICAgICByZWFkb25seSBsZWZ0QnV0dG9uOiBib29sZWFuO1xuICAgICAgICByZWFkb25seSBtaWRkbGVCdXR0b246IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IHJpZ2h0QnV0dG9uOiBib29sZWFuO1xuICAgICAgICByZWFkb25seSBidXR0b25zOiBudW1iZXI7XG4gICAgICAgIHJlYWRvbmx5IHRhcmdldDogSFRNTEVsZW1lbnQ7XG4gICAgICAgIHJlYWRvbmx5IGRldGFpbDogbnVtYmVyO1xuICAgICAgICByZWFkb25seSBwb3N4OiBudW1iZXI7XG4gICAgICAgIHJlYWRvbmx5IHBvc3k6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgY3RybEtleTogYm9vbGVhbjtcbiAgICAgICAgcmVhZG9ubHkgc2hpZnRLZXk6IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IGFsdEtleTogYm9vbGVhbjtcbiAgICAgICAgcmVhZG9ubHkgbWV0YUtleTogYm9vbGVhbjtcbiAgICAgICAgcmVhZG9ubHkgdGltZXN0YW1wOiBudW1iZXI7XG4gICAgICAgIHByZXZlbnREZWZhdWx0KCk6IHZvaWQ7XG4gICAgICAgIHN0b3BQcm9wYWdhdGlvbigpOiB2b2lkO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVNjcm9sbEV2ZW50IHtcbiAgICAgICAgcmVhZG9ubHkgc2Nyb2xsVG9wOiBudW1iZXI7XG4gICAgICAgIHJlYWRvbmx5IHNjcm9sbExlZnQ6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgc2Nyb2xsV2lkdGg6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgc2Nyb2xsSGVpZ2h0OiBudW1iZXI7XG4gICAgICAgIHJlYWRvbmx5IHNjcm9sbFRvcENoYW5nZWQ6IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IHNjcm9sbExlZnRDaGFuZ2VkOiBib29sZWFuO1xuICAgICAgICByZWFkb25seSBzY3JvbGxXaWR0aENoYW5nZWQ6IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IHNjcm9sbEhlaWdodENoYW5nZWQ6IGJvb2xlYW47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcG9zaXRpb24gaW4gdGhlIGVkaXRvci4gVGhpcyBpbnRlcmZhY2UgaXMgc3VpdGFibGUgZm9yIHNlcmlhbGl6YXRpb24uXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJUG9zaXRpb24ge1xuICAgICAgICAvKipcbiAgICAgICAgICogbGluZSBudW1iZXIgKHN0YXJ0cyBhdCAxKVxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgbGluZU51bWJlcjogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogY29sdW1uICh0aGUgZmlyc3QgY2hhcmFjdGVyIGluIGEgbGluZSBpcyBiZXR3ZWVuIGNvbHVtbiAxIGFuZCBjb2x1bW4gMilcbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGNvbHVtbjogbnVtYmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgcG9zaXRpb24gaW4gdGhlIGVkaXRvci5cbiAgICAgKi9cbiAgICBleHBvcnQgY2xhc3MgUG9zaXRpb24ge1xuICAgICAgICAvKipcbiAgICAgICAgICogbGluZSBudW1iZXIgKHN0YXJ0cyBhdCAxKVxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgbGluZU51bWJlcjogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogY29sdW1uICh0aGUgZmlyc3QgY2hhcmFjdGVyIGluIGEgbGluZSBpcyBiZXR3ZWVuIGNvbHVtbiAxIGFuZCBjb2x1bW4gMilcbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGNvbHVtbjogbnVtYmVyO1xuICAgICAgICBjb25zdHJ1Y3RvcihsaW5lTnVtYmVyOiBudW1iZXIsIGNvbHVtbjogbnVtYmVyKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZSBhIG5ldyBwb3NpdGlvbiBmcm9tIHRoaXMgcG9zaXRpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBuZXdMaW5lTnVtYmVyIG5ldyBsaW5lIG51bWJlclxuICAgICAgICAgKiBAcGFyYW0gbmV3Q29sdW1uIG5ldyBjb2x1bW5cbiAgICAgICAgICovXG4gICAgICAgIHdpdGgobmV3TGluZU51bWJlcj86IG51bWJlciwgbmV3Q29sdW1uPzogbnVtYmVyKTogUG9zaXRpb247XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXJpdmUgYSBuZXcgcG9zaXRpb24gZnJvbSB0aGlzIHBvc2l0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gZGVsdGFMaW5lTnVtYmVyIGxpbmUgbnVtYmVyIGRlbHRhXG4gICAgICAgICAqIEBwYXJhbSBkZWx0YUNvbHVtbiBjb2x1bW4gZGVsdGFcbiAgICAgICAgICovXG4gICAgICAgIGRlbHRhKGRlbHRhTGluZU51bWJlcj86IG51bWJlciwgZGVsdGFDb2x1bW4/OiBudW1iZXIpOiBQb3NpdGlvbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRlc3QgaWYgdGhpcyBwb3NpdGlvbiBlcXVhbHMgb3RoZXIgcG9zaXRpb25cbiAgICAgICAgICovXG4gICAgICAgIGVxdWFscyhvdGhlcjogSVBvc2l0aW9uKTogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRlc3QgaWYgcG9zaXRpb24gYGFgIGVxdWFscyBwb3NpdGlvbiBgYmBcbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBlcXVhbHMoYTogSVBvc2l0aW9uIHwgbnVsbCwgYjogSVBvc2l0aW9uIHwgbnVsbCk6IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUZXN0IGlmIHRoaXMgcG9zaXRpb24gaXMgYmVmb3JlIG90aGVyIHBvc2l0aW9uLlxuICAgICAgICAgKiBJZiB0aGUgdHdvIHBvc2l0aW9ucyBhcmUgZXF1YWwsIHRoZSByZXN1bHQgd2lsbCBiZSBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIGlzQmVmb3JlKG90aGVyOiBJUG9zaXRpb24pOiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGVzdCBpZiBwb3NpdGlvbiBgYWAgaXMgYmVmb3JlIHBvc2l0aW9uIGBiYC5cbiAgICAgICAgICogSWYgdGhlIHR3byBwb3NpdGlvbnMgYXJlIGVxdWFsLCB0aGUgcmVzdWx0IHdpbGwgYmUgZmFsc2UuXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgaXNCZWZvcmUoYTogSVBvc2l0aW9uLCBiOiBJUG9zaXRpb24pOiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGVzdCBpZiB0aGlzIHBvc2l0aW9uIGlzIGJlZm9yZSBvdGhlciBwb3NpdGlvbi5cbiAgICAgICAgICogSWYgdGhlIHR3byBwb3NpdGlvbnMgYXJlIGVxdWFsLCB0aGUgcmVzdWx0IHdpbGwgYmUgdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGlzQmVmb3JlT3JFcXVhbChvdGhlcjogSVBvc2l0aW9uKTogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRlc3QgaWYgcG9zaXRpb24gYGFgIGlzIGJlZm9yZSBwb3NpdGlvbiBgYmAuXG4gICAgICAgICAqIElmIHRoZSB0d28gcG9zaXRpb25zIGFyZSBlcXVhbCwgdGhlIHJlc3VsdCB3aWxsIGJlIHRydWUuXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgaXNCZWZvcmVPckVxdWFsKGE6IElQb3NpdGlvbiwgYjogSVBvc2l0aW9uKTogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgZnVuY3Rpb24gdGhhdCBjb21wYXJlcyBwb3NpdGlvbnMsIHVzZWZ1bCBmb3Igc29ydGluZ1xuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGNvbXBhcmUoYTogSVBvc2l0aW9uLCBiOiBJUG9zaXRpb24pOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDbG9uZSB0aGlzIHBvc2l0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgY2xvbmUoKTogUG9zaXRpb247XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0IHRvIGEgaHVtYW4tcmVhZGFibGUgcmVwcmVzZW50YXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICB0b1N0cmluZygpOiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGUgYSBgUG9zaXRpb25gIGZyb20gYW4gYElQb3NpdGlvbmAuXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgbGlmdChwb3M6IElQb3NpdGlvbik6IFBvc2l0aW9uO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGVzdCBpZiBgb2JqYCBpcyBhbiBgSVBvc2l0aW9uYC5cbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBpc0lQb3NpdGlvbihvYmo6IGFueSk6IG9iaiBpcyBJUG9zaXRpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSByYW5nZSBpbiB0aGUgZWRpdG9yLiBUaGlzIGludGVyZmFjZSBpcyBzdWl0YWJsZSBmb3Igc2VyaWFsaXphdGlvbi5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElSYW5nZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMaW5lIG51bWJlciBvbiB3aGljaCB0aGUgcmFuZ2Ugc3RhcnRzIChzdGFydHMgYXQgMSkuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBzdGFydExpbmVOdW1iZXI6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbHVtbiBvbiB3aGljaCB0aGUgcmFuZ2Ugc3RhcnRzIGluIGxpbmUgYHN0YXJ0TGluZU51bWJlcmAgKHN0YXJ0cyBhdCAxKS5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHN0YXJ0Q29sdW1uOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMaW5lIG51bWJlciBvbiB3aGljaCB0aGUgcmFuZ2UgZW5kcy5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGVuZExpbmVOdW1iZXI6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbHVtbiBvbiB3aGljaCB0aGUgcmFuZ2UgZW5kcyBpbiBsaW5lIGBlbmRMaW5lTnVtYmVyYC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGVuZENvbHVtbjogbnVtYmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgcmFuZ2UgaW4gdGhlIGVkaXRvci4gKHN0YXJ0TGluZU51bWJlcixzdGFydENvbHVtbikgaXMgPD0gKGVuZExpbmVOdW1iZXIsZW5kQ29sdW1uKVxuICAgICAqL1xuICAgIGV4cG9ydCBjbGFzcyBSYW5nZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMaW5lIG51bWJlciBvbiB3aGljaCB0aGUgcmFuZ2Ugc3RhcnRzIChzdGFydHMgYXQgMSkuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBzdGFydExpbmVOdW1iZXI6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbHVtbiBvbiB3aGljaCB0aGUgcmFuZ2Ugc3RhcnRzIGluIGxpbmUgYHN0YXJ0TGluZU51bWJlcmAgKHN0YXJ0cyBhdCAxKS5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHN0YXJ0Q29sdW1uOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMaW5lIG51bWJlciBvbiB3aGljaCB0aGUgcmFuZ2UgZW5kcy5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGVuZExpbmVOdW1iZXI6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbHVtbiBvbiB3aGljaCB0aGUgcmFuZ2UgZW5kcyBpbiBsaW5lIGBlbmRMaW5lTnVtYmVyYC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGVuZENvbHVtbjogbnVtYmVyO1xuICAgICAgICBjb25zdHJ1Y3RvcihzdGFydExpbmVOdW1iZXI6IG51bWJlciwgc3RhcnRDb2x1bW46IG51bWJlciwgZW5kTGluZU51bWJlcjogbnVtYmVyLCBlbmRDb2x1bW46IG51bWJlcik7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUZXN0IGlmIHRoaXMgcmFuZ2UgaXMgZW1wdHkuXG4gICAgICAgICAqL1xuICAgICAgICBpc0VtcHR5KCk6IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUZXN0IGlmIGByYW5nZWAgaXMgZW1wdHkuXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgaXNFbXB0eShyYW5nZTogSVJhbmdlKTogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRlc3QgaWYgcG9zaXRpb24gaXMgaW4gdGhpcyByYW5nZS4gSWYgdGhlIHBvc2l0aW9uIGlzIGF0IHRoZSBlZGdlcywgd2lsbCByZXR1cm4gdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnRhaW5zUG9zaXRpb24ocG9zaXRpb246IElQb3NpdGlvbik6IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUZXN0IGlmIGBwb3NpdGlvbmAgaXMgaW4gYHJhbmdlYC4gSWYgdGhlIHBvc2l0aW9uIGlzIGF0IHRoZSBlZGdlcywgd2lsbCByZXR1cm4gdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBjb250YWluc1Bvc2l0aW9uKHJhbmdlOiBJUmFuZ2UsIHBvc2l0aW9uOiBJUG9zaXRpb24pOiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGVzdCBpZiByYW5nZSBpcyBpbiB0aGlzIHJhbmdlLiBJZiB0aGUgcmFuZ2UgaXMgZXF1YWwgdG8gdGhpcyByYW5nZSwgd2lsbCByZXR1cm4gdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnRhaW5zUmFuZ2UocmFuZ2U6IElSYW5nZSk6IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUZXN0IGlmIGBvdGhlclJhbmdlYCBpcyBpbiBgcmFuZ2VgLiBJZiB0aGUgcmFuZ2VzIGFyZSBlcXVhbCwgd2lsbCByZXR1cm4gdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBjb250YWluc1JhbmdlKHJhbmdlOiBJUmFuZ2UsIG90aGVyUmFuZ2U6IElSYW5nZSk6IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUZXN0IGlmIGByYW5nZWAgaXMgc3RyaWN0bHkgaW4gdGhpcyByYW5nZS4gYHJhbmdlYCBtdXN0IHN0YXJ0IGFmdGVyIGFuZCBlbmQgYmVmb3JlIHRoaXMgcmFuZ2UgZm9yIHRoZSByZXN1bHQgdG8gYmUgdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIHN0cmljdENvbnRhaW5zUmFuZ2UocmFuZ2U6IElSYW5nZSk6IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUZXN0IGlmIGBvdGhlclJhbmdlYCBpcyBzdHJpY3RseSBpbiBgcmFuZ2VgIChtdXN0IHN0YXJ0IGFmdGVyLCBhbmQgZW5kIGJlZm9yZSkuIElmIHRoZSByYW5nZXMgYXJlIGVxdWFsLCB3aWxsIHJldHVybiBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBzdHJpY3RDb250YWluc1JhbmdlKHJhbmdlOiBJUmFuZ2UsIG90aGVyUmFuZ2U6IElSYW5nZSk6IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJldW5pb24gb2YgdGhlIHR3byByYW5nZXMuXG4gICAgICAgICAqIFRoZSBzbWFsbGVzdCBwb3NpdGlvbiB3aWxsIGJlIHVzZWQgYXMgdGhlIHN0YXJ0IHBvaW50LCBhbmQgdGhlIGxhcmdlc3Qgb25lIGFzIHRoZSBlbmQgcG9pbnQuXG4gICAgICAgICAqL1xuICAgICAgICBwbHVzUmFuZ2UocmFuZ2U6IElSYW5nZSk6IFJhbmdlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQSByZXVuaW9uIG9mIHRoZSB0d28gcmFuZ2VzLlxuICAgICAgICAgKiBUaGUgc21hbGxlc3QgcG9zaXRpb24gd2lsbCBiZSB1c2VkIGFzIHRoZSBzdGFydCBwb2ludCwgYW5kIHRoZSBsYXJnZXN0IG9uZSBhcyB0aGUgZW5kIHBvaW50LlxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIHBsdXNSYW5nZShhOiBJUmFuZ2UsIGI6IElSYW5nZSk6IFJhbmdlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBpbnRlcnNlY3Rpb24gb2YgdGhlIHR3byByYW5nZXMuXG4gICAgICAgICAqL1xuICAgICAgICBpbnRlcnNlY3RSYW5nZXMocmFuZ2U6IElSYW5nZSk6IFJhbmdlIHwgbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgaW50ZXJzZWN0aW9uIG9mIHRoZSB0d28gcmFuZ2VzLlxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGludGVyc2VjdFJhbmdlcyhhOiBJUmFuZ2UsIGI6IElSYW5nZSk6IFJhbmdlIHwgbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRlc3QgaWYgdGhpcyByYW5nZSBlcXVhbHMgb3RoZXIuXG4gICAgICAgICAqL1xuICAgICAgICBlcXVhbHNSYW5nZShvdGhlcjogSVJhbmdlIHwgbnVsbCk6IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUZXN0IGlmIHJhbmdlIGBhYCBlcXVhbHMgYGJgLlxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGVxdWFsc1JhbmdlKGE6IElSYW5nZSB8IG51bGwsIGI6IElSYW5nZSB8IG51bGwpOiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJuIHRoZSBlbmQgcG9zaXRpb24gKHdoaWNoIHdpbGwgYmUgYWZ0ZXIgb3IgZXF1YWwgdG8gdGhlIHN0YXJ0IHBvc2l0aW9uKVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0RW5kUG9zaXRpb24oKTogUG9zaXRpb247XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm4gdGhlIGVuZCBwb3NpdGlvbiAod2hpY2ggd2lsbCBiZSBhZnRlciBvciBlcXVhbCB0byB0aGUgc3RhcnQgcG9zaXRpb24pXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgZ2V0RW5kUG9zaXRpb24ocmFuZ2U6IElSYW5nZSk6IFBvc2l0aW9uO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJuIHRoZSBzdGFydCBwb3NpdGlvbiAod2hpY2ggd2lsbCBiZSBiZWZvcmUgb3IgZXF1YWwgdG8gdGhlIGVuZCBwb3NpdGlvbilcbiAgICAgICAgICovXG4gICAgICAgIGdldFN0YXJ0UG9zaXRpb24oKTogUG9zaXRpb247XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm4gdGhlIHN0YXJ0IHBvc2l0aW9uICh3aGljaCB3aWxsIGJlIGJlZm9yZSBvciBlcXVhbCB0byB0aGUgZW5kIHBvc2l0aW9uKVxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGdldFN0YXJ0UG9zaXRpb24ocmFuZ2U6IElSYW5nZSk6IFBvc2l0aW9uO1xuICAgICAgICAvKipcbiAgICAgICAgICogVHJhbnNmb3JtIHRvIGEgdXNlciBwcmVzZW50YWJsZSBzdHJpbmcgcmVwcmVzZW50YXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICB0b1N0cmluZygpOiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGUgYSBuZXcgcmFuZ2UgdXNpbmcgdGhpcyByYW5nZSdzIHN0YXJ0IHBvc2l0aW9uLCBhbmQgdXNpbmcgZW5kTGluZU51bWJlciBhbmQgZW5kQ29sdW1uIGFzIHRoZSBlbmQgcG9zaXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICBzZXRFbmRQb3NpdGlvbihlbmRMaW5lTnVtYmVyOiBudW1iZXIsIGVuZENvbHVtbjogbnVtYmVyKTogUmFuZ2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGUgYSBuZXcgcmFuZ2UgdXNpbmcgdGhpcyByYW5nZSdzIGVuZCBwb3NpdGlvbiwgYW5kIHVzaW5nIHN0YXJ0TGluZU51bWJlciBhbmQgc3RhcnRDb2x1bW4gYXMgdGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0U3RhcnRQb3NpdGlvbihzdGFydExpbmVOdW1iZXI6IG51bWJlciwgc3RhcnRDb2x1bW46IG51bWJlcik6IFJhbmdlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlIGEgbmV3IGVtcHR5IHJhbmdlIHVzaW5nIHRoaXMgcmFuZ2UncyBzdGFydCBwb3NpdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGNvbGxhcHNlVG9TdGFydCgpOiBSYW5nZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZSBhIG5ldyBlbXB0eSByYW5nZSB1c2luZyB0aGlzIHJhbmdlJ3Mgc3RhcnQgcG9zaXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgY29sbGFwc2VUb1N0YXJ0KHJhbmdlOiBJUmFuZ2UpOiBSYW5nZTtcbiAgICAgICAgc3RhdGljIGZyb21Qb3NpdGlvbnMoc3RhcnQ6IElQb3NpdGlvbiwgZW5kPzogSVBvc2l0aW9uKTogUmFuZ2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGUgYSBgUmFuZ2VgIGZyb20gYW4gYElSYW5nZWAuXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgbGlmdChyYW5nZTogdW5kZWZpbmVkIHwgbnVsbCk6IG51bGw7XG4gICAgICAgIHN0YXRpYyBsaWZ0KHJhbmdlOiBJUmFuZ2UpOiBSYW5nZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRlc3QgaWYgYG9iamAgaXMgYW4gYElSYW5nZWAuXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgaXNJUmFuZ2Uob2JqOiBhbnkpOiBvYmogaXMgSVJhbmdlO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGVzdCBpZiB0aGUgdHdvIHJhbmdlcyBhcmUgdG91Y2hpbmcgaW4gYW55IHdheS5cbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBhcmVJbnRlcnNlY3RpbmdPclRvdWNoaW5nKGE6IElSYW5nZSwgYjogSVJhbmdlKTogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRlc3QgaWYgdGhlIHR3byByYW5nZXMgYXJlIGludGVyc2VjdGluZy4gSWYgdGhlIHJhbmdlcyBhcmUgdG91Y2hpbmcgaXQgcmV0dXJucyB0cnVlLlxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGFyZUludGVyc2VjdGluZyhhOiBJUmFuZ2UsIGI6IElSYW5nZSk6IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGZ1bmN0aW9uIHRoYXQgY29tcGFyZXMgcmFuZ2VzLCB1c2VmdWwgZm9yIHNvcnRpbmcgcmFuZ2VzXG4gICAgICAgICAqIEl0IHdpbGwgZmlyc3QgY29tcGFyZSByYW5nZXMgb24gdGhlIHN0YXJ0UG9zaXRpb24gYW5kIHRoZW4gb24gdGhlIGVuZFBvc2l0aW9uXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgY29tcGFyZVJhbmdlc1VzaW5nU3RhcnRzKGE6IElSYW5nZSB8IG51bGwgfCB1bmRlZmluZWQsIGI6IElSYW5nZSB8IG51bGwgfCB1bmRlZmluZWQpOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGZ1bmN0aW9uIHRoYXQgY29tcGFyZXMgcmFuZ2VzLCB1c2VmdWwgZm9yIHNvcnRpbmcgcmFuZ2VzXG4gICAgICAgICAqIEl0IHdpbGwgZmlyc3QgY29tcGFyZSByYW5nZXMgb24gdGhlIGVuZFBvc2l0aW9uIGFuZCB0aGVuIG9uIHRoZSBzdGFydFBvc2l0aW9uXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgY29tcGFyZVJhbmdlc1VzaW5nRW5kcyhhOiBJUmFuZ2UsIGI6IElSYW5nZSk6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRlc3QgaWYgdGhlIHJhbmdlIHNwYW5zIG11bHRpcGxlIGxpbmVzLlxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIHNwYW5zTXVsdGlwbGVMaW5lcyhyYW5nZTogSVJhbmdlKTogYm9vbGVhbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNlbGVjdGlvbiBpbiB0aGUgZWRpdG9yLlxuICAgICAqIFRoZSBzZWxlY3Rpb24gaXMgYSByYW5nZSB0aGF0IGhhcyBhbiBvcmllbnRhdGlvbi5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElTZWxlY3Rpb24ge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGxpbmUgbnVtYmVyIG9uIHdoaWNoIHRoZSBzZWxlY3Rpb24gaGFzIHN0YXJ0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBzZWxlY3Rpb25TdGFydExpbmVOdW1iZXI6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjb2x1bW4gb24gYHNlbGVjdGlvblN0YXJ0TGluZU51bWJlcmAgd2hlcmUgdGhlIHNlbGVjdGlvbiBoYXMgc3RhcnRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHNlbGVjdGlvblN0YXJ0Q29sdW1uOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbGluZSBudW1iZXIgb24gd2hpY2ggdGhlIHNlbGVjdGlvbiBoYXMgZW5kZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBwb3NpdGlvbkxpbmVOdW1iZXI6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjb2x1bW4gb24gYHBvc2l0aW9uTGluZU51bWJlcmAgd2hlcmUgdGhlIHNlbGVjdGlvbiBoYXMgZW5kZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBwb3NpdGlvbkNvbHVtbjogbnVtYmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc2VsZWN0aW9uIGluIHRoZSBlZGl0b3IuXG4gICAgICogVGhlIHNlbGVjdGlvbiBpcyBhIHJhbmdlIHRoYXQgaGFzIGFuIG9yaWVudGF0aW9uLlxuICAgICAqL1xuICAgIGV4cG9ydCBjbGFzcyBTZWxlY3Rpb24gZXh0ZW5kcyBSYW5nZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbGluZSBudW1iZXIgb24gd2hpY2ggdGhlIHNlbGVjdGlvbiBoYXMgc3RhcnRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHNlbGVjdGlvblN0YXJ0TGluZU51bWJlcjogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNvbHVtbiBvbiBgc2VsZWN0aW9uU3RhcnRMaW5lTnVtYmVyYCB3aGVyZSB0aGUgc2VsZWN0aW9uIGhhcyBzdGFydGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgc2VsZWN0aW9uU3RhcnRDb2x1bW46IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBsaW5lIG51bWJlciBvbiB3aGljaCB0aGUgc2VsZWN0aW9uIGhhcyBlbmRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHBvc2l0aW9uTGluZU51bWJlcjogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNvbHVtbiBvbiBgcG9zaXRpb25MaW5lTnVtYmVyYCB3aGVyZSB0aGUgc2VsZWN0aW9uIGhhcyBlbmRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHBvc2l0aW9uQ29sdW1uOiBudW1iZXI7XG4gICAgICAgIGNvbnN0cnVjdG9yKHNlbGVjdGlvblN0YXJ0TGluZU51bWJlcjogbnVtYmVyLCBzZWxlY3Rpb25TdGFydENvbHVtbjogbnVtYmVyLCBwb3NpdGlvbkxpbmVOdW1iZXI6IG51bWJlciwgcG9zaXRpb25Db2x1bW46IG51bWJlcik7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmFuc2Zvcm0gdG8gYSBodW1hbi1yZWFkYWJsZSByZXByZXNlbnRhdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHRvU3RyaW5nKCk6IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRlc3QgaWYgZXF1YWxzIG90aGVyIHNlbGVjdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGVxdWFsc1NlbGVjdGlvbihvdGhlcjogSVNlbGVjdGlvbik6IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUZXN0IGlmIHRoZSB0d28gc2VsZWN0aW9ucyBhcmUgZXF1YWwuXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgc2VsZWN0aW9uc0VxdWFsKGE6IElTZWxlY3Rpb24sIGI6IElTZWxlY3Rpb24pOiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGRpcmVjdGlvbnMgKExUUiBvciBSVEwpLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0RGlyZWN0aW9uKCk6IFNlbGVjdGlvbkRpcmVjdGlvbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZSBhIG5ldyBzZWxlY3Rpb24gd2l0aCBhIGRpZmZlcmVudCBgcG9zaXRpb25MaW5lTnVtYmVyYCBhbmQgYHBvc2l0aW9uQ29sdW1uYC5cbiAgICAgICAgICovXG4gICAgICAgIHNldEVuZFBvc2l0aW9uKGVuZExpbmVOdW1iZXI6IG51bWJlciwgZW5kQ29sdW1uOiBudW1iZXIpOiBTZWxlY3Rpb247XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdGhlIHBvc2l0aW9uIGF0IGBwb3NpdGlvbkxpbmVOdW1iZXJgIGFuZCBgcG9zaXRpb25Db2x1bW5gLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0UG9zaXRpb24oKTogUG9zaXRpb247XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdGhlIHBvc2l0aW9uIGF0IHRoZSBzdGFydCBvZiB0aGUgc2VsZWN0aW9uLlxuICAgICAgICAqL1xuICAgICAgICBnZXRTZWxlY3Rpb25TdGFydCgpOiBQb3NpdGlvbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZSBhIG5ldyBzZWxlY3Rpb24gd2l0aCBhIGRpZmZlcmVudCBgc2VsZWN0aW9uU3RhcnRMaW5lTnVtYmVyYCBhbmQgYHNlbGVjdGlvblN0YXJ0Q29sdW1uYC5cbiAgICAgICAgICovXG4gICAgICAgIHNldFN0YXJ0UG9zaXRpb24oc3RhcnRMaW5lTnVtYmVyOiBudW1iZXIsIHN0YXJ0Q29sdW1uOiBudW1iZXIpOiBTZWxlY3Rpb247XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGUgYSBgU2VsZWN0aW9uYCBmcm9tIG9uZSBvciB0d28gcG9zaXRpb25zXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgZnJvbVBvc2l0aW9ucyhzdGFydDogSVBvc2l0aW9uLCBlbmQ/OiBJUG9zaXRpb24pOiBTZWxlY3Rpb247XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgYFNlbGVjdGlvbmAgZnJvbSBhIHJhbmdlLCBnaXZlbiBhIGRpcmVjdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBmcm9tUmFuZ2UocmFuZ2U6IFJhbmdlLCBkaXJlY3Rpb246IFNlbGVjdGlvbkRpcmVjdGlvbik6IFNlbGVjdGlvbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZSBhIGBTZWxlY3Rpb25gIGZyb20gYW4gYElTZWxlY3Rpb25gLlxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGxpZnRTZWxlY3Rpb24oc2VsOiBJU2VsZWN0aW9uKTogU2VsZWN0aW9uO1xuICAgICAgICAvKipcbiAgICAgICAgICogYGFgIGVxdWFscyBgYmAuXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgc2VsZWN0aW9uc0FyckVxdWFsKGE6IElTZWxlY3Rpb25bXSwgYjogSVNlbGVjdGlvbltdKTogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRlc3QgaWYgYG9iamAgaXMgYW4gYElTZWxlY3Rpb25gLlxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGlzSVNlbGVjdGlvbihvYmo6IGFueSk6IG9iaiBpcyBJU2VsZWN0aW9uO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlIHdpdGggYSBkaXJlY3Rpb24uXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgY3JlYXRlV2l0aERpcmVjdGlvbihzdGFydExpbmVOdW1iZXI6IG51bWJlciwgc3RhcnRDb2x1bW46IG51bWJlciwgZW5kTGluZU51bWJlcjogbnVtYmVyLCBlbmRDb2x1bW46IG51bWJlciwgZGlyZWN0aW9uOiBTZWxlY3Rpb25EaXJlY3Rpb24pOiBTZWxlY3Rpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGRpcmVjdGlvbiBvZiBhIHNlbGVjdGlvbi5cbiAgICAgKi9cbiAgICBleHBvcnQgZW51bSBTZWxlY3Rpb25EaXJlY3Rpb24ge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHNlbGVjdGlvbiBzdGFydHMgYWJvdmUgd2hlcmUgaXQgZW5kcy5cbiAgICAgICAgICovXG4gICAgICAgIExUUiA9IDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgc2VsZWN0aW9uIHN0YXJ0cyBiZWxvdyB3aGVyZSBpdCBlbmRzLlxuICAgICAgICAgKi9cbiAgICAgICAgUlRMID0gMVxuICAgIH1cblxuICAgIGV4cG9ydCBjbGFzcyBUb2tlbiB7XG4gICAgICAgIF90b2tlbkJyYW5kOiB2b2lkO1xuICAgICAgICByZWFkb25seSBvZmZzZXQ6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgdHlwZTogc3RyaW5nO1xuICAgICAgICByZWFkb25seSBsYW5ndWFnZTogc3RyaW5nO1xuICAgICAgICBjb25zdHJ1Y3RvcihvZmZzZXQ6IG51bWJlciwgdHlwZTogc3RyaW5nLCBsYW5ndWFnZTogc3RyaW5nKTtcbiAgICAgICAgdG9TdHJpbmcoKTogc3RyaW5nO1xuICAgIH1cbn1cblxuZGVjbGFyZSBuYW1lc3BhY2UgbW9uYWNvLmVkaXRvciB7XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElEaWZmTmF2aWdhdG9yIHtcbiAgICAgICAgY2FuTmF2aWdhdGUoKTogYm9vbGVhbjtcbiAgICAgICAgbmV4dCgpOiB2b2lkO1xuICAgICAgICBwcmV2aW91cygpOiB2b2lkO1xuICAgICAgICBkaXNwb3NlKCk6IHZvaWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGVkaXRvciB1bmRlciBgZG9tRWxlbWVudGAuXG4gICAgICogYGRvbUVsZW1lbnRgIHNob3VsZCBiZSBlbXB0eSAobm90IGNvbnRhaW4gb3RoZXIgZG9tIG5vZGVzKS5cbiAgICAgKiBUaGUgZWRpdG9yIHdpbGwgcmVhZCB0aGUgc2l6ZSBvZiBgZG9tRWxlbWVudGAuXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZShkb21FbGVtZW50OiBIVE1MRWxlbWVudCwgb3B0aW9ucz86IElTdGFuZGFsb25lRWRpdG9yQ29uc3RydWN0aW9uT3B0aW9ucywgb3ZlcnJpZGU/OiBJRWRpdG9yT3ZlcnJpZGVTZXJ2aWNlcyk6IElTdGFuZGFsb25lQ29kZUVkaXRvcjtcblxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBhbiBlZGl0b3IgaXMgY3JlYXRlZC5cbiAgICAgKiBDcmVhdGluZyBhIGRpZmYgZWRpdG9yIG1pZ2h0IGNhdXNlIHRoaXMgbGlzdGVuZXIgdG8gYmUgaW52b2tlZCB3aXRoIHRoZSB0d28gZWRpdG9ycy5cbiAgICAgKiBAZXZlbnRcbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gb25EaWRDcmVhdGVFZGl0b3IobGlzdGVuZXI6IChjb2RlRWRpdG9yOiBJQ29kZUVkaXRvcikgPT4gdm9pZCk6IElEaXNwb3NhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGRpZmYgZWRpdG9yIHVuZGVyIGBkb21FbGVtZW50YC5cbiAgICAgKiBgZG9tRWxlbWVudGAgc2hvdWxkIGJlIGVtcHR5IChub3QgY29udGFpbiBvdGhlciBkb20gbm9kZXMpLlxuICAgICAqIFRoZSBlZGl0b3Igd2lsbCByZWFkIHRoZSBzaXplIG9mIGBkb21FbGVtZW50YC5cbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlRGlmZkVkaXRvcihkb21FbGVtZW50OiBIVE1MRWxlbWVudCwgb3B0aW9ucz86IElTdGFuZGFsb25lRGlmZkVkaXRvckNvbnN0cnVjdGlvbk9wdGlvbnMsIG92ZXJyaWRlPzogSUVkaXRvck92ZXJyaWRlU2VydmljZXMpOiBJU3RhbmRhbG9uZURpZmZFZGl0b3I7XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElEaWZmTmF2aWdhdG9yT3B0aW9ucyB7XG4gICAgICAgIHJlYWRvbmx5IGZvbGxvd3NDYXJldD86IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IGlnbm9yZUNoYXJDaGFuZ2VzPzogYm9vbGVhbjtcbiAgICAgICAgcmVhZG9ubHkgYWx3YXlzUmV2ZWFsRmlyc3Q/OiBib29sZWFuO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaWZmTmF2aWdhdG9yKGRpZmZFZGl0b3I6IElTdGFuZGFsb25lRGlmZkVkaXRvciwgb3B0cz86IElEaWZmTmF2aWdhdG9yT3B0aW9ucyk6IElEaWZmTmF2aWdhdG9yO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGVkaXRvciBtb2RlbC5cbiAgICAgKiBZb3UgY2FuIHNwZWNpZnkgdGhlIGxhbmd1YWdlIHRoYXQgc2hvdWxkIGJlIHNldCBmb3IgdGhpcyBtb2RlbCBvciBsZXQgdGhlIGxhbmd1YWdlIGJlIGluZmVycmVkIGZyb20gdGhlIGB1cmlgLlxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNb2RlbCh2YWx1ZTogc3RyaW5nLCBsYW5ndWFnZT86IHN0cmluZywgdXJpPzogVXJpKTogSVRleHRNb2RlbDtcblxuICAgIC8qKlxuICAgICAqIENoYW5nZSB0aGUgbGFuZ3VhZ2UgZm9yIGEgbW9kZWwuXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHNldE1vZGVsTGFuZ3VhZ2UobW9kZWw6IElUZXh0TW9kZWwsIGxhbmd1YWdlSWQ6IHN0cmluZyk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIG1hcmtlcnMgZm9yIGEgbW9kZWwuXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHNldE1vZGVsTWFya2Vycyhtb2RlbDogSVRleHRNb2RlbCwgb3duZXI6IHN0cmluZywgbWFya2VyczogSU1hcmtlckRhdGFbXSk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgbWFya2VycyBmb3Igb3duZXIgYW5kL29yIHJlc291cmNlXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBsaXN0IG9mIG1hcmtlcnNcbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gZ2V0TW9kZWxNYXJrZXJzKGZpbHRlcjoge1xuICAgICAgICBvd25lcj86IHN0cmluZztcbiAgICAgICAgcmVzb3VyY2U/OiBVcmk7XG4gICAgICAgIHRha2U/OiBudW1iZXI7XG4gICAgfSk6IElNYXJrZXJbXTtcblxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBtYXJrZXJzIGNoYW5nZSBmb3IgYSBtb2RlbC5cbiAgICAgKiBAZXZlbnRcbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gb25EaWRDaGFuZ2VNYXJrZXJzKGxpc3RlbmVyOiAoZTogcmVhZG9ubHkgVXJpW10pID0+IHZvaWQpOiBJRGlzcG9zYWJsZTtcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbW9kZWwgdGhhdCBoYXMgYHVyaWAgaWYgaXQgZXhpc3RzLlxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXRNb2RlbCh1cmk6IFVyaSk6IElUZXh0TW9kZWwgfCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCB0aGUgY3JlYXRlZCBtb2RlbHMuXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGdldE1vZGVscygpOiBJVGV4dE1vZGVsW107XG5cbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gYSBtb2RlbCBpcyBjcmVhdGVkLlxuICAgICAqIEBldmVudFxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiBvbkRpZENyZWF0ZU1vZGVsKGxpc3RlbmVyOiAobW9kZWw6IElUZXh0TW9kZWwpID0+IHZvaWQpOiBJRGlzcG9zYWJsZTtcblxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgcmlnaHQgYmVmb3JlIGEgbW9kZWwgaXMgZGlzcG9zZWQuXG4gICAgICogQGV2ZW50XG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIG9uV2lsbERpc3Bvc2VNb2RlbChsaXN0ZW5lcjogKG1vZGVsOiBJVGV4dE1vZGVsKSA9PiB2b2lkKTogSURpc3Bvc2FibGU7XG5cbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gYSBkaWZmZXJlbnQgbGFuZ3VhZ2UgaXMgc2V0IHRvIGEgbW9kZWwuXG4gICAgICogQGV2ZW50XG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIG9uRGlkQ2hhbmdlTW9kZWxMYW5ndWFnZShsaXN0ZW5lcjogKGU6IHtcbiAgICAgICAgcmVhZG9ubHkgbW9kZWw6IElUZXh0TW9kZWw7XG4gICAgICAgIHJlYWRvbmx5IG9sZExhbmd1YWdlOiBzdHJpbmc7XG4gICAgfSkgPT4gdm9pZCk6IElEaXNwb3NhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IHdlYiB3b3JrZXIgdGhhdCBoYXMgbW9kZWwgc3luY2luZyBjYXBhYmlsaXRpZXMgYnVpbHQgaW4uXG4gICAgICogU3BlY2lmeSBhbiBBTUQgbW9kdWxlIHRvIGxvYWQgdGhhdCB3aWxsIGBjcmVhdGVgIGFuIG9iamVjdCB0aGF0IHdpbGwgYmUgcHJveGllZC5cbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlV2ViV29ya2VyPFQ+KG9wdHM6IElXZWJXb3JrZXJPcHRpb25zKTogTW9uYWNvV2ViV29ya2VyPFQ+O1xuXG4gICAgLyoqXG4gICAgICogQ29sb3JpemUgdGhlIGNvbnRlbnRzIG9mIGBkb21Ob2RlYCB1c2luZyBhdHRyaWJ1dGUgYGRhdGEtbGFuZ2AuXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNvbG9yaXplRWxlbWVudChkb21Ob2RlOiBIVE1MRWxlbWVudCwgb3B0aW9uczogSUNvbG9yaXplckVsZW1lbnRPcHRpb25zKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIENvbG9yaXplIGB0ZXh0YCB1c2luZyBsYW5ndWFnZSBgbGFuZ3VhZ2VJZGAuXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNvbG9yaXplKHRleHQ6IHN0cmluZywgbGFuZ3VhZ2VJZDogc3RyaW5nLCBvcHRpb25zOiBJQ29sb3JpemVyT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPjtcblxuICAgIC8qKlxuICAgICAqIENvbG9yaXplIGEgbGluZSBpbiBhIG1vZGVsLlxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiBjb2xvcml6ZU1vZGVsTGluZShtb2RlbDogSVRleHRNb2RlbCwgbGluZU51bWJlcjogbnVtYmVyLCB0YWJTaXplPzogbnVtYmVyKTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVG9rZW5pemUgYHRleHRgIHVzaW5nIGxhbmd1YWdlIGBsYW5ndWFnZUlkYFxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiB0b2tlbml6ZSh0ZXh0OiBzdHJpbmcsIGxhbmd1YWdlSWQ6IHN0cmluZyk6IFRva2VuW11bXTtcblxuICAgIC8qKlxuICAgICAqIERlZmluZSBhIG5ldyB0aGVtZSBvciB1cGRhdGUgYW4gZXhpc3RpbmcgdGhlbWUuXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRlZmluZVRoZW1lKHRoZW1lTmFtZTogc3RyaW5nLCB0aGVtZURhdGE6IElTdGFuZGFsb25lVGhlbWVEYXRhKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFN3aXRjaGVzIHRvIGEgdGhlbWUuXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHNldFRoZW1lKHRoZW1lTmFtZTogc3RyaW5nKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgY2FjaGVkIGZvbnQgbWVhc3VyZW1lbnRzIGFuZCB0cmlnZ2VycyByZS1tZWFzdXJlbWVudC5cbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gcmVtZWFzdXJlRm9udHMoKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgY29tbWFuZC5cbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJDb21tYW5kKGlkOiBzdHJpbmcsIGhhbmRsZXI6IChhY2Nlc3NvcjogYW55LCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCk6IElEaXNwb3NhYmxlO1xuXG4gICAgZXhwb3J0IHR5cGUgQnVpbHRpblRoZW1lID0gJ3ZzJyB8ICd2cy1kYXJrJyB8ICdoYy1ibGFjayc7XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElTdGFuZGFsb25lVGhlbWVEYXRhIHtcbiAgICAgICAgYmFzZTogQnVpbHRpblRoZW1lO1xuICAgICAgICBpbmhlcml0OiBib29sZWFuO1xuICAgICAgICBydWxlczogSVRva2VuVGhlbWVSdWxlW107XG4gICAgICAgIGVuY29kZWRUb2tlbnNDb2xvcnM/OiBzdHJpbmdbXTtcbiAgICAgICAgY29sb3JzOiBJQ29sb3JzO1xuICAgIH1cblxuICAgIGV4cG9ydCB0eXBlIElDb2xvcnMgPSB7XG4gICAgICAgIFtjb2xvcklkOiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfTtcblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVRva2VuVGhlbWVSdWxlIHtcbiAgICAgICAgdG9rZW46IHN0cmluZztcbiAgICAgICAgZm9yZWdyb3VuZD86IHN0cmluZztcbiAgICAgICAgYmFja2dyb3VuZD86IHN0cmluZztcbiAgICAgICAgZm9udFN0eWxlPzogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgd2ViIHdvcmtlciB0aGF0IGNhbiBwcm92aWRlIGEgcHJveHkgdG8gYW4gYXJiaXRyYXJ5IGZpbGUuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBNb25hY29XZWJXb3JrZXI8VD4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGVybWluYXRlIHRoZSB3ZWIgd29ya2VyLCB0aHVzIGludmFsaWRhdGluZyB0aGUgcmV0dXJuZWQgcHJveHkuXG4gICAgICAgICAqL1xuICAgICAgICBkaXNwb3NlKCk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgYSBwcm94eSB0byB0aGUgYXJiaXRyYXJ5IGxvYWRlZCBjb2RlLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0UHJveHkoKTogUHJvbWlzZTxUPjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN5bmNocm9uaXplIChzZW5kKSB0aGUgbW9kZWxzIGF0IGByZXNvdXJjZXNgIHRvIHRoZSB3ZWIgd29ya2VyLFxuICAgICAgICAgKiBtYWtpbmcgdGhlbSBhdmFpbGFibGUgaW4gdGhlIG1vbmFjby53b3JrZXIuZ2V0TWlycm9yTW9kZWxzKCkuXG4gICAgICAgICAqL1xuICAgICAgICB3aXRoU3luY2VkUmVzb3VyY2VzKHJlc291cmNlczogVXJpW10pOiBQcm9taXNlPFQ+O1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVdlYldvcmtlck9wdGlvbnMge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIEFNRCBtb2R1bGVJZCB0byBsb2FkLlxuICAgICAgICAgKiBJdCBzaG91bGQgZXhwb3J0IGEgZnVuY3Rpb24gYGNyZWF0ZWAgdGhhdCBzaG91bGQgcmV0dXJuIHRoZSBleHBvcnRlZCBwcm94eS5cbiAgICAgICAgICovXG4gICAgICAgIG1vZHVsZUlkOiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZGF0YSB0byBzZW5kIG92ZXIgd2hlbiBjYWxsaW5nIGNyZWF0ZSBvbiB0aGUgbW9kdWxlLlxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlRGF0YT86IGFueTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgbGFiZWwgdG8gYmUgdXNlZCB0byBpZGVudGlmeSB0aGUgd2ViIHdvcmtlciBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLlxuICAgICAgICAgKi9cbiAgICAgICAgbGFiZWw/OiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBieSB0aGUgd2ViIHdvcmtlciB0byBtYWtlIGNhbGxzIGJhY2sgdG8gdGhlIG1haW4gdGhyZWFkLlxuICAgICAgICAgKi9cbiAgICAgICAgaG9zdD86IGFueTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEtlZXAgaWRsZSBtb2RlbHMuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIGZhbHNlLCB3aGljaCBtZWFucyB0aGF0IGlkbGUgbW9kZWxzIHdpbGwgc3RvcCBzeW5jaW5nIGFmdGVyIGEgd2hpbGUuXG4gICAgICAgICAqL1xuICAgICAgICBrZWVwSWRsZU1vZGVscz86IGJvb2xlYW47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb24gb2YgYW4gYWN0aW9uIGNvbnRyaWJ1dGlvblxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUFjdGlvbkRlc2NyaXB0b3Ige1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGNvbnRyaWJ1dGVkIGFjdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGlkOiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGxhYmVsIG9mIHRoZSBhY3Rpb24gdGhhdCB3aWxsIGJlIHByZXNlbnRlZCB0byB0aGUgdXNlci5cbiAgICAgICAgICovXG4gICAgICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcmVjb25kaXRpb24gcnVsZS5cbiAgICAgICAgICovXG4gICAgICAgIHByZWNvbmRpdGlvbj86IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGFycmF5IG9mIGtleWJpbmRpbmdzIGZvciB0aGUgYWN0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAga2V5YmluZGluZ3M/OiBudW1iZXJbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBrZXliaW5kaW5nIHJ1bGUgKGNvbmRpdGlvbiBvbiB0b3Agb2YgcHJlY29uZGl0aW9uKS5cbiAgICAgICAgICovXG4gICAgICAgIGtleWJpbmRpbmdDb250ZXh0Pzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29udHJvbCBpZiB0aGUgYWN0aW9uIHNob3VsZCBzaG93IHVwIGluIHRoZSBjb250ZXh0IG1lbnUgYW5kIHdoZXJlLlxuICAgICAgICAgKiBUaGUgY29udGV4dCBtZW51IG9mIHRoZSBlZGl0b3IgaGFzIHRoZXNlIGRlZmF1bHQ6XG4gICAgICAgICAqICAgbmF2aWdhdGlvbiAtIFRoZSBuYXZpZ2F0aW9uIGdyb3VwIGNvbWVzIGZpcnN0IGluIGFsbCBjYXNlcy5cbiAgICAgICAgICogICAxX21vZGlmaWNhdGlvbiAtIFRoaXMgZ3JvdXAgY29tZXMgbmV4dCBhbmQgY29udGFpbnMgY29tbWFuZHMgdGhhdCBtb2RpZnkgeW91ciBjb2RlLlxuICAgICAgICAgKiAgIDlfY3V0Y29weXBhc3RlIC0gVGhlIGxhc3QgZGVmYXVsdCBncm91cCB3aXRoIHRoZSBiYXNpYyBlZGl0aW5nIGNvbW1hbmRzLlxuICAgICAgICAgKiBZb3UgY2FuIGFsc28gY3JlYXRlIHlvdXIgb3duIGdyb3VwLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBudWxsIChkb24ndCBzaG93IGluIGNvbnRleHQgbWVudSkuXG4gICAgICAgICAqL1xuICAgICAgICBjb250ZXh0TWVudUdyb3VwSWQ/OiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9sIHRoZSBvcmRlciBpbiB0aGUgY29udGV4dCBtZW51IGdyb3VwLlxuICAgICAgICAgKi9cbiAgICAgICAgY29udGV4dE1lbnVPcmRlcj86IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1ldGhvZCB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgd2hlbiB0aGUgYWN0aW9uIGlzIHRyaWdnZXJlZC5cbiAgICAgICAgICogQHBhcmFtIGVkaXRvciBUaGUgZWRpdG9yIGluc3RhbmNlIGlzIHBhc3NlZCBpbiBhcyBhIGNvbnZlbmllbmNlXG4gICAgICAgICAqL1xuICAgICAgICBydW4oZWRpdG9yOiBJQ29kZUVkaXRvciwgLi4uYXJnczogYW55W10pOiB2b2lkIHwgUHJvbWlzZTx2b2lkPjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcHRpb25zIHdoaWNoIGFwcGx5IGZvciBhbGwgZWRpdG9ycy5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElHbG9iYWxFZGl0b3JPcHRpb25zIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBudW1iZXIgb2Ygc3BhY2VzIGEgdGFiIGlzIGVxdWFsIHRvLlxuICAgICAgICAgKiBUaGlzIHNldHRpbmcgaXMgb3ZlcnJpZGRlbiBiYXNlZCBvbiB0aGUgZmlsZSBjb250ZW50cyB3aGVuIGBkZXRlY3RJbmRlbnRhdGlvbmAgaXMgb24uXG4gICAgICAgICAqIERlZmF1bHRzIHRvIDQuXG4gICAgICAgICAqL1xuICAgICAgICB0YWJTaXplPzogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogSW5zZXJ0IHNwYWNlcyB3aGVuIHByZXNzaW5nIGBUYWJgLlxuICAgICAgICAgKiBUaGlzIHNldHRpbmcgaXMgb3ZlcnJpZGRlbiBiYXNlZCBvbiB0aGUgZmlsZSBjb250ZW50cyB3aGVuIGBkZXRlY3RJbmRlbnRhdGlvbmAgaXMgb24uXG4gICAgICAgICAqIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgICAqL1xuICAgICAgICBpbnNlcnRTcGFjZXM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29udHJvbHMgd2hldGhlciBgdGFiU2l6ZWAgYW5kIGBpbnNlcnRTcGFjZXNgIHdpbGwgYmUgYXV0b21hdGljYWxseSBkZXRlY3RlZCB3aGVuIGEgZmlsZSBpcyBvcGVuZWQgYmFzZWQgb24gdGhlIGZpbGUgY29udGVudHMuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgICAqL1xuICAgICAgICBkZXRlY3RJbmRlbnRhdGlvbj86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW1vdmUgdHJhaWxpbmcgYXV0byBpbnNlcnRlZCB3aGl0ZXNwYWNlLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAgICAgKi9cbiAgICAgICAgdHJpbUF1dG9XaGl0ZXNwYWNlPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpYWwgaGFuZGxpbmcgZm9yIGxhcmdlIGZpbGVzIHRvIGRpc2FibGUgY2VydGFpbiBtZW1vcnkgaW50ZW5zaXZlIGZlYXR1cmVzLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAgICAgKi9cbiAgICAgICAgbGFyZ2VGaWxlT3B0aW1pemF0aW9ucz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9scyB3aGV0aGVyIGNvbXBsZXRpb25zIHNob3VsZCBiZSBjb21wdXRlZCBiYXNlZCBvbiB3b3JkcyBpbiB0aGUgZG9jdW1lbnQuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgICAqL1xuICAgICAgICB3b3JkQmFzZWRTdWdnZXN0aW9ucz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9scyB3aGV0aGVyIHdvcmQgYmFzZWQgY29tcGxldGlvbnMgc2hvdWxkIGJlIGluY2x1ZGVkIGZyb20gb3BlbmVkIGRvY3VtZW50cyBvZiB0aGUgc2FtZSBsYW5ndWFnZSBvciBhbnkgbGFuZ3VhZ2UuXG4gICAgICAgICAqL1xuICAgICAgICB3b3JkQmFzZWRTdWdnZXN0aW9uc09ubHlTYW1lTGFuZ3VhZ2U/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29udHJvbHMgd2hldGhlciB0aGUgc2VtYW50aWNIaWdobGlnaHRpbmcgaXMgc2hvd24gZm9yIHRoZSBsYW5ndWFnZXMgdGhhdCBzdXBwb3J0IGl0LlxuICAgICAgICAgKiB0cnVlOiBzZW1hbnRpY0hpZ2hsaWdodGluZyBpcyBlbmFibGVkIGZvciBhbGwgdGhlbWVzXG4gICAgICAgICAqIGZhbHNlOiBzZW1hbnRpY0hpZ2hsaWdodGluZyBpcyBkaXNhYmxlZCBmb3IgYWxsIHRoZW1lc1xuICAgICAgICAgKiAnY29uZmlndXJlZEJ5VGhlbWUnOiBzZW1hbnRpY0hpZ2hsaWdodGluZyBpcyBjb250cm9sbGVkIGJ5IHRoZSBjdXJyZW50IGNvbG9yIHRoZW1lJ3Mgc2VtYW50aWNIaWdobGlnaHRpbmcgc2V0dGluZy5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gJ2J5VGhlbWUnLlxuICAgICAgICAgKi9cbiAgICAgICAgJ3NlbWFudGljSGlnaGxpZ2h0aW5nLmVuYWJsZWQnPzogdHJ1ZSB8IGZhbHNlIHwgJ2NvbmZpZ3VyZWRCeVRoZW1lJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEtlZXAgcGVlayBlZGl0b3JzIG9wZW4gZXZlbiB3aGVuIGRvdWJsZSBjbGlja2luZyB0aGVpciBjb250ZW50IG9yIHdoZW4gaGl0dGluZyBgRXNjYXBlYC5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAgICAgICAqL1xuICAgICAgICBzdGFibGVQZWVrPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIExpbmVzIGFib3ZlIHRoaXMgbGVuZ3RoIHdpbGwgbm90IGJlIHRva2VuaXplZCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gMjAwMDAuXG4gICAgICAgICAqL1xuICAgICAgICBtYXhUb2tlbml6YXRpb25MaW5lTGVuZ3RoPzogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlbWUgdG8gYmUgdXNlZCBmb3IgcmVuZGVyaW5nLlxuICAgICAgICAgKiBUaGUgY3VycmVudCBvdXQtb2YtdGhlLWJveCBhdmFpbGFibGUgdGhlbWVzIGFyZTogJ3ZzJyAoZGVmYXVsdCksICd2cy1kYXJrJywgJ2hjLWJsYWNrJy5cbiAgICAgICAgICogWW91IGNhbiBjcmVhdGUgY3VzdG9tIHRoZW1lcyB2aWEgYG1vbmFjby5lZGl0b3IuZGVmaW5lVGhlbWVgLlxuICAgICAgICAgKiBUbyBzd2l0Y2ggYSB0aGVtZSwgdXNlIGBtb25hY28uZWRpdG9yLnNldFRoZW1lYC5cbiAgICAgICAgICogKipOT1RFKio6IFRoZSB0aGVtZSBtaWdodCBiZSBvdmVyd3JpdHRlbiBpZiB0aGUgT1MgaXMgaW4gaGlnaCBjb250cmFzdCBtb2RlLCB1bmxlc3MgYGF1dG9EZXRlY3RIaWdoQ29udHJhc3RgIGlzIHNldCB0byBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoZW1lPzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgZW5hYmxlZCwgd2lsbCBhdXRvbWF0aWNhbGx5IGNoYW5nZSB0byBoaWdoIGNvbnRyYXN0IHRoZW1lIGlmIHRoZSBPUyBpcyB1c2luZyBhIGhpZ2ggY29udHJhc3QgdGhlbWUuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgICAqL1xuICAgICAgICBhdXRvRGV0ZWN0SGlnaENvbnRyYXN0PzogYm9vbGVhbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3B0aW9ucyB0byBjcmVhdGUgYW4gZWRpdG9yLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVN0YW5kYWxvbmVFZGl0b3JDb25zdHJ1Y3Rpb25PcHRpb25zIGV4dGVuZHMgSUVkaXRvckNvbnN0cnVjdGlvbk9wdGlvbnMsIElHbG9iYWxFZGl0b3JPcHRpb25zIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBpbml0aWFsIG1vZGVsIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGNvZGUgZWRpdG9yLlxuICAgICAgICAgKi9cbiAgICAgICAgbW9kZWw/OiBJVGV4dE1vZGVsIHwgbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBpbml0aWFsIHZhbHVlIG9mIHRoZSBhdXRvIGNyZWF0ZWQgbW9kZWwgaW4gdGhlIGVkaXRvci5cbiAgICAgICAgICogVG8gbm90IGF1dG9tYXRpY2FsbHkgY3JlYXRlIGEgbW9kZWwsIHVzZSBgbW9kZWw6IG51bGxgLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFsdWU/OiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgaW5pdGlhbCBsYW5ndWFnZSBvZiB0aGUgYXV0byBjcmVhdGVkIG1vZGVsIGluIHRoZSBlZGl0b3IuXG4gICAgICAgICAqIFRvIG5vdCBhdXRvbWF0aWNhbGx5IGNyZWF0ZSBhIG1vZGVsLCB1c2UgYG1vZGVsOiBudWxsYC5cbiAgICAgICAgICovXG4gICAgICAgIGxhbmd1YWdlPzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogSW5pdGlhbCB0aGVtZSB0byBiZSB1c2VkIGZvciByZW5kZXJpbmcuXG4gICAgICAgICAqIFRoZSBjdXJyZW50IG91dC1vZi10aGUtYm94IGF2YWlsYWJsZSB0aGVtZXMgYXJlOiAndnMnIChkZWZhdWx0KSwgJ3ZzLWRhcmsnLCAnaGMtYmxhY2snLlxuICAgICAgICAgKiBZb3UgY2FuIGNyZWF0ZSBjdXN0b20gdGhlbWVzIHZpYSBgbW9uYWNvLmVkaXRvci5kZWZpbmVUaGVtZWAuXG4gICAgICAgICAqIFRvIHN3aXRjaCBhIHRoZW1lLCB1c2UgYG1vbmFjby5lZGl0b3Iuc2V0VGhlbWVgLlxuICAgICAgICAgKiAqKk5PVEUqKjogVGhlIHRoZW1lIG1pZ2h0IGJlIG92ZXJ3cml0dGVuIGlmIHRoZSBPUyBpcyBpbiBoaWdoIGNvbnRyYXN0IG1vZGUsIHVubGVzcyBgYXV0b0RldGVjdEhpZ2hDb250cmFzdGAgaXMgc2V0IHRvIGZhbHNlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhlbWU/OiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBlbmFibGVkLCB3aWxsIGF1dG9tYXRpY2FsbHkgY2hhbmdlIHRvIGhpZ2ggY29udHJhc3QgdGhlbWUgaWYgdGhlIE9TIGlzIHVzaW5nIGEgaGlnaCBjb250cmFzdCB0aGVtZS5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGF1dG9EZXRlY3RIaWdoQ29udHJhc3Q/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gVVJMIHRvIG9wZW4gd2hlbiBDdHJsK0ggKFdpbmRvd3MgYW5kIExpbnV4KSBvciBDbWQrSCAoT1NYKSBpcyBwcmVzc2VkIGluXG4gICAgICAgICAqIHRoZSBhY2Nlc3NpYmlsaXR5IGhlbHAgZGlhbG9nIGluIHRoZSBlZGl0b3IuXG4gICAgICAgICAqXG4gICAgICAgICAqIERlZmF1bHRzIHRvIFwiaHR0cHM6Ly9nby5taWNyb3NvZnQuY29tL2Z3bGluay8/bGlua2lkPTg1MjQ1MFwiXG4gICAgICAgICAqL1xuICAgICAgICBhY2Nlc3NpYmlsaXR5SGVscFVybD86IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnRhaW5lciBlbGVtZW50IHRvIHVzZSBmb3IgQVJJQSBtZXNzYWdlcy5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gZG9jdW1lbnQuYm9keS5cbiAgICAgICAgICovXG4gICAgICAgIGFyaWFDb250YWluZXJFbGVtZW50PzogSFRNTEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wdGlvbnMgdG8gY3JlYXRlIGEgZGlmZiBlZGl0b3IuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU3RhbmRhbG9uZURpZmZFZGl0b3JDb25zdHJ1Y3Rpb25PcHRpb25zIGV4dGVuZHMgSURpZmZFZGl0b3JDb25zdHJ1Y3Rpb25PcHRpb25zIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluaXRpYWwgdGhlbWUgdG8gYmUgdXNlZCBmb3IgcmVuZGVyaW5nLlxuICAgICAgICAgKiBUaGUgY3VycmVudCBvdXQtb2YtdGhlLWJveCBhdmFpbGFibGUgdGhlbWVzIGFyZTogJ3ZzJyAoZGVmYXVsdCksICd2cy1kYXJrJywgJ2hjLWJsYWNrJy5cbiAgICAgICAgICogWW91IGNhbiBjcmVhdGUgY3VzdG9tIHRoZW1lcyB2aWEgYG1vbmFjby5lZGl0b3IuZGVmaW5lVGhlbWVgLlxuICAgICAgICAgKiBUbyBzd2l0Y2ggYSB0aGVtZSwgdXNlIGBtb25hY28uZWRpdG9yLnNldFRoZW1lYC5cbiAgICAgICAgICogKipOT1RFKio6IFRoZSB0aGVtZSBtaWdodCBiZSBvdmVyd3JpdHRlbiBpZiB0aGUgT1MgaXMgaW4gaGlnaCBjb250cmFzdCBtb2RlLCB1bmxlc3MgYGF1dG9EZXRlY3RIaWdoQ29udHJhc3RgIGlzIHNldCB0byBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoZW1lPzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgZW5hYmxlZCwgd2lsbCBhdXRvbWF0aWNhbGx5IGNoYW5nZSB0byBoaWdoIGNvbnRyYXN0IHRoZW1lIGlmIHRoZSBPUyBpcyB1c2luZyBhIGhpZ2ggY29udHJhc3QgdGhlbWUuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgICAqL1xuICAgICAgICBhdXRvRGV0ZWN0SGlnaENvbnRyYXN0PzogYm9vbGVhbjtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElTdGFuZGFsb25lQ29kZUVkaXRvciBleHRlbmRzIElDb2RlRWRpdG9yIHtcbiAgICAgICAgdXBkYXRlT3B0aW9ucyhuZXdPcHRpb25zOiBJRWRpdG9yT3B0aW9ucyAmIElHbG9iYWxFZGl0b3JPcHRpb25zKTogdm9pZDtcbiAgICAgICAgYWRkQ29tbWFuZChrZXliaW5kaW5nOiBudW1iZXIsIGhhbmRsZXI6IElDb21tYW5kSGFuZGxlciwgY29udGV4dD86IHN0cmluZyk6IHN0cmluZyB8IG51bGw7XG4gICAgICAgIGNyZWF0ZUNvbnRleHRLZXk8VD4oa2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZTogVCk6IElDb250ZXh0S2V5PFQ+O1xuICAgICAgICBhZGRBY3Rpb24oZGVzY3JpcHRvcjogSUFjdGlvbkRlc2NyaXB0b3IpOiBJRGlzcG9zYWJsZTtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElTdGFuZGFsb25lRGlmZkVkaXRvciBleHRlbmRzIElEaWZmRWRpdG9yIHtcbiAgICAgICAgYWRkQ29tbWFuZChrZXliaW5kaW5nOiBudW1iZXIsIGhhbmRsZXI6IElDb21tYW5kSGFuZGxlciwgY29udGV4dD86IHN0cmluZyk6IHN0cmluZyB8IG51bGw7XG4gICAgICAgIGNyZWF0ZUNvbnRleHRLZXk8VD4oa2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZTogVCk6IElDb250ZXh0S2V5PFQ+O1xuICAgICAgICBhZGRBY3Rpb24oZGVzY3JpcHRvcjogSUFjdGlvbkRlc2NyaXB0b3IpOiBJRGlzcG9zYWJsZTtcbiAgICAgICAgZ2V0T3JpZ2luYWxFZGl0b3IoKTogSVN0YW5kYWxvbmVDb2RlRWRpdG9yO1xuICAgICAgICBnZXRNb2RpZmllZEVkaXRvcigpOiBJU3RhbmRhbG9uZUNvZGVFZGl0b3I7XG4gICAgfVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUNvbW1hbmRIYW5kbGVyIHtcbiAgICAgICAgKC4uLmFyZ3M6IGFueVtdKTogdm9pZDtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElDb250ZXh0S2V5PFQ+IHtcbiAgICAgICAgc2V0KHZhbHVlOiBUKTogdm9pZDtcbiAgICAgICAgcmVzZXQoKTogdm9pZDtcbiAgICAgICAgZ2V0KCk6IFQgfCB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBJRWRpdG9yT3ZlcnJpZGVTZXJ2aWNlcyB7XG4gICAgICAgIFtpbmRleDogc3RyaW5nXTogYW55O1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU1hcmtlciB7XG4gICAgICAgIG93bmVyOiBzdHJpbmc7XG4gICAgICAgIHJlc291cmNlOiBVcmk7XG4gICAgICAgIHNldmVyaXR5OiBNYXJrZXJTZXZlcml0eTtcbiAgICAgICAgY29kZT86IHN0cmluZyB8IHtcbiAgICAgICAgICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgICAgICAgICB0YXJnZXQ6IFVyaTtcbiAgICAgICAgfTtcbiAgICAgICAgbWVzc2FnZTogc3RyaW5nO1xuICAgICAgICBzb3VyY2U/OiBzdHJpbmc7XG4gICAgICAgIHN0YXJ0TGluZU51bWJlcjogbnVtYmVyO1xuICAgICAgICBzdGFydENvbHVtbjogbnVtYmVyO1xuICAgICAgICBlbmRMaW5lTnVtYmVyOiBudW1iZXI7XG4gICAgICAgIGVuZENvbHVtbjogbnVtYmVyO1xuICAgICAgICByZWxhdGVkSW5mb3JtYXRpb24/OiBJUmVsYXRlZEluZm9ybWF0aW9uW107XG4gICAgICAgIHRhZ3M/OiBNYXJrZXJUYWdbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHN0cnVjdHVyZSBkZWZpbmluZyBhIHByb2JsZW0vd2FybmluZy9ldGMuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJTWFya2VyRGF0YSB7XG4gICAgICAgIGNvZGU/OiBzdHJpbmcgfCB7XG4gICAgICAgICAgICB2YWx1ZTogc3RyaW5nO1xuICAgICAgICAgICAgdGFyZ2V0OiBVcmk7XG4gICAgICAgIH07XG4gICAgICAgIHNldmVyaXR5OiBNYXJrZXJTZXZlcml0eTtcbiAgICAgICAgbWVzc2FnZTogc3RyaW5nO1xuICAgICAgICBzb3VyY2U/OiBzdHJpbmc7XG4gICAgICAgIHN0YXJ0TGluZU51bWJlcjogbnVtYmVyO1xuICAgICAgICBzdGFydENvbHVtbjogbnVtYmVyO1xuICAgICAgICBlbmRMaW5lTnVtYmVyOiBudW1iZXI7XG4gICAgICAgIGVuZENvbHVtbjogbnVtYmVyO1xuICAgICAgICByZWxhdGVkSW5mb3JtYXRpb24/OiBJUmVsYXRlZEluZm9ybWF0aW9uW107XG4gICAgICAgIHRhZ3M/OiBNYXJrZXJUYWdbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVJlbGF0ZWRJbmZvcm1hdGlvbiB7XG4gICAgICAgIHJlc291cmNlOiBVcmk7XG4gICAgICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICAgICAgc3RhcnRMaW5lTnVtYmVyOiBudW1iZXI7XG4gICAgICAgIHN0YXJ0Q29sdW1uOiBudW1iZXI7XG4gICAgICAgIGVuZExpbmVOdW1iZXI6IG51bWJlcjtcbiAgICAgICAgZW5kQ29sdW1uOiBudW1iZXI7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBJQ29sb3JpemVyT3B0aW9ucyB7XG4gICAgICAgIHRhYlNpemU/OiBudW1iZXI7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBJQ29sb3JpemVyRWxlbWVudE9wdGlvbnMgZXh0ZW5kcyBJQ29sb3JpemVyT3B0aW9ucyB7XG4gICAgICAgIHRoZW1lPzogc3RyaW5nO1xuICAgICAgICBtaW1lVHlwZT86IHN0cmluZztcbiAgICB9XG5cbiAgICBleHBvcnQgZW51bSBTY3JvbGxiYXJWaXNpYmlsaXR5IHtcbiAgICAgICAgQXV0byA9IDEsXG4gICAgICAgIEhpZGRlbiA9IDIsXG4gICAgICAgIFZpc2libGUgPSAzXG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBUaGVtZUNvbG9yIHtcbiAgICAgICAgaWQ6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWZXJ0aWNhbCBMYW5lIGluIHRoZSBvdmVydmlldyBydWxlciBvZiB0aGUgZWRpdG9yLlxuICAgICAqL1xuICAgIGV4cG9ydCBlbnVtIE92ZXJ2aWV3UnVsZXJMYW5lIHtcbiAgICAgICAgTGVmdCA9IDEsXG4gICAgICAgIENlbnRlciA9IDIsXG4gICAgICAgIFJpZ2h0ID0gNCxcbiAgICAgICAgRnVsbCA9IDdcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQb3NpdGlvbiBpbiB0aGUgbWluaW1hcCB0byByZW5kZXIgdGhlIGRlY29yYXRpb24uXG4gICAgICovXG4gICAgZXhwb3J0IGVudW0gTWluaW1hcFBvc2l0aW9uIHtcbiAgICAgICAgSW5saW5lID0gMSxcbiAgICAgICAgR3V0dGVyID0gMlxuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSURlY29yYXRpb25PcHRpb25zIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENTUyBjb2xvciB0byByZW5kZXIuXG4gICAgICAgICAqIGUuZy46IHJnYmEoMTAwLCAxMDAsIDEwMCwgMC41KSBvciBhIGNvbG9yIGZyb20gdGhlIGNvbG9yIHJlZ2lzdHJ5XG4gICAgICAgICAqL1xuICAgICAgICBjb2xvcjogc3RyaW5nIHwgVGhlbWVDb2xvciB8IHVuZGVmaW5lZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENTUyBjb2xvciB0byByZW5kZXIuXG4gICAgICAgICAqIGUuZy46IHJnYmEoMTAwLCAxMDAsIDEwMCwgMC41KSBvciBhIGNvbG9yIGZyb20gdGhlIGNvbG9yIHJlZ2lzdHJ5XG4gICAgICAgICAqL1xuICAgICAgICBkYXJrQ29sb3I/OiBzdHJpbmcgfCBUaGVtZUNvbG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wdGlvbnMgZm9yIHJlbmRlcmluZyBhIG1vZGVsIGRlY29yYXRpb24gaW4gdGhlIG92ZXJ2aWV3IHJ1bGVyLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU1vZGVsRGVjb3JhdGlvbk92ZXJ2aWV3UnVsZXJPcHRpb25zIGV4dGVuZHMgSURlY29yYXRpb25PcHRpb25zIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBwb3NpdGlvbiBpbiB0aGUgb3ZlcnZpZXcgcnVsZXIuXG4gICAgICAgICAqL1xuICAgICAgICBwb3NpdGlvbjogT3ZlcnZpZXdSdWxlckxhbmU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3B0aW9ucyBmb3IgcmVuZGVyaW5nIGEgbW9kZWwgZGVjb3JhdGlvbiBpbiB0aGUgb3ZlcnZpZXcgcnVsZXIuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJTW9kZWxEZWNvcmF0aW9uTWluaW1hcE9wdGlvbnMgZXh0ZW5kcyBJRGVjb3JhdGlvbk9wdGlvbnMge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHBvc2l0aW9uIGluIHRoZSBvdmVydmlldyBydWxlci5cbiAgICAgICAgICovXG4gICAgICAgIHBvc2l0aW9uOiBNaW5pbWFwUG9zaXRpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3B0aW9ucyBmb3IgYSBtb2RlbCBkZWNvcmF0aW9uLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU1vZGVsRGVjb3JhdGlvbk9wdGlvbnMge1xuICAgICAgICAvKipcbiAgICAgICAgICogQ3VzdG9taXplIHRoZSBncm93aW5nIGJlaGF2aW9yIG9mIHRoZSBkZWNvcmF0aW9uIHdoZW4gdHlwaW5nIGF0IHRoZSBlZGdlcyBvZiB0aGUgZGVjb3JhdGlvbi5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gVHJhY2tlZFJhbmdlU3RpY2tpbmVzcy5BbHdheXNHcm93c1doZW5UeXBpbmdBdEVkZ2VzXG4gICAgICAgICAqL1xuICAgICAgICBzdGlja2luZXNzPzogVHJhY2tlZFJhbmdlU3RpY2tpbmVzcztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENTUyBjbGFzcyBuYW1lIGRlc2NyaWJpbmcgdGhlIGRlY29yYXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU/OiBzdHJpbmcgfCBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogTWVzc2FnZSB0byBiZSByZW5kZXJlZCB3aGVuIGhvdmVyaW5nIG92ZXIgdGhlIGdseXBoIG1hcmdpbiBkZWNvcmF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2x5cGhNYXJnaW5Ib3Zlck1lc3NhZ2U/OiBJTWFya2Rvd25TdHJpbmcgfCBJTWFya2Rvd25TdHJpbmdbXSB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcnJheSBvZiBNYXJrZG93blN0cmluZyB0byByZW5kZXIgYXMgdGhlIGRlY29yYXRpb24gbWVzc2FnZS5cbiAgICAgICAgICovXG4gICAgICAgIGhvdmVyTWVzc2FnZT86IElNYXJrZG93blN0cmluZyB8IElNYXJrZG93blN0cmluZ1tdIHwgbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3VsZCB0aGUgZGVjb3JhdGlvbiBleHBhbmQgdG8gZW5jb21wYXNzIGEgd2hvbGUgbGluZS5cbiAgICAgICAgICovXG4gICAgICAgIGlzV2hvbGVMaW5lPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZmllcyB0aGUgc3RhY2sgb3JkZXIgb2YgYSBkZWNvcmF0aW9uLlxuICAgICAgICAgKiBBIGRlY29yYXRpb24gd2l0aCBncmVhdGVyIHN0YWNrIG9yZGVyIGlzIGFsd2F5cyBpbiBmcm9udCBvZiBhIGRlY29yYXRpb24gd2l0aFxuICAgICAgICAgKiBhIGxvd2VyIHN0YWNrIG9yZGVyIHdoZW4gdGhlIGRlY29yYXRpb25zIGFyZSBvbiB0aGUgc2FtZSBsaW5lLlxuICAgICAgICAgKi9cbiAgICAgICAgekluZGV4PzogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgc2V0LCByZW5kZXIgdGhpcyBkZWNvcmF0aW9uIGluIHRoZSBvdmVydmlldyBydWxlci5cbiAgICAgICAgICovXG4gICAgICAgIG92ZXJ2aWV3UnVsZXI/OiBJTW9kZWxEZWNvcmF0aW9uT3ZlcnZpZXdSdWxlck9wdGlvbnMgfCBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgc2V0LCByZW5kZXIgdGhpcyBkZWNvcmF0aW9uIGluIHRoZSBtaW5pbWFwLlxuICAgICAgICAgKi9cbiAgICAgICAgbWluaW1hcD86IElNb2RlbERlY29yYXRpb25NaW5pbWFwT3B0aW9ucyB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBzZXQsIHRoZSBkZWNvcmF0aW9uIHdpbGwgYmUgcmVuZGVyZWQgaW4gdGhlIGdseXBoIG1hcmdpbiB3aXRoIHRoaXMgQ1NTIGNsYXNzIG5hbWUuXG4gICAgICAgICAqL1xuICAgICAgICBnbHlwaE1hcmdpbkNsYXNzTmFtZT86IHN0cmluZyB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBzZXQsIHRoZSBkZWNvcmF0aW9uIHdpbGwgYmUgcmVuZGVyZWQgaW4gdGhlIGxpbmVzIGRlY29yYXRpb25zIHdpdGggdGhpcyBDU1MgY2xhc3MgbmFtZS5cbiAgICAgICAgICovXG4gICAgICAgIGxpbmVzRGVjb3JhdGlvbnNDbGFzc05hbWU/OiBzdHJpbmcgfCBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgc2V0LCB0aGUgZGVjb3JhdGlvbiB3aWxsIGJlIHJlbmRlcmVkIGluIHRoZSBsaW5lcyBkZWNvcmF0aW9ucyB3aXRoIHRoaXMgQ1NTIGNsYXNzIG5hbWUsIGJ1dCBvbmx5IGZvciB0aGUgZmlyc3QgbGluZSBpbiBjYXNlIG9mIGxpbmUgd3JhcHBpbmcuXG4gICAgICAgICAqL1xuICAgICAgICBmaXJzdExpbmVEZWNvcmF0aW9uQ2xhc3NOYW1lPzogc3RyaW5nIHwgbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHNldCwgdGhlIGRlY29yYXRpb24gd2lsbCBiZSByZW5kZXJlZCBpbiB0aGUgbWFyZ2luIChjb3ZlcmluZyBpdHMgZnVsbCB3aWR0aCkgd2l0aCB0aGlzIENTUyBjbGFzcyBuYW1lLlxuICAgICAgICAgKi9cbiAgICAgICAgbWFyZ2luQ2xhc3NOYW1lPzogc3RyaW5nIHwgbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHNldCwgdGhlIGRlY29yYXRpb24gd2lsbCBiZSByZW5kZXJlZCBpbmxpbmUgd2l0aCB0aGUgdGV4dCB3aXRoIHRoaXMgQ1NTIGNsYXNzIG5hbWUuXG4gICAgICAgICAqIFBsZWFzZSB1c2UgdGhpcyBvbmx5IGZvciBDU1MgcnVsZXMgdGhhdCBtdXN0IGltcGFjdCB0aGUgdGV4dC4gRm9yIGV4YW1wbGUsIHVzZSBgY2xhc3NOYW1lYFxuICAgICAgICAgKiB0byBoYXZlIGEgYmFja2dyb3VuZCBjb2xvciBkZWNvcmF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgaW5saW5lQ2xhc3NOYW1lPzogc3RyaW5nIHwgbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoZXJlIGlzIGFuIGBpbmxpbmVDbGFzc05hbWVgIHdoaWNoIGFmZmVjdHMgbGV0dGVyIHNwYWNpbmcuXG4gICAgICAgICAqL1xuICAgICAgICBpbmxpbmVDbGFzc05hbWVBZmZlY3RzTGV0dGVyU3BhY2luZz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBzZXQsIHRoZSBkZWNvcmF0aW9uIHdpbGwgYmUgcmVuZGVyZWQgYmVmb3JlIHRoZSB0ZXh0IHdpdGggdGhpcyBDU1MgY2xhc3MgbmFtZS5cbiAgICAgICAgICovXG4gICAgICAgIGJlZm9yZUNvbnRlbnRDbGFzc05hbWU/OiBzdHJpbmcgfCBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgc2V0LCB0aGUgZGVjb3JhdGlvbiB3aWxsIGJlIHJlbmRlcmVkIGFmdGVyIHRoZSB0ZXh0IHdpdGggdGhpcyBDU1MgY2xhc3MgbmFtZS5cbiAgICAgICAgICovXG4gICAgICAgIGFmdGVyQ29udGVudENsYXNzTmFtZT86IHN0cmluZyB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBzZXQsIHRleHQgd2lsbCBiZSBpbmplY3RlZCBpbiB0aGUgdmlldyBhZnRlciB0aGUgcmFuZ2UuXG4gICAgICAgICAqL1xuICAgICAgICBhZnRlcj86IEluamVjdGVkVGV4dE9wdGlvbnMgfCBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgc2V0LCB0ZXh0IHdpbGwgYmUgaW5qZWN0ZWQgaW4gdGhlIHZpZXcgYmVmb3JlIHRoZSByYW5nZS5cbiAgICAgICAgICovXG4gICAgICAgIGJlZm9yZT86IEluamVjdGVkVGV4dE9wdGlvbnMgfCBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyZXMgdGV4dCB0aGF0IGlzIGluamVjdGVkIGludG8gdGhlIHZpZXcgd2l0aG91dCBjaGFuZ2luZyB0aGUgdW5kZXJseWluZyBkb2N1bWVudC5cbiAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSW5qZWN0ZWRUZXh0T3B0aW9ucyB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXRzIHRoZSB0ZXh0IHRvIGluamVjdC4gTXVzdCBiZSBhIHNpbmdsZSBsaW5lLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgY29udGVudDogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgc2V0LCB0aGUgZGVjb3JhdGlvbiB3aWxsIGJlIHJlbmRlcmVkIGlubGluZSB3aXRoIHRoZSB0ZXh0IHdpdGggdGhpcyBDU1MgY2xhc3MgbmFtZS5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGlubGluZUNsYXNzTmFtZT86IHN0cmluZyB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGVyZSBpcyBhbiBgaW5saW5lQ2xhc3NOYW1lYCB3aGljaCBhZmZlY3RzIGxldHRlciBzcGFjaW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgaW5saW5lQ2xhc3NOYW1lQWZmZWN0c0xldHRlclNwYWNpbmc/OiBib29sZWFuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE5ldyBtb2RlbCBkZWNvcmF0aW9ucy5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElNb2RlbERlbHRhRGVjb3JhdGlvbiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSYW5nZSB0aGF0IHRoaXMgZGVjb3JhdGlvbiBjb3ZlcnMuXG4gICAgICAgICAqL1xuICAgICAgICByYW5nZTogSVJhbmdlO1xuICAgICAgICAvKipcbiAgICAgICAgICogT3B0aW9ucyBhc3NvY2lhdGVkIHdpdGggdGhpcyBkZWNvcmF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgb3B0aW9uczogSU1vZGVsRGVjb3JhdGlvbk9wdGlvbnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBkZWNvcmF0aW9uIGluIHRoZSBtb2RlbC5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElNb2RlbERlY29yYXRpb24ge1xuICAgICAgICAvKipcbiAgICAgICAgICogSWRlbnRpZmllciBmb3IgYSBkZWNvcmF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgaWQ6IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElkZW50aWZpZXIgZm9yIGEgZGVjb3JhdGlvbidzIG93bmVyLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgb3duZXJJZDogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmFuZ2UgdGhhdCB0aGlzIGRlY29yYXRpb24gY292ZXJzLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgcmFuZ2U6IFJhbmdlO1xuICAgICAgICAvKipcbiAgICAgICAgICogT3B0aW9ucyBhc3NvY2lhdGVkIHdpdGggdGhpcyBkZWNvcmF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgb3B0aW9uczogSU1vZGVsRGVjb3JhdGlvbk9wdGlvbnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV29yZCBpbnNpZGUgYSBtb2RlbC5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElXb3JkQXRQb3NpdGlvbiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgd29yZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHdvcmQ6IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjb2x1bW4gd2hlcmUgdGhlIHdvcmQgc3RhcnRzLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgc3RhcnRDb2x1bW46IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjb2x1bW4gd2hlcmUgdGhlIHdvcmQgZW5kcy5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGVuZENvbHVtbjogbnVtYmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuZCBvZiBsaW5lIGNoYXJhY3RlciBwcmVmZXJlbmNlLlxuICAgICAqL1xuICAgIGV4cG9ydCBlbnVtIEVuZE9mTGluZVByZWZlcmVuY2Uge1xuICAgICAgICAvKipcbiAgICAgICAgICogVXNlIHRoZSBlbmQgb2YgbGluZSBjaGFyYWN0ZXIgaWRlbnRpZmllZCBpbiB0aGUgdGV4dCBidWZmZXIuXG4gICAgICAgICAqL1xuICAgICAgICBUZXh0RGVmaW5lZCA9IDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVc2UgbGluZSBmZWVkIChcXG4pIGFzIHRoZSBlbmQgb2YgbGluZSBjaGFyYWN0ZXIuXG4gICAgICAgICAqL1xuICAgICAgICBMRiA9IDEsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVc2UgY2FycmlhZ2UgcmV0dXJuIGFuZCBsaW5lIGZlZWQgKFxcclxcbikgYXMgdGhlIGVuZCBvZiBsaW5lIGNoYXJhY3Rlci5cbiAgICAgICAgICovXG4gICAgICAgIENSTEYgPSAyXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGRlZmF1bHQgZW5kIG9mIGxpbmUgdG8gdXNlIHdoZW4gaW5zdGFudGlhdGluZyBtb2RlbHMuXG4gICAgICovXG4gICAgZXhwb3J0IGVudW0gRGVmYXVsdEVuZE9mTGluZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVc2UgbGluZSBmZWVkIChcXG4pIGFzIHRoZSBlbmQgb2YgbGluZSBjaGFyYWN0ZXIuXG4gICAgICAgICAqL1xuICAgICAgICBMRiA9IDEsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVc2UgY2FycmlhZ2UgcmV0dXJuIGFuZCBsaW5lIGZlZWQgKFxcclxcbikgYXMgdGhlIGVuZCBvZiBsaW5lIGNoYXJhY3Rlci5cbiAgICAgICAgICovXG4gICAgICAgIENSTEYgPSAyXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5kIG9mIGxpbmUgY2hhcmFjdGVyIHByZWZlcmVuY2UuXG4gICAgICovXG4gICAgZXhwb3J0IGVudW0gRW5kT2ZMaW5lU2VxdWVuY2Uge1xuICAgICAgICAvKipcbiAgICAgICAgICogVXNlIGxpbmUgZmVlZCAoXFxuKSBhcyB0aGUgZW5kIG9mIGxpbmUgY2hhcmFjdGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgTEYgPSAwLFxuICAgICAgICAvKipcbiAgICAgICAgICogVXNlIGNhcnJpYWdlIHJldHVybiBhbmQgbGluZSBmZWVkIChcXHJcXG4pIGFzIHRoZSBlbmQgb2YgbGluZSBjaGFyYWN0ZXIuXG4gICAgICAgICAqL1xuICAgICAgICBDUkxGID0gMVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc2luZ2xlIGVkaXQgb3BlcmF0aW9uLCB0aGF0IGFjdHMgYXMgYSBzaW1wbGUgcmVwbGFjZS5cbiAgICAgKiBpLmUuIFJlcGxhY2UgdGV4dCBhdCBgcmFuZ2VgIHdpdGggYHRleHRgIGluIG1vZGVsLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVNpbmdsZUVkaXRPcGVyYXRpb24ge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHJhbmdlIHRvIHJlcGxhY2UuIFRoaXMgY2FuIGJlIGVtcHR5IHRvIGVtdWxhdGUgYSBzaW1wbGUgaW5zZXJ0LlxuICAgICAgICAgKi9cbiAgICAgICAgcmFuZ2U6IElSYW5nZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB0ZXh0IHRvIHJlcGxhY2Ugd2l0aC4gVGhpcyBjYW4gYmUgbnVsbCB0byBlbXVsYXRlIGEgc2ltcGxlIGRlbGV0ZS5cbiAgICAgICAgICovXG4gICAgICAgIHRleHQ6IHN0cmluZyB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGluZGljYXRlcyB0aGF0IHRoaXMgb3BlcmF0aW9uIGhhcyBcImluc2VydFwiIHNlbWFudGljcy5cbiAgICAgICAgICogaS5lLiBmb3JjZU1vdmVNYXJrZXJzID0gdHJ1ZSA9PiBpZiBgcmFuZ2VgIGlzIGNvbGxhcHNlZCwgYWxsIG1hcmtlcnMgYXQgdGhlIHBvc2l0aW9uIHdpbGwgYmUgbW92ZWQuXG4gICAgICAgICAqL1xuICAgICAgICBmb3JjZU1vdmVNYXJrZXJzPzogYm9vbGVhbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbmdsZSBlZGl0IG9wZXJhdGlvbiwgdGhhdCBoYXMgYW4gaWRlbnRpZmllci5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElJZGVudGlmaWVkU2luZ2xlRWRpdE9wZXJhdGlvbiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcmFuZ2UgdG8gcmVwbGFjZS4gVGhpcyBjYW4gYmUgZW1wdHkgdG8gZW11bGF0ZSBhIHNpbXBsZSBpbnNlcnQuXG4gICAgICAgICAqL1xuICAgICAgICByYW5nZTogSVJhbmdlO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHRleHQgdG8gcmVwbGFjZSB3aXRoLiBUaGlzIGNhbiBiZSBudWxsIHRvIGVtdWxhdGUgYSBzaW1wbGUgZGVsZXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGV4dDogc3RyaW5nIHwgbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgaW5kaWNhdGVzIHRoYXQgdGhpcyBvcGVyYXRpb24gaGFzIFwiaW5zZXJ0XCIgc2VtYW50aWNzLlxuICAgICAgICAgKiBpLmUuIGZvcmNlTW92ZU1hcmtlcnMgPSB0cnVlID0+IGlmIGByYW5nZWAgaXMgY29sbGFwc2VkLCBhbGwgbWFya2VycyBhdCB0aGUgcG9zaXRpb24gd2lsbCBiZSBtb3ZlZC5cbiAgICAgICAgICovXG4gICAgICAgIGZvcmNlTW92ZU1hcmtlcnM/OiBib29sZWFuO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVZhbGlkRWRpdE9wZXJhdGlvbiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcmFuZ2UgdG8gcmVwbGFjZS4gVGhpcyBjYW4gYmUgZW1wdHkgdG8gZW11bGF0ZSBhIHNpbXBsZSBpbnNlcnQuXG4gICAgICAgICAqL1xuICAgICAgICByYW5nZTogUmFuZ2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdGV4dCB0byByZXBsYWNlIHdpdGguIFRoaXMgY2FuIGJlIGVtcHR5IHRvIGVtdWxhdGUgYSBzaW1wbGUgZGVsZXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGV4dDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgY2FsbGJhY2sgdGhhdCBjYW4gY29tcHV0ZSB0aGUgY3Vyc29yIHN0YXRlIGFmdGVyIGFwcGx5aW5nIGEgc2VyaWVzIG9mIGVkaXQgb3BlcmF0aW9ucy5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElDdXJzb3JTdGF0ZUNvbXB1dGVyIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgY2FsbGJhY2sgdGhhdCBjYW4gY29tcHV0ZSB0aGUgcmVzdWx0aW5nIGN1cnNvcnMgc3RhdGUgYWZ0ZXIgc29tZSBlZGl0IG9wZXJhdGlvbnMgaGF2ZSBiZWVuIGV4ZWN1dGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgKGludmVyc2VFZGl0T3BlcmF0aW9uczogSVZhbGlkRWRpdE9wZXJhdGlvbltdKTogU2VsZWN0aW9uW10gfCBudWxsO1xuICAgIH1cblxuICAgIGV4cG9ydCBjbGFzcyBUZXh0TW9kZWxSZXNvbHZlZE9wdGlvbnMge1xuICAgICAgICBfdGV4dE1vZGVsUmVzb2x2ZWRPcHRpb25zQnJhbmQ6IHZvaWQ7XG4gICAgICAgIHJlYWRvbmx5IHRhYlNpemU6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgaW5kZW50U2l6ZTogbnVtYmVyO1xuICAgICAgICByZWFkb25seSBpbnNlcnRTcGFjZXM6IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IGRlZmF1bHRFT0w6IERlZmF1bHRFbmRPZkxpbmU7XG4gICAgICAgIHJlYWRvbmx5IHRyaW1BdXRvV2hpdGVzcGFjZTogYm9vbGVhbjtcbiAgICAgICAgcmVhZG9ubHkgYnJhY2tldFBhaXJDb2xvcml6YXRpb25PcHRpb25zOiBCcmFja2V0UGFpckNvbG9yaXphdGlvbk9wdGlvbnM7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBCcmFja2V0UGFpckNvbG9yaXphdGlvbk9wdGlvbnMge1xuICAgICAgICBlbmFibGVkOiBib29sZWFuO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVRleHRNb2RlbFVwZGF0ZU9wdGlvbnMge1xuICAgICAgICB0YWJTaXplPzogbnVtYmVyO1xuICAgICAgICBpbmRlbnRTaXplPzogbnVtYmVyO1xuICAgICAgICBpbnNlcnRTcGFjZXM/OiBib29sZWFuO1xuICAgICAgICB0cmltQXV0b1doaXRlc3BhY2U/OiBib29sZWFuO1xuICAgICAgICBicmFja2V0Q29sb3JpemF0aW9uT3B0aW9ucz86IEJyYWNrZXRQYWlyQ29sb3JpemF0aW9uT3B0aW9ucztcbiAgICB9XG5cbiAgICBleHBvcnQgY2xhc3MgRmluZE1hdGNoIHtcbiAgICAgICAgX2ZpbmRNYXRjaEJyYW5kOiB2b2lkO1xuICAgICAgICByZWFkb25seSByYW5nZTogUmFuZ2U7XG4gICAgICAgIHJlYWRvbmx5IG1hdGNoZXM6IHN0cmluZ1tdIHwgbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmliZXMgdGhlIGJlaGF2aW9yIG9mIGRlY29yYXRpb25zIHdoZW4gdHlwaW5nL2VkaXRpbmcgbmVhciB0aGVpciBlZGdlcy5cbiAgICAgKiBOb3RlOiBQbGVhc2UgZG8gbm90IGVkaXQgdGhlIHZhbHVlcywgYXMgdGhleSB2ZXJ5IGNhcmVmdWxseSBtYXRjaCBgRGVjb3JhdGlvblJhbmdlQmVoYXZpb3JgXG4gICAgICovXG4gICAgZXhwb3J0IGVudW0gVHJhY2tlZFJhbmdlU3RpY2tpbmVzcyB7XG4gICAgICAgIEFsd2F5c0dyb3dzV2hlblR5cGluZ0F0RWRnZXMgPSAwLFxuICAgICAgICBOZXZlckdyb3dzV2hlblR5cGluZ0F0RWRnZXMgPSAxLFxuICAgICAgICBHcm93c09ubHlXaGVuVHlwaW5nQmVmb3JlID0gMixcbiAgICAgICAgR3Jvd3NPbmx5V2hlblR5cGluZ0FmdGVyID0gM1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgbW9kZWwuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJVGV4dE1vZGVsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIHJlc291cmNlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGVkaXRvciBtb2RlbC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHVyaTogVXJpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQSB1bmlxdWUgaWRlbnRpZmllciBhc3NvY2lhdGVkIHdpdGggdGhpcyBtb2RlbC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGlkOiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdGhlIHJlc29sdmVkIG9wdGlvbnMgZm9yIHRoaXMgbW9kZWwuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRPcHRpb25zKCk6IFRleHRNb2RlbFJlc29sdmVkT3B0aW9ucztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgY3VycmVudCB2ZXJzaW9uIGlkIG9mIHRoZSBtb2RlbC5cbiAgICAgICAgICogQW55dGltZSBhIGNoYW5nZSBoYXBwZW5zIHRvIHRoZSBtb2RlbCAoZXZlbiB1bmRvL3JlZG8pLFxuICAgICAgICAgKiB0aGUgdmVyc2lvbiBpZCBpcyBpbmNyZW1lbnRlZC5cbiAgICAgICAgICovXG4gICAgICAgIGdldFZlcnNpb25JZCgpOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdGhlIGFsdGVybmF0aXZlIHZlcnNpb24gaWQgb2YgdGhlIG1vZGVsLlxuICAgICAgICAgKiBUaGlzIGFsdGVybmF0aXZlIHZlcnNpb24gaWQgaXMgbm90IGFsd2F5cyBpbmNyZW1lbnRlZCxcbiAgICAgICAgICogaXQgd2lsbCByZXR1cm4gdGhlIHNhbWUgdmFsdWVzIGluIHRoZSBjYXNlIG9mIHVuZG8tcmVkby5cbiAgICAgICAgICovXG4gICAgICAgIGdldEFsdGVybmF0aXZlVmVyc2lvbklkKCk6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcGxhY2UgdGhlIGVudGlyZSB0ZXh0IGJ1ZmZlciB2YWx1ZSBjb250YWluZWQgaW4gdGhpcyBtb2RlbC5cbiAgICAgICAgICovXG4gICAgICAgIHNldFZhbHVlKG5ld1ZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSB0ZXh0IHN0b3JlZCBpbiB0aGlzIG1vZGVsLlxuICAgICAgICAgKiBAcGFyYW0gZW9sIFRoZSBlbmQgb2YgbGluZSBjaGFyYWN0ZXIgcHJlZmVyZW5jZS4gRGVmYXVsdHMgdG8gYEVuZE9mTGluZVByZWZlcmVuY2UuVGV4dERlZmluZWRgLlxuICAgICAgICAgKiBAcGFyYW0gcHJlc2VydmVyQk9NIFByZXNlcnZlIGEgQk9NIGNoYXJhY3RlciBpZiBpdCB3YXMgZGV0ZWN0ZWQgd2hlbiB0aGUgbW9kZWwgd2FzIGNvbnN0cnVjdGVkLlxuICAgICAgICAgKiBAcmV0dXJuIFRoZSB0ZXh0LlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0VmFsdWUoZW9sPzogRW5kT2ZMaW5lUHJlZmVyZW5jZSwgcHJlc2VydmVCT00/OiBib29sZWFuKTogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSBsZW5ndGggb2YgdGhlIHRleHQgc3RvcmVkIGluIHRoaXMgbW9kZWwuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRWYWx1ZUxlbmd0aChlb2w/OiBFbmRPZkxpbmVQcmVmZXJlbmNlLCBwcmVzZXJ2ZUJPTT86IGJvb2xlYW4pOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdGhlIHRleHQgaW4gYSBjZXJ0YWluIHJhbmdlLlxuICAgICAgICAgKiBAcGFyYW0gcmFuZ2UgVGhlIHJhbmdlIGRlc2NyaWJpbmcgd2hhdCB0ZXh0IHRvIGdldC5cbiAgICAgICAgICogQHBhcmFtIGVvbCBUaGUgZW5kIG9mIGxpbmUgY2hhcmFjdGVyIHByZWZlcmVuY2UuIFRoaXMgd2lsbCBvbmx5IGJlIHVzZWQgZm9yIG11bHRpbGluZSByYW5nZXMuIERlZmF1bHRzIHRvIGBFbmRPZkxpbmVQcmVmZXJlbmNlLlRleHREZWZpbmVkYC5cbiAgICAgICAgICogQHJldHVybiBUaGUgdGV4dC5cbiAgICAgICAgICovXG4gICAgICAgIGdldFZhbHVlSW5SYW5nZShyYW5nZTogSVJhbmdlLCBlb2w/OiBFbmRPZkxpbmVQcmVmZXJlbmNlKTogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSBsZW5ndGggb2YgdGV4dCBpbiBhIGNlcnRhaW4gcmFuZ2UuXG4gICAgICAgICAqIEBwYXJhbSByYW5nZSBUaGUgcmFuZ2UgZGVzY3JpYmluZyB3aGF0IHRleHQgbGVuZ3RoIHRvIGdldC5cbiAgICAgICAgICogQHJldHVybiBUaGUgdGV4dCBsZW5ndGguXG4gICAgICAgICAqL1xuICAgICAgICBnZXRWYWx1ZUxlbmd0aEluUmFuZ2UocmFuZ2U6IElSYW5nZSk6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgY2hhcmFjdGVyIGNvdW50IG9mIHRleHQgaW4gYSBjZXJ0YWluIHJhbmdlLlxuICAgICAgICAgKiBAcGFyYW0gcmFuZ2UgVGhlIHJhbmdlIGRlc2NyaWJpbmcgd2hhdCB0ZXh0IGxlbmd0aCB0byBnZXQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRDaGFyYWN0ZXJDb3VudEluUmFuZ2UocmFuZ2U6IElSYW5nZSk6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgbnVtYmVyIG9mIGxpbmVzIGluIHRoZSBtb2RlbC5cbiAgICAgICAgICovXG4gICAgICAgIGdldExpbmVDb3VudCgpOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdGhlIHRleHQgZm9yIGEgY2VydGFpbiBsaW5lLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0TGluZUNvbnRlbnQobGluZU51bWJlcjogbnVtYmVyKTogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSB0ZXh0IGxlbmd0aCBmb3IgYSBjZXJ0YWluIGxpbmUuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRMaW5lTGVuZ3RoKGxpbmVOdW1iZXI6IG51bWJlcik6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgdGV4dCBmb3IgYWxsIGxpbmVzLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0TGluZXNDb250ZW50KCk6IHN0cmluZ1tdO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSBlbmQgb2YgbGluZSBzZXF1ZW5jZSBwcmVkb21pbmFudGx5IHVzZWQgaW4gdGhlIHRleHQgYnVmZmVyLlxuICAgICAgICAgKiBAcmV0dXJuIEVPTCBjaGFyIHNlcXVlbmNlIChlLmcuOiAnXFxuJyBvciAnXFxyXFxuJykuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRFT0woKTogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSBlbmQgb2YgbGluZSBzZXF1ZW5jZSBwcmVkb21pbmFudGx5IHVzZWQgaW4gdGhlIHRleHQgYnVmZmVyLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0RW5kT2ZMaW5lU2VxdWVuY2UoKTogRW5kT2ZMaW5lU2VxdWVuY2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdGhlIG1pbmltdW0gbGVnYWwgY29sdW1uIGZvciBsaW5lIGF0IGBsaW5lTnVtYmVyYFxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0TGluZU1pbkNvbHVtbihsaW5lTnVtYmVyOiBudW1iZXIpOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdGhlIG1heGltdW0gbGVnYWwgY29sdW1uIGZvciBsaW5lIGF0IGBsaW5lTnVtYmVyYFxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0TGluZU1heENvbHVtbihsaW5lTnVtYmVyOiBudW1iZXIpOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBjb2x1bW4gYmVmb3JlIHRoZSBmaXJzdCBub24gd2hpdGVzcGFjZSBjaGFyYWN0ZXIgZm9yIGxpbmUgYXQgYGxpbmVOdW1iZXJgLlxuICAgICAgICAgKiBSZXR1cm5zIDAgaWYgbGluZSBpcyBlbXB0eSBvciBjb250YWlucyBvbmx5IHdoaXRlc3BhY2UuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRMaW5lRmlyc3ROb25XaGl0ZXNwYWNlQ29sdW1uKGxpbmVOdW1iZXI6IG51bWJlcik6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIGNvbHVtbiBhZnRlciB0aGUgbGFzdCBub24gd2hpdGVzcGFjZSBjaGFyYWN0ZXIgZm9yIGxpbmUgYXQgYGxpbmVOdW1iZXJgLlxuICAgICAgICAgKiBSZXR1cm5zIDAgaWYgbGluZSBpcyBlbXB0eSBvciBjb250YWlucyBvbmx5IHdoaXRlc3BhY2UuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRMaW5lTGFzdE5vbldoaXRlc3BhY2VDb2x1bW4obGluZU51bWJlcjogbnVtYmVyKTogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlIGEgdmFsaWQgcG9zaXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICB2YWxpZGF0ZVBvc2l0aW9uKHBvc2l0aW9uOiBJUG9zaXRpb24pOiBQb3NpdGlvbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkdmFuY2VzIHRoZSBnaXZlbiBwb3NpdGlvbiBieSB0aGUgZ2l2ZW4gb2Zmc2V0IChuZWdhdGl2ZSBvZmZzZXRzIGFyZSBhbHNvIGFjY2VwdGVkKVxuICAgICAgICAgKiBhbmQgcmV0dXJucyBpdCBhcyBhIG5ldyB2YWxpZCBwb3NpdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogSWYgdGhlIG9mZnNldCBhbmQgcG9zaXRpb24gYXJlIHN1Y2ggdGhhdCB0aGVpciBjb21iaW5hdGlvbiBnb2VzIGJleW9uZCB0aGUgYmVnaW5uaW5nIG9yXG4gICAgICAgICAqIGVuZCBvZiB0aGUgbW9kZWwsIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIElmIHRoZSBvZmZzZXQgaXMgc3VjaCB0aGF0IHRoZSBuZXcgcG9zaXRpb24gd291bGQgYmUgaW4gdGhlIG1pZGRsZSBvZiBhIG11bHRpLWJ5dGVcbiAgICAgICAgICogbGluZSB0ZXJtaW5hdG9yLCB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgbW9kaWZ5UG9zaXRpb24ocG9zaXRpb246IElQb3NpdGlvbiwgb2Zmc2V0OiBudW1iZXIpOiBQb3NpdGlvbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZSBhIHZhbGlkIHJhbmdlLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFsaWRhdGVSYW5nZShyYW5nZTogSVJhbmdlKTogUmFuZ2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGUgcG9zaXRpb24gdG8gYSB6ZXJvLWJhc2VkIG9mZnNldC5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlIHBvc2l0aW9uIHdpbGwgYmUgW2FkanVzdGVkXSgjVGV4dERvY3VtZW50LnZhbGlkYXRlUG9zaXRpb24pLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gcG9zaXRpb24gQSBwb3NpdGlvbi5cbiAgICAgICAgICogQHJldHVybiBBIHZhbGlkIHplcm8tYmFzZWQgb2Zmc2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0T2Zmc2V0QXQocG9zaXRpb246IElQb3NpdGlvbik6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIGEgemVyby1iYXNlZCBvZmZzZXQgdG8gYSBwb3NpdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIG9mZnNldCBBIHplcm8tYmFzZWQgb2Zmc2V0LlxuICAgICAgICAgKiBAcmV0dXJuIEEgdmFsaWQgW3Bvc2l0aW9uXSgjUG9zaXRpb24pLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0UG9zaXRpb25BdChvZmZzZXQ6IG51bWJlcik6IFBvc2l0aW9uO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGEgcmFuZ2UgY292ZXJpbmcgdGhlIGVudGlyZSBtb2RlbC5cbiAgICAgICAgICovXG4gICAgICAgIGdldEZ1bGxNb2RlbFJhbmdlKCk6IFJhbmdlO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyBpZiB0aGUgbW9kZWwgd2FzIGRpc3Bvc2VkIG9yIG5vdC5cbiAgICAgICAgICovXG4gICAgICAgIGlzRGlzcG9zZWQoKTogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNlYXJjaCB0aGUgbW9kZWwuXG4gICAgICAgICAqIEBwYXJhbSBzZWFyY2hTdHJpbmcgVGhlIHN0cmluZyB1c2VkIHRvIHNlYXJjaC4gSWYgaXQgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24sIHNldCBgaXNSZWdleGAgdG8gdHJ1ZS5cbiAgICAgICAgICogQHBhcmFtIHNlYXJjaE9ubHlFZGl0YWJsZVJhbmdlIExpbWl0IHRoZSBzZWFyY2hpbmcgdG8gb25seSBzZWFyY2ggaW5zaWRlIHRoZSBlZGl0YWJsZSByYW5nZSBvZiB0aGUgbW9kZWwuXG4gICAgICAgICAqIEBwYXJhbSBpc1JlZ2V4IFVzZWQgdG8gaW5kaWNhdGUgdGhhdCBgc2VhcmNoU3RyaW5nYCBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAgICAgICAgICogQHBhcmFtIG1hdGNoQ2FzZSBGb3JjZSB0aGUgbWF0Y2hpbmcgdG8gbWF0Y2ggbG93ZXIvdXBwZXIgY2FzZSBleGFjdGx5LlxuICAgICAgICAgKiBAcGFyYW0gd29yZFNlcGFyYXRvcnMgRm9yY2UgdGhlIG1hdGNoaW5nIHRvIG1hdGNoIGVudGlyZSB3b3JkcyBvbmx5LiBQYXNzIG51bGwgb3RoZXJ3aXNlLlxuICAgICAgICAgKiBAcGFyYW0gY2FwdHVyZU1hdGNoZXMgVGhlIHJlc3VsdCB3aWxsIGNvbnRhaW4gdGhlIGNhcHR1cmVkIGdyb3Vwcy5cbiAgICAgICAgICogQHBhcmFtIGxpbWl0UmVzdWx0Q291bnQgTGltaXQgdGhlIG51bWJlciBvZiByZXN1bHRzXG4gICAgICAgICAqIEByZXR1cm4gVGhlIHJhbmdlcyB3aGVyZSB0aGUgbWF0Y2hlcyBhcmUuIEl0IGlzIGVtcHR5IGlmIG5vdCBtYXRjaGVzIGhhdmUgYmVlbiBmb3VuZC5cbiAgICAgICAgICovXG4gICAgICAgIGZpbmRNYXRjaGVzKHNlYXJjaFN0cmluZzogc3RyaW5nLCBzZWFyY2hPbmx5RWRpdGFibGVSYW5nZTogYm9vbGVhbiwgaXNSZWdleDogYm9vbGVhbiwgbWF0Y2hDYXNlOiBib29sZWFuLCB3b3JkU2VwYXJhdG9yczogc3RyaW5nIHwgbnVsbCwgY2FwdHVyZU1hdGNoZXM6IGJvb2xlYW4sIGxpbWl0UmVzdWx0Q291bnQ/OiBudW1iZXIpOiBGaW5kTWF0Y2hbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNlYXJjaCB0aGUgbW9kZWwuXG4gICAgICAgICAqIEBwYXJhbSBzZWFyY2hTdHJpbmcgVGhlIHN0cmluZyB1c2VkIHRvIHNlYXJjaC4gSWYgaXQgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24sIHNldCBgaXNSZWdleGAgdG8gdHJ1ZS5cbiAgICAgICAgICogQHBhcmFtIHNlYXJjaFNjb3BlIExpbWl0IHRoZSBzZWFyY2hpbmcgdG8gb25seSBzZWFyY2ggaW5zaWRlIHRoZXNlIHJhbmdlcy5cbiAgICAgICAgICogQHBhcmFtIGlzUmVnZXggVXNlZCB0byBpbmRpY2F0ZSB0aGF0IGBzZWFyY2hTdHJpbmdgIGlzIGEgcmVndWxhciBleHByZXNzaW9uLlxuICAgICAgICAgKiBAcGFyYW0gbWF0Y2hDYXNlIEZvcmNlIHRoZSBtYXRjaGluZyB0byBtYXRjaCBsb3dlci91cHBlciBjYXNlIGV4YWN0bHkuXG4gICAgICAgICAqIEBwYXJhbSB3b3JkU2VwYXJhdG9ycyBGb3JjZSB0aGUgbWF0Y2hpbmcgdG8gbWF0Y2ggZW50aXJlIHdvcmRzIG9ubHkuIFBhc3MgbnVsbCBvdGhlcndpc2UuXG4gICAgICAgICAqIEBwYXJhbSBjYXB0dXJlTWF0Y2hlcyBUaGUgcmVzdWx0IHdpbGwgY29udGFpbiB0aGUgY2FwdHVyZWQgZ3JvdXBzLlxuICAgICAgICAgKiBAcGFyYW0gbGltaXRSZXN1bHRDb3VudCBMaW1pdCB0aGUgbnVtYmVyIG9mIHJlc3VsdHNcbiAgICAgICAgICogQHJldHVybiBUaGUgcmFuZ2VzIHdoZXJlIHRoZSBtYXRjaGVzIGFyZS4gSXQgaXMgZW1wdHkgaWYgbm8gbWF0Y2hlcyBoYXZlIGJlZW4gZm91bmQuXG4gICAgICAgICAqL1xuICAgICAgICBmaW5kTWF0Y2hlcyhzZWFyY2hTdHJpbmc6IHN0cmluZywgc2VhcmNoU2NvcGU6IElSYW5nZSB8IElSYW5nZVtdLCBpc1JlZ2V4OiBib29sZWFuLCBtYXRjaENhc2U6IGJvb2xlYW4sIHdvcmRTZXBhcmF0b3JzOiBzdHJpbmcgfCBudWxsLCBjYXB0dXJlTWF0Y2hlczogYm9vbGVhbiwgbGltaXRSZXN1bHRDb3VudD86IG51bWJlcik6IEZpbmRNYXRjaFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2VhcmNoIHRoZSBtb2RlbCBmb3IgdGhlIG5leHQgbWF0Y2guIExvb3BzIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIG1vZGVsIGlmIG5lZWRlZC5cbiAgICAgICAgICogQHBhcmFtIHNlYXJjaFN0cmluZyBUaGUgc3RyaW5nIHVzZWQgdG8gc2VhcmNoLiBJZiBpdCBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiwgc2V0IGBpc1JlZ2V4YCB0byB0cnVlLlxuICAgICAgICAgKiBAcGFyYW0gc2VhcmNoU3RhcnQgU3RhcnQgdGhlIHNlYXJjaGluZyBhdCB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uLlxuICAgICAgICAgKiBAcGFyYW0gaXNSZWdleCBVc2VkIHRvIGluZGljYXRlIHRoYXQgYHNlYXJjaFN0cmluZ2AgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gICAgICAgICAqIEBwYXJhbSBtYXRjaENhc2UgRm9yY2UgdGhlIG1hdGNoaW5nIHRvIG1hdGNoIGxvd2VyL3VwcGVyIGNhc2UgZXhhY3RseS5cbiAgICAgICAgICogQHBhcmFtIHdvcmRTZXBhcmF0b3JzIEZvcmNlIHRoZSBtYXRjaGluZyB0byBtYXRjaCBlbnRpcmUgd29yZHMgb25seS4gUGFzcyBudWxsIG90aGVyd2lzZS5cbiAgICAgICAgICogQHBhcmFtIGNhcHR1cmVNYXRjaGVzIFRoZSByZXN1bHQgd2lsbCBjb250YWluIHRoZSBjYXB0dXJlZCBncm91cHMuXG4gICAgICAgICAqIEByZXR1cm4gVGhlIHJhbmdlIHdoZXJlIHRoZSBuZXh0IG1hdGNoIGlzLiBJdCBpcyBudWxsIGlmIG5vIG5leHQgbWF0Y2ggaGFzIGJlZW4gZm91bmQuXG4gICAgICAgICAqL1xuICAgICAgICBmaW5kTmV4dE1hdGNoKHNlYXJjaFN0cmluZzogc3RyaW5nLCBzZWFyY2hTdGFydDogSVBvc2l0aW9uLCBpc1JlZ2V4OiBib29sZWFuLCBtYXRjaENhc2U6IGJvb2xlYW4sIHdvcmRTZXBhcmF0b3JzOiBzdHJpbmcgfCBudWxsLCBjYXB0dXJlTWF0Y2hlczogYm9vbGVhbik6IEZpbmRNYXRjaCB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZWFyY2ggdGhlIG1vZGVsIGZvciB0aGUgcHJldmlvdXMgbWF0Y2guIExvb3BzIHRvIHRoZSBlbmQgb2YgdGhlIG1vZGVsIGlmIG5lZWRlZC5cbiAgICAgICAgICogQHBhcmFtIHNlYXJjaFN0cmluZyBUaGUgc3RyaW5nIHVzZWQgdG8gc2VhcmNoLiBJZiBpdCBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiwgc2V0IGBpc1JlZ2V4YCB0byB0cnVlLlxuICAgICAgICAgKiBAcGFyYW0gc2VhcmNoU3RhcnQgU3RhcnQgdGhlIHNlYXJjaGluZyBhdCB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uLlxuICAgICAgICAgKiBAcGFyYW0gaXNSZWdleCBVc2VkIHRvIGluZGljYXRlIHRoYXQgYHNlYXJjaFN0cmluZ2AgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gICAgICAgICAqIEBwYXJhbSBtYXRjaENhc2UgRm9yY2UgdGhlIG1hdGNoaW5nIHRvIG1hdGNoIGxvd2VyL3VwcGVyIGNhc2UgZXhhY3RseS5cbiAgICAgICAgICogQHBhcmFtIHdvcmRTZXBhcmF0b3JzIEZvcmNlIHRoZSBtYXRjaGluZyB0byBtYXRjaCBlbnRpcmUgd29yZHMgb25seS4gUGFzcyBudWxsIG90aGVyd2lzZS5cbiAgICAgICAgICogQHBhcmFtIGNhcHR1cmVNYXRjaGVzIFRoZSByZXN1bHQgd2lsbCBjb250YWluIHRoZSBjYXB0dXJlZCBncm91cHMuXG4gICAgICAgICAqIEByZXR1cm4gVGhlIHJhbmdlIHdoZXJlIHRoZSBwcmV2aW91cyBtYXRjaCBpcy4gSXQgaXMgbnVsbCBpZiBubyBwcmV2aW91cyBtYXRjaCBoYXMgYmVlbiBmb3VuZC5cbiAgICAgICAgICovXG4gICAgICAgIGZpbmRQcmV2aW91c01hdGNoKHNlYXJjaFN0cmluZzogc3RyaW5nLCBzZWFyY2hTdGFydDogSVBvc2l0aW9uLCBpc1JlZ2V4OiBib29sZWFuLCBtYXRjaENhc2U6IGJvb2xlYW4sIHdvcmRTZXBhcmF0b3JzOiBzdHJpbmcgfCBudWxsLCBjYXB0dXJlTWF0Y2hlczogYm9vbGVhbik6IEZpbmRNYXRjaCB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdGhlIGxhbmd1YWdlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIG1vZGVsLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0TGFuZ3VhZ2VJZCgpOiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdGhlIHdvcmQgdW5kZXIgb3IgYmVzaWRlcyBgcG9zaXRpb25gLlxuICAgICAgICAgKiBAcGFyYW0gcG9zaXRpb24gVGhlIHBvc2l0aW9uIHRvIGxvb2sgZm9yIGEgd29yZC5cbiAgICAgICAgICogQHJldHVybiBUaGUgd29yZCB1bmRlciBvciBiZXNpZGVzIGBwb3NpdGlvbmAuIE1pZ2h0IGJlIG51bGwuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRXb3JkQXRQb3NpdGlvbihwb3NpdGlvbjogSVBvc2l0aW9uKTogSVdvcmRBdFBvc2l0aW9uIHwgbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgd29yZCB1bmRlciBvciBiZXNpZGVzIGBwb3NpdGlvbmAgdHJpbW1lZCB0byBgcG9zaXRpb25gLmNvbHVtblxuICAgICAgICAgKiBAcGFyYW0gcG9zaXRpb24gVGhlIHBvc2l0aW9uIHRvIGxvb2sgZm9yIGEgd29yZC5cbiAgICAgICAgICogQHJldHVybiBUaGUgd29yZCB1bmRlciBvciBiZXNpZGVzIGBwb3NpdGlvbmAuIFdpbGwgbmV2ZXIgYmUgbnVsbC5cbiAgICAgICAgICovXG4gICAgICAgIGdldFdvcmRVbnRpbFBvc2l0aW9uKHBvc2l0aW9uOiBJUG9zaXRpb24pOiBJV29yZEF0UG9zaXRpb247XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQZXJmb3JtIGEgbWluaW11bSBhbW91bnQgb2Ygb3BlcmF0aW9ucywgaW4gb3JkZXIgdG8gdHJhbnNmb3JtIHRoZSBkZWNvcmF0aW9uc1xuICAgICAgICAgKiBpZGVudGlmaWVkIGJ5IGBvbGREZWNvcmF0aW9uc2AgdG8gdGhlIGRlY29yYXRpb25zIGRlc2NyaWJlZCBieSBgbmV3RGVjb3JhdGlvbnNgXG4gICAgICAgICAqIGFuZCByZXR1cm5zIHRoZSBuZXcgaWRlbnRpZmllcnMgYXNzb2NpYXRlZCB3aXRoIHRoZSByZXN1bHRpbmcgZGVjb3JhdGlvbnMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBvbGREZWNvcmF0aW9ucyBBcnJheSBjb250YWluaW5nIHByZXZpb3VzIGRlY29yYXRpb25zIGlkZW50aWZpZXJzLlxuICAgICAgICAgKiBAcGFyYW0gbmV3RGVjb3JhdGlvbnMgQXJyYXkgZGVzY3JpYmluZyB3aGF0IGRlY29yYXRpb25zIHNob3VsZCByZXN1bHQgYWZ0ZXIgdGhlIGNhbGwuXG4gICAgICAgICAqIEBwYXJhbSBvd25lcklkIElkZW50aWZpZXMgdGhlIGVkaXRvciBpZCBpbiB3aGljaCB0aGVzZSBkZWNvcmF0aW9ucyBzaG91bGQgYXBwZWFyLiBJZiBubyBgb3duZXJJZGAgaXMgcHJvdmlkZWQsIHRoZSBkZWNvcmF0aW9ucyB3aWxsIGFwcGVhciBpbiBhbGwgZWRpdG9ycyB0aGF0IGF0dGFjaCB0aGlzIG1vZGVsLlxuICAgICAgICAgKiBAcmV0dXJuIEFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG5ldyBkZWNvcmF0aW9ucyBpZGVudGlmaWVycy5cbiAgICAgICAgICovXG4gICAgICAgIGRlbHRhRGVjb3JhdGlvbnMob2xkRGVjb3JhdGlvbnM6IHN0cmluZ1tdLCBuZXdEZWNvcmF0aW9uczogSU1vZGVsRGVsdGFEZWNvcmF0aW9uW10sIG93bmVySWQ/OiBudW1iZXIpOiBzdHJpbmdbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgb3B0aW9ucyBhc3NvY2lhdGVkIHdpdGggYSBkZWNvcmF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0gaWQgVGhlIGRlY29yYXRpb24gaWQuXG4gICAgICAgICAqIEByZXR1cm4gVGhlIGRlY29yYXRpb24gb3B0aW9ucyBvciBudWxsIGlmIHRoZSBkZWNvcmF0aW9uIHdhcyBub3QgZm91bmQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXREZWNvcmF0aW9uT3B0aW9ucyhpZDogc3RyaW5nKTogSU1vZGVsRGVjb3JhdGlvbk9wdGlvbnMgfCBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSByYW5nZSBhc3NvY2lhdGVkIHdpdGggYSBkZWNvcmF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0gaWQgVGhlIGRlY29yYXRpb24gaWQuXG4gICAgICAgICAqIEByZXR1cm4gVGhlIGRlY29yYXRpb24gcmFuZ2Ugb3IgbnVsbCBpZiB0aGUgZGVjb3JhdGlvbiB3YXMgbm90IGZvdW5kLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0RGVjb3JhdGlvblJhbmdlKGlkOiBzdHJpbmcpOiBSYW5nZSB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIGFsbCB0aGUgZGVjb3JhdGlvbnMgZm9yIHRoZSBsaW5lIGBsaW5lTnVtYmVyYCBhcyBhbiBhcnJheS5cbiAgICAgICAgICogQHBhcmFtIGxpbmVOdW1iZXIgVGhlIGxpbmUgbnVtYmVyXG4gICAgICAgICAqIEBwYXJhbSBvd25lcklkIElmIHNldCwgaXQgd2lsbCBpZ25vcmUgZGVjb3JhdGlvbnMgYmVsb25naW5nIHRvIG90aGVyIG93bmVycy5cbiAgICAgICAgICogQHBhcmFtIGZpbHRlck91dFZhbGlkYXRpb24gSWYgc2V0LCBpdCB3aWxsIGlnbm9yZSBkZWNvcmF0aW9ucyBzcGVjaWZpYyB0byB2YWxpZGF0aW9uIChpLmUuIHdhcm5pbmdzLCBlcnJvcnMpLlxuICAgICAgICAgKiBAcmV0dXJuIEFuIGFycmF5IHdpdGggdGhlIGRlY29yYXRpb25zXG4gICAgICAgICAqL1xuICAgICAgICBnZXRMaW5lRGVjb3JhdGlvbnMobGluZU51bWJlcjogbnVtYmVyLCBvd25lcklkPzogbnVtYmVyLCBmaWx0ZXJPdXRWYWxpZGF0aW9uPzogYm9vbGVhbik6IElNb2RlbERlY29yYXRpb25bXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgYWxsIHRoZSBkZWNvcmF0aW9ucyBmb3IgdGhlIGxpbmVzIGJldHdlZW4gYHN0YXJ0TGluZU51bWJlcmAgYW5kIGBlbmRMaW5lTnVtYmVyYCBhcyBhbiBhcnJheS5cbiAgICAgICAgICogQHBhcmFtIHN0YXJ0TGluZU51bWJlciBUaGUgc3RhcnQgbGluZSBudW1iZXJcbiAgICAgICAgICogQHBhcmFtIGVuZExpbmVOdW1iZXIgVGhlIGVuZCBsaW5lIG51bWJlclxuICAgICAgICAgKiBAcGFyYW0gb3duZXJJZCBJZiBzZXQsIGl0IHdpbGwgaWdub3JlIGRlY29yYXRpb25zIGJlbG9uZ2luZyB0byBvdGhlciBvd25lcnMuXG4gICAgICAgICAqIEBwYXJhbSBmaWx0ZXJPdXRWYWxpZGF0aW9uIElmIHNldCwgaXQgd2lsbCBpZ25vcmUgZGVjb3JhdGlvbnMgc3BlY2lmaWMgdG8gdmFsaWRhdGlvbiAoaS5lLiB3YXJuaW5ncywgZXJyb3JzKS5cbiAgICAgICAgICogQHJldHVybiBBbiBhcnJheSB3aXRoIHRoZSBkZWNvcmF0aW9uc1xuICAgICAgICAgKi9cbiAgICAgICAgZ2V0TGluZXNEZWNvcmF0aW9ucyhzdGFydExpbmVOdW1iZXI6IG51bWJlciwgZW5kTGluZU51bWJlcjogbnVtYmVyLCBvd25lcklkPzogbnVtYmVyLCBmaWx0ZXJPdXRWYWxpZGF0aW9uPzogYm9vbGVhbik6IElNb2RlbERlY29yYXRpb25bXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgYWxsIHRoZSBkZWNvcmF0aW9ucyBpbiBhIHJhbmdlIGFzIGFuIGFycmF5LiBPbmx5IGBzdGFydExpbmVOdW1iZXJgIGFuZCBgZW5kTGluZU51bWJlcmAgZnJvbSBgcmFuZ2VgIGFyZSB1c2VkIGZvciBmaWx0ZXJpbmcuXG4gICAgICAgICAqIFNvIGZvciBub3cgaXQgcmV0dXJucyBhbGwgdGhlIGRlY29yYXRpb25zIG9uIHRoZSBzYW1lIGxpbmUgYXMgYHJhbmdlYC5cbiAgICAgICAgICogQHBhcmFtIHJhbmdlIFRoZSByYW5nZSB0byBzZWFyY2ggaW5cbiAgICAgICAgICogQHBhcmFtIG93bmVySWQgSWYgc2V0LCBpdCB3aWxsIGlnbm9yZSBkZWNvcmF0aW9ucyBiZWxvbmdpbmcgdG8gb3RoZXIgb3duZXJzLlxuICAgICAgICAgKiBAcGFyYW0gZmlsdGVyT3V0VmFsaWRhdGlvbiBJZiBzZXQsIGl0IHdpbGwgaWdub3JlIGRlY29yYXRpb25zIHNwZWNpZmljIHRvIHZhbGlkYXRpb24gKGkuZS4gd2FybmluZ3MsIGVycm9ycykuXG4gICAgICAgICAqIEByZXR1cm4gQW4gYXJyYXkgd2l0aCB0aGUgZGVjb3JhdGlvbnNcbiAgICAgICAgICovXG4gICAgICAgIGdldERlY29yYXRpb25zSW5SYW5nZShyYW5nZTogSVJhbmdlLCBvd25lcklkPzogbnVtYmVyLCBmaWx0ZXJPdXRWYWxpZGF0aW9uPzogYm9vbGVhbik6IElNb2RlbERlY29yYXRpb25bXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgYWxsIHRoZSBkZWNvcmF0aW9ucyBhcyBhbiBhcnJheS5cbiAgICAgICAgICogQHBhcmFtIG93bmVySWQgSWYgc2V0LCBpdCB3aWxsIGlnbm9yZSBkZWNvcmF0aW9ucyBiZWxvbmdpbmcgdG8gb3RoZXIgb3duZXJzLlxuICAgICAgICAgKiBAcGFyYW0gZmlsdGVyT3V0VmFsaWRhdGlvbiBJZiBzZXQsIGl0IHdpbGwgaWdub3JlIGRlY29yYXRpb25zIHNwZWNpZmljIHRvIHZhbGlkYXRpb24gKGkuZS4gd2FybmluZ3MsIGVycm9ycykuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRBbGxEZWNvcmF0aW9ucyhvd25lcklkPzogbnVtYmVyLCBmaWx0ZXJPdXRWYWxpZGF0aW9uPzogYm9vbGVhbik6IElNb2RlbERlY29yYXRpb25bXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgYWxsIHRoZSBkZWNvcmF0aW9ucyB0aGF0IHNob3VsZCBiZSByZW5kZXJlZCBpbiB0aGUgb3ZlcnZpZXcgcnVsZXIgYXMgYW4gYXJyYXkuXG4gICAgICAgICAqIEBwYXJhbSBvd25lcklkIElmIHNldCwgaXQgd2lsbCBpZ25vcmUgZGVjb3JhdGlvbnMgYmVsb25naW5nIHRvIG90aGVyIG93bmVycy5cbiAgICAgICAgICogQHBhcmFtIGZpbHRlck91dFZhbGlkYXRpb24gSWYgc2V0LCBpdCB3aWxsIGlnbm9yZSBkZWNvcmF0aW9ucyBzcGVjaWZpYyB0byB2YWxpZGF0aW9uIChpLmUuIHdhcm5pbmdzLCBlcnJvcnMpLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0T3ZlcnZpZXdSdWxlckRlY29yYXRpb25zKG93bmVySWQ/OiBudW1iZXIsIGZpbHRlck91dFZhbGlkYXRpb24/OiBib29sZWFuKTogSU1vZGVsRGVjb3JhdGlvbltdO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyBhbGwgdGhlIGRlY29yYXRpb25zIHRoYXQgY29udGFpbiBpbmplY3RlZCB0ZXh0LlxuICAgICAgICAgKiBAcGFyYW0gb3duZXJJZCBJZiBzZXQsIGl0IHdpbGwgaWdub3JlIGRlY29yYXRpb25zIGJlbG9uZ2luZyB0byBvdGhlciBvd25lcnMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRJbmplY3RlZFRleHREZWNvcmF0aW9ucyhvd25lcklkPzogbnVtYmVyKTogSU1vZGVsRGVjb3JhdGlvbltdO1xuICAgICAgICAvKipcbiAgICAgICAgICogTm9ybWFsaXplIGEgc3RyaW5nIGNvbnRhaW5pbmcgd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gaW5kZW50YXRpb24gcnVsZXMgKGNvbnZlcnRzIHRvIHNwYWNlcyBvciB0byB0YWJzKS5cbiAgICAgICAgICovXG4gICAgICAgIG5vcm1hbGl6ZUluZGVudGF0aW9uKHN0cjogc3RyaW5nKTogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2hhbmdlIHRoZSBvcHRpb25zIG9mIHRoaXMgbW9kZWwuXG4gICAgICAgICAqL1xuICAgICAgICB1cGRhdGVPcHRpb25zKG5ld09wdHM6IElUZXh0TW9kZWxVcGRhdGVPcHRpb25zKTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERldGVjdCB0aGUgaW5kZW50YXRpb24gb3B0aW9ucyBmb3IgdGhpcyBtb2RlbCBmcm9tIGl0cyBjb250ZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgZGV0ZWN0SW5kZW50YXRpb24oZGVmYXVsdEluc2VydFNwYWNlczogYm9vbGVhbiwgZGVmYXVsdFRhYlNpemU6IG51bWJlcik6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDbG9zZSB0aGUgY3VycmVudCB1bmRvLXJlZG8gZWxlbWVudC5cbiAgICAgICAgICogVGhpcyBvZmZlcnMgYSB3YXkgdG8gY3JlYXRlIGFuIHVuZG8vcmVkbyBzdG9wIHBvaW50LlxuICAgICAgICAgKi9cbiAgICAgICAgcHVzaFN0YWNrRWxlbWVudCgpOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICogT3BlbiB0aGUgY3VycmVudCB1bmRvLXJlZG8gZWxlbWVudC5cbiAgICAgICAgICogVGhpcyBvZmZlcnMgYSB3YXkgdG8gcmVtb3ZlIHRoZSBjdXJyZW50IHVuZG8vcmVkbyBzdG9wIHBvaW50LlxuICAgICAgICAgKi9cbiAgICAgICAgcG9wU3RhY2tFbGVtZW50KCk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQdXNoIGVkaXQgb3BlcmF0aW9ucywgYmFzaWNhbGx5IGVkaXRpbmcgdGhlIG1vZGVsLiBUaGlzIGlzIHRoZSBwcmVmZXJyZWQgd2F5XG4gICAgICAgICAqIG9mIGVkaXRpbmcgdGhlIG1vZGVsLiBUaGUgZWRpdCBvcGVyYXRpb25zIHdpbGwgbGFuZCBvbiB0aGUgdW5kbyBzdGFjay5cbiAgICAgICAgICogQHBhcmFtIGJlZm9yZUN1cnNvclN0YXRlIFRoZSBjdXJzb3Igc3RhdGUgYmVmb3JlIHRoZSBlZGl0IG9wZXJhdGlvbnMuIFRoaXMgY3Vyc29yIHN0YXRlIHdpbGwgYmUgcmV0dXJuZWQgd2hlbiBgdW5kb2Agb3IgYHJlZG9gIGFyZSBpbnZva2VkLlxuICAgICAgICAgKiBAcGFyYW0gZWRpdE9wZXJhdGlvbnMgVGhlIGVkaXQgb3BlcmF0aW9ucy5cbiAgICAgICAgICogQHBhcmFtIGN1cnNvclN0YXRlQ29tcHV0ZXIgQSBjYWxsYmFjayB0aGF0IGNhbiBjb21wdXRlIHRoZSByZXN1bHRpbmcgY3Vyc29ycyBzdGF0ZSBhZnRlciB0aGUgZWRpdCBvcGVyYXRpb25zIGhhdmUgYmVlbiBleGVjdXRlZC5cbiAgICAgICAgICogQHJldHVybiBUaGUgY3Vyc29yIHN0YXRlIHJldHVybmVkIGJ5IHRoZSBgY3Vyc29yU3RhdGVDb21wdXRlcmAuXG4gICAgICAgICAqL1xuICAgICAgICBwdXNoRWRpdE9wZXJhdGlvbnMoYmVmb3JlQ3Vyc29yU3RhdGU6IFNlbGVjdGlvbltdIHwgbnVsbCwgZWRpdE9wZXJhdGlvbnM6IElJZGVudGlmaWVkU2luZ2xlRWRpdE9wZXJhdGlvbltdLCBjdXJzb3JTdGF0ZUNvbXB1dGVyOiBJQ3Vyc29yU3RhdGVDb21wdXRlcik6IFNlbGVjdGlvbltdIHwgbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENoYW5nZSB0aGUgZW5kIG9mIGxpbmUgc2VxdWVuY2UuIFRoaXMgaXMgdGhlIHByZWZlcnJlZCB3YXkgb2ZcbiAgICAgICAgICogY2hhbmdpbmcgdGhlIGVvbCBzZXF1ZW5jZS4gVGhpcyB3aWxsIGxhbmQgb24gdGhlIHVuZG8gc3RhY2suXG4gICAgICAgICAqL1xuICAgICAgICBwdXNoRU9MKGVvbDogRW5kT2ZMaW5lU2VxdWVuY2UpOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICogRWRpdCB0aGUgbW9kZWwgd2l0aG91dCBhZGRpbmcgdGhlIGVkaXRzIHRvIHRoZSB1bmRvIHN0YWNrLlxuICAgICAgICAgKiBUaGlzIGNhbiBoYXZlIGRpcmUgY29uc2VxdWVuY2VzIG9uIHRoZSB1bmRvIHN0YWNrISBTZWUgQHB1c2hFZGl0T3BlcmF0aW9ucyBmb3IgdGhlIHByZWZlcnJlZCB3YXkuXG4gICAgICAgICAqIEBwYXJhbSBvcGVyYXRpb25zIFRoZSBlZGl0IG9wZXJhdGlvbnMuXG4gICAgICAgICAqIEByZXR1cm4gSWYgZGVzaXJlZCwgdGhlIGludmVyc2UgZWRpdCBvcGVyYXRpb25zLCB0aGF0LCB3aGVuIGFwcGxpZWQsIHdpbGwgYnJpbmcgdGhlIG1vZGVsIGJhY2sgdG8gdGhlIHByZXZpb3VzIHN0YXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgYXBwbHlFZGl0cyhvcGVyYXRpb25zOiBJSWRlbnRpZmllZFNpbmdsZUVkaXRPcGVyYXRpb25bXSk6IHZvaWQ7XG4gICAgICAgIGFwcGx5RWRpdHMob3BlcmF0aW9uczogSUlkZW50aWZpZWRTaW5nbGVFZGl0T3BlcmF0aW9uW10sIGNvbXB1dGVVbmRvRWRpdHM6IGZhbHNlKTogdm9pZDtcbiAgICAgICAgYXBwbHlFZGl0cyhvcGVyYXRpb25zOiBJSWRlbnRpZmllZFNpbmdsZUVkaXRPcGVyYXRpb25bXSwgY29tcHV0ZVVuZG9FZGl0czogdHJ1ZSk6IElWYWxpZEVkaXRPcGVyYXRpb25bXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENoYW5nZSB0aGUgZW5kIG9mIGxpbmUgc2VxdWVuY2Ugd2l0aG91dCByZWNvcmRpbmcgaW4gdGhlIHVuZG8gc3RhY2suXG4gICAgICAgICAqIFRoaXMgY2FuIGhhdmUgZGlyZSBjb25zZXF1ZW5jZXMgb24gdGhlIHVuZG8gc3RhY2shIFNlZSBAcHVzaEVPTCBmb3IgdGhlIHByZWZlcnJlZCB3YXkuXG4gICAgICAgICAqL1xuICAgICAgICBzZXRFT0woZW9sOiBFbmRPZkxpbmVTZXF1ZW5jZSk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBldmVudCBlbWl0dGVkIHdoZW4gdGhlIGNvbnRlbnRzIG9mIHRoZSBtb2RlbCBoYXZlIGNoYW5nZWQuXG4gICAgICAgICAqIEBldmVudFxuICAgICAgICAgKi9cbiAgICAgICAgb25EaWRDaGFuZ2VDb250ZW50KGxpc3RlbmVyOiAoZTogSU1vZGVsQ29udGVudENoYW5nZWRFdmVudCkgPT4gdm9pZCk6IElEaXNwb3NhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gZXZlbnQgZW1pdHRlZCB3aGVuIGRlY29yYXRpb25zIG9mIHRoZSBtb2RlbCBoYXZlIGNoYW5nZWQuXG4gICAgICAgICAqIEBldmVudFxuICAgICAgICAgKi9cbiAgICAgICAgb25EaWRDaGFuZ2VEZWNvcmF0aW9ucyhsaXN0ZW5lcjogKGU6IElNb2RlbERlY29yYXRpb25zQ2hhbmdlZEV2ZW50KSA9PiB2b2lkKTogSURpc3Bvc2FibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBldmVudCBlbWl0dGVkIHdoZW4gdGhlIG1vZGVsIG9wdGlvbnMgaGF2ZSBjaGFuZ2VkLlxuICAgICAgICAgKiBAZXZlbnRcbiAgICAgICAgICovXG4gICAgICAgIG9uRGlkQ2hhbmdlT3B0aW9ucyhsaXN0ZW5lcjogKGU6IElNb2RlbE9wdGlvbnNDaGFuZ2VkRXZlbnQpID0+IHZvaWQpOiBJRGlzcG9zYWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgbGFuZ3VhZ2UgYXNzb2NpYXRlZCB3aXRoIHRoZSBtb2RlbCBoYXMgY2hhbmdlZC5cbiAgICAgICAgICogQGV2ZW50XG4gICAgICAgICAqL1xuICAgICAgICBvbkRpZENoYW5nZUxhbmd1YWdlKGxpc3RlbmVyOiAoZTogSU1vZGVsTGFuZ3VhZ2VDaGFuZ2VkRXZlbnQpID0+IHZvaWQpOiBJRGlzcG9zYWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgbGFuZ3VhZ2UgY29uZmlndXJhdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIG1vZGVsIGhhcyBjaGFuZ2VkLlxuICAgICAgICAgKiBAZXZlbnRcbiAgICAgICAgICovXG4gICAgICAgIG9uRGlkQ2hhbmdlTGFuZ3VhZ2VDb25maWd1cmF0aW9uKGxpc3RlbmVyOiAoZTogSU1vZGVsTGFuZ3VhZ2VDb25maWd1cmF0aW9uQ2hhbmdlZEV2ZW50KSA9PiB2b2lkKTogSURpc3Bvc2FibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBldmVudCBlbWl0dGVkIHdoZW4gdGhlIG1vZGVsIGhhcyBiZWVuIGF0dGFjaGVkIHRvIHRoZSBmaXJzdCBlZGl0b3Igb3IgZGV0YWNoZWQgZnJvbSB0aGUgbGFzdCBlZGl0b3IuXG4gICAgICAgICAqIEBldmVudFxuICAgICAgICAgKi9cbiAgICAgICAgb25EaWRDaGFuZ2VBdHRhY2hlZChsaXN0ZW5lcjogKCkgPT4gdm9pZCk6IElEaXNwb3NhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gZXZlbnQgZW1pdHRlZCByaWdodCBiZWZvcmUgZGlzcG9zaW5nIHRoZSBtb2RlbC5cbiAgICAgICAgICogQGV2ZW50XG4gICAgICAgICAqL1xuICAgICAgICBvbldpbGxEaXNwb3NlKGxpc3RlbmVyOiAoKSA9PiB2b2lkKTogSURpc3Bvc2FibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXN0cm95IHRoaXMgbW9kZWwuXG4gICAgICAgICAqL1xuICAgICAgICBkaXNwb3NlKCk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIGlmIHRoaXMgbW9kZWwgaXMgYXR0YWNoZWQgdG8gYW4gZWRpdG9yIG9yIG5vdC5cbiAgICAgICAgICovXG4gICAgICAgIGlzQXR0YWNoZWRUb0VkaXRvcigpOiBib29sZWFuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgYnVpbGRlciBhbmQgaGVscGVyIGZvciBlZGl0IG9wZXJhdGlvbnMgZm9yIGEgY29tbWFuZC5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElFZGl0T3BlcmF0aW9uQnVpbGRlciB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGQgYSBuZXcgZWRpdCBvcGVyYXRpb24gKGEgcmVwbGFjZSBvcGVyYXRpb24pLlxuICAgICAgICAgKiBAcGFyYW0gcmFuZ2UgVGhlIHJhbmdlIHRvIHJlcGxhY2UgKGRlbGV0ZSkuIE1heSBiZSBlbXB0eSB0byByZXByZXNlbnQgYSBzaW1wbGUgaW5zZXJ0LlxuICAgICAgICAgKiBAcGFyYW0gdGV4dCBUaGUgdGV4dCB0byByZXBsYWNlIHdpdGguIE1heSBiZSBudWxsIHRvIHJlcHJlc2VudCBhIHNpbXBsZSBkZWxldGUuXG4gICAgICAgICAqL1xuICAgICAgICBhZGRFZGl0T3BlcmF0aW9uKHJhbmdlOiBJUmFuZ2UsIHRleHQ6IHN0cmluZyB8IG51bGwsIGZvcmNlTW92ZU1hcmtlcnM/OiBib29sZWFuKTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZCBhIG5ldyBlZGl0IG9wZXJhdGlvbiAoYSByZXBsYWNlIG9wZXJhdGlvbikuXG4gICAgICAgICAqIFRoZSBpbnZlcnNlIGVkaXRzIHdpbGwgYmUgYWNjZXNzaWJsZSBpbiBgSUN1cnNvclN0YXRlQ29tcHV0ZXJEYXRhLmdldEludmVyc2VFZGl0T3BlcmF0aW9ucygpYFxuICAgICAgICAgKiBAcGFyYW0gcmFuZ2UgVGhlIHJhbmdlIHRvIHJlcGxhY2UgKGRlbGV0ZSkuIE1heSBiZSBlbXB0eSB0byByZXByZXNlbnQgYSBzaW1wbGUgaW5zZXJ0LlxuICAgICAgICAgKiBAcGFyYW0gdGV4dCBUaGUgdGV4dCB0byByZXBsYWNlIHdpdGguIE1heSBiZSBudWxsIHRvIHJlcHJlc2VudCBhIHNpbXBsZSBkZWxldGUuXG4gICAgICAgICAqL1xuICAgICAgICBhZGRUcmFja2VkRWRpdE9wZXJhdGlvbihyYW5nZTogSVJhbmdlLCB0ZXh0OiBzdHJpbmcgfCBudWxsLCBmb3JjZU1vdmVNYXJrZXJzPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmFjayBgc2VsZWN0aW9uYCB3aGVuIGFwcGx5aW5nIGVkaXQgb3BlcmF0aW9ucy5cbiAgICAgICAgICogQSBiZXN0IGVmZm9ydCB3aWxsIGJlIG1hZGUgdG8gbm90IGdyb3cvZXhwYW5kIHRoZSBzZWxlY3Rpb24uXG4gICAgICAgICAqIEFuIGVtcHR5IHNlbGVjdGlvbiB3aWxsIGNsYW1wIHRvIGEgbmVhcmJ5IGNoYXJhY3Rlci5cbiAgICAgICAgICogQHBhcmFtIHNlbGVjdGlvbiBUaGUgc2VsZWN0aW9uIHRvIHRyYWNrLlxuICAgICAgICAgKiBAcGFyYW0gdHJhY2tQcmV2aW91c09uRW1wdHkgSWYgc2V0LCBhbmQgdGhlIHNlbGVjdGlvbiBpcyBlbXB0eSwgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIHNlbGVjdGlvblxuICAgICAgICAgKiAgICAgICAgICAgc2hvdWxkIGNsYW1wIHRvIHRoZSBwcmV2aW91cyBvciB0aGUgbmV4dCBjaGFyYWN0ZXIuXG4gICAgICAgICAqIEByZXR1cm4gQSB1bmlxdWUgaWRlbnRpZmllci5cbiAgICAgICAgICovXG4gICAgICAgIHRyYWNrU2VsZWN0aW9uKHNlbGVjdGlvbjogU2VsZWN0aW9uLCB0cmFja1ByZXZpb3VzT25FbXB0eT86IGJvb2xlYW4pOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBoZWxwZXIgZm9yIGNvbXB1dGluZyBjdXJzb3Igc3RhdGUgYWZ0ZXIgYSBjb21tYW5kLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUN1cnNvclN0YXRlQ29tcHV0ZXJEYXRhIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgaW52ZXJzZSBlZGl0IG9wZXJhdGlvbnMgb2YgdGhlIGFkZGVkIGVkaXQgb3BlcmF0aW9ucy5cbiAgICAgICAgICovXG4gICAgICAgIGdldEludmVyc2VFZGl0T3BlcmF0aW9ucygpOiBJVmFsaWRFZGl0T3BlcmF0aW9uW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgYSBwcmV2aW91c2x5IHRyYWNrZWQgc2VsZWN0aW9uLlxuICAgICAgICAgKiBAcGFyYW0gaWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIHJldHVybmVkIGJ5IGB0cmFja1NlbGVjdGlvbmAuXG4gICAgICAgICAqIEByZXR1cm4gVGhlIHNlbGVjdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGdldFRyYWNrZWRTZWxlY3Rpb24oaWQ6IHN0cmluZyk6IFNlbGVjdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGNvbW1hbmQgdGhhdCBtb2RpZmllcyB0ZXh0IC8gY3Vyc29yIHN0YXRlIG9uIGEgbW9kZWwuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJQ29tbWFuZCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdGhlIGVkaXQgb3BlcmF0aW9ucyBuZWVkZWQgdG8gZXhlY3V0ZSB0aGlzIGNvbW1hbmQuXG4gICAgICAgICAqIEBwYXJhbSBtb2RlbCBUaGUgbW9kZWwgdGhlIGNvbW1hbmQgd2lsbCBleGVjdXRlIG9uLlxuICAgICAgICAgKiBAcGFyYW0gYnVpbGRlciBBIGhlbHBlciB0byBjb2xsZWN0IHRoZSBuZWVkZWQgZWRpdCBvcGVyYXRpb25zIGFuZCB0byB0cmFjayBzZWxlY3Rpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0RWRpdE9wZXJhdGlvbnMobW9kZWw6IElUZXh0TW9kZWwsIGJ1aWxkZXI6IElFZGl0T3BlcmF0aW9uQnVpbGRlcik6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb21wdXRlIHRoZSBjdXJzb3Igc3RhdGUgYWZ0ZXIgdGhlIGVkaXQgb3BlcmF0aW9ucyB3ZXJlIGFwcGxpZWQuXG4gICAgICAgICAqIEBwYXJhbSBtb2RlbCBUaGUgbW9kZWwgdGhlIGNvbW1hbmQgaGFzIGV4ZWN1dGVkIG9uLlxuICAgICAgICAgKiBAcGFyYW0gaGVscGVyIEEgaGVscGVyIHRvIGdldCBpbnZlcnNlIGVkaXQgb3BlcmF0aW9ucyBhbmQgdG8gZ2V0IHByZXZpb3VzbHkgdHJhY2tlZCBzZWxlY3Rpb25zLlxuICAgICAgICAgKiBAcmV0dXJuIFRoZSBjdXJzb3Igc3RhdGUgYWZ0ZXIgdGhlIGNvbW1hbmQgZXhlY3V0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICBjb21wdXRlQ3Vyc29yU3RhdGUobW9kZWw6IElUZXh0TW9kZWwsIGhlbHBlcjogSUN1cnNvclN0YXRlQ29tcHV0ZXJEYXRhKTogU2VsZWN0aW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgbW9kZWwgZm9yIHRoZSBkaWZmIGVkaXRvci5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElEaWZmRWRpdG9yTW9kZWwge1xuICAgICAgICAvKipcbiAgICAgICAgICogT3JpZ2luYWwgbW9kZWwuXG4gICAgICAgICAqL1xuICAgICAgICBvcmlnaW5hbDogSVRleHRNb2RlbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1vZGlmaWVkIG1vZGVsLlxuICAgICAgICAgKi9cbiAgICAgICAgbW9kaWZpZWQ6IElUZXh0TW9kZWw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gZXZlbnQgZGVzY3JpYmluZyB0aGF0IGFuIGVkaXRvciBoYXMgaGFkIGl0cyBtb2RlbCByZXNldCAoaS5lLiBgZWRpdG9yLnNldE1vZGVsKClgKS5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElNb2RlbENoYW5nZWRFdmVudCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYHVyaWAgb2YgdGhlIHByZXZpb3VzIG1vZGVsIG9yIG51bGwuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBvbGRNb2RlbFVybDogVXJpIHwgbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBgdXJpYCBvZiB0aGUgbmV3IG1vZGVsIG9yIG51bGwuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBuZXdNb2RlbFVybDogVXJpIHwgbnVsbDtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElEaW1lbnNpb24ge1xuICAgICAgICB3aWR0aDogbnVtYmVyO1xuICAgICAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGNoYW5nZVxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUNoYW5nZSB7XG4gICAgICAgIHJlYWRvbmx5IG9yaWdpbmFsU3RhcnRMaW5lTnVtYmVyOiBudW1iZXI7XG4gICAgICAgIHJlYWRvbmx5IG9yaWdpbmFsRW5kTGluZU51bWJlcjogbnVtYmVyO1xuICAgICAgICByZWFkb25seSBtb2RpZmllZFN0YXJ0TGluZU51bWJlcjogbnVtYmVyO1xuICAgICAgICByZWFkb25seSBtb2RpZmllZEVuZExpbmVOdW1iZXI6IG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGNoYXJhY3RlciBsZXZlbCBjaGFuZ2UuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJQ2hhckNoYW5nZSBleHRlbmRzIElDaGFuZ2Uge1xuICAgICAgICByZWFkb25seSBvcmlnaW5hbFN0YXJ0Q29sdW1uOiBudW1iZXI7XG4gICAgICAgIHJlYWRvbmx5IG9yaWdpbmFsRW5kQ29sdW1uOiBudW1iZXI7XG4gICAgICAgIHJlYWRvbmx5IG1vZGlmaWVkU3RhcnRDb2x1bW46IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgbW9kaWZpZWRFbmRDb2x1bW46IG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGxpbmUgY2hhbmdlXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJTGluZUNoYW5nZSBleHRlbmRzIElDaGFuZ2Uge1xuICAgICAgICByZWFkb25seSBjaGFyQ2hhbmdlczogSUNoYXJDaGFuZ2VbXSB8IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElDb250ZW50U2l6ZUNoYW5nZWRFdmVudCB7XG4gICAgICAgIHJlYWRvbmx5IGNvbnRlbnRXaWR0aDogbnVtYmVyO1xuICAgICAgICByZWFkb25seSBjb250ZW50SGVpZ2h0OiBudW1iZXI7XG4gICAgICAgIHJlYWRvbmx5IGNvbnRlbnRXaWR0aENoYW5nZWQ6IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IGNvbnRlbnRIZWlnaHRDaGFuZ2VkOiBib29sZWFuO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU5ld1Njcm9sbFBvc2l0aW9uIHtcbiAgICAgICAgc2Nyb2xsTGVmdD86IG51bWJlcjtcbiAgICAgICAgc2Nyb2xsVG9wPzogbnVtYmVyO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUVkaXRvckFjdGlvbiB7XG4gICAgICAgIHJlYWRvbmx5IGlkOiBzdHJpbmc7XG4gICAgICAgIHJlYWRvbmx5IGxhYmVsOiBzdHJpbmc7XG4gICAgICAgIHJlYWRvbmx5IGFsaWFzOiBzdHJpbmc7XG4gICAgICAgIGlzU3VwcG9ydGVkKCk6IGJvb2xlYW47XG4gICAgICAgIHJ1bigpOiBQcm9taXNlPHZvaWQ+O1xuICAgIH1cblxuICAgIGV4cG9ydCB0eXBlIElFZGl0b3JNb2RlbCA9IElUZXh0TW9kZWwgfCBJRGlmZkVkaXRvck1vZGVsO1xuXG4gICAgLyoqXG4gICAgICogQSAoc2VyaWFsaXphYmxlKSBzdGF0ZSBvZiB0aGUgY3Vyc29ycy5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElDdXJzb3JTdGF0ZSB7XG4gICAgICAgIGluU2VsZWN0aW9uTW9kZTogYm9vbGVhbjtcbiAgICAgICAgc2VsZWN0aW9uU3RhcnQ6IElQb3NpdGlvbjtcbiAgICAgICAgcG9zaXRpb246IElQb3NpdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIChzZXJpYWxpemFibGUpIHN0YXRlIG9mIHRoZSB2aWV3LlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVZpZXdTdGF0ZSB7XG4gICAgICAgIC8qKiB3cml0dGVuIGJ5IHByZXZpb3VzIHZlcnNpb25zICovXG4gICAgICAgIHNjcm9sbFRvcD86IG51bWJlcjtcbiAgICAgICAgLyoqIHdyaXR0ZW4gYnkgcHJldmlvdXMgdmVyc2lvbnMgKi9cbiAgICAgICAgc2Nyb2xsVG9wV2l0aG91dFZpZXdab25lcz86IG51bWJlcjtcbiAgICAgICAgc2Nyb2xsTGVmdDogbnVtYmVyO1xuICAgICAgICBmaXJzdFBvc2l0aW9uOiBJUG9zaXRpb247XG4gICAgICAgIGZpcnN0UG9zaXRpb25EZWx0YVRvcDogbnVtYmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgKHNlcmlhbGl6YWJsZSkgc3RhdGUgb2YgdGhlIGNvZGUgZWRpdG9yLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUNvZGVFZGl0b3JWaWV3U3RhdGUge1xuICAgICAgICBjdXJzb3JTdGF0ZTogSUN1cnNvclN0YXRlW107XG4gICAgICAgIHZpZXdTdGF0ZTogSVZpZXdTdGF0ZTtcbiAgICAgICAgY29udHJpYnV0aW9uc1N0YXRlOiB7XG4gICAgICAgICAgICBbaWQ6IHN0cmluZ106IGFueTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAoU2VyaWFsaXphYmxlKSBWaWV3IHN0YXRlIGZvciB0aGUgZGlmZiBlZGl0b3IuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJRGlmZkVkaXRvclZpZXdTdGF0ZSB7XG4gICAgICAgIG9yaWdpbmFsOiBJQ29kZUVkaXRvclZpZXdTdGF0ZSB8IG51bGw7XG4gICAgICAgIG1vZGlmaWVkOiBJQ29kZUVkaXRvclZpZXdTdGF0ZSB8IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gZWRpdG9yIHZpZXcgc3RhdGUuXG4gICAgICovXG4gICAgZXhwb3J0IHR5cGUgSUVkaXRvclZpZXdTdGF0ZSA9IElDb2RlRWRpdG9yVmlld1N0YXRlIHwgSURpZmZFZGl0b3JWaWV3U3RhdGU7XG5cbiAgICBleHBvcnQgZW51bSBTY3JvbGxUeXBlIHtcbiAgICAgICAgU21vb3RoID0gMCxcbiAgICAgICAgSW1tZWRpYXRlID0gMVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuIGVkaXRvci5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElFZGl0b3Ige1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gZXZlbnQgZW1pdHRlZCB3aGVuIHRoZSBlZGl0b3IgaGFzIGJlZW4gZGlzcG9zZWQuXG4gICAgICAgICAqIEBldmVudFxuICAgICAgICAgKi9cbiAgICAgICAgb25EaWREaXNwb3NlKGxpc3RlbmVyOiAoKSA9PiB2b2lkKTogSURpc3Bvc2FibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEaXNwb3NlIHRoZSBlZGl0b3IuXG4gICAgICAgICAqL1xuICAgICAgICBkaXNwb3NlKCk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgYSB1bmlxdWUgaWQgZm9yIHRoaXMgZWRpdG9yIGluc3RhbmNlLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0SWQoKTogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSBlZGl0b3IgdHlwZS4gUGxlYXNlIHNlZSBgRWRpdG9yVHlwZWAuXG4gICAgICAgICAqIFRoaXMgaXMgdG8gYXZvaWQgYW4gaW5zdGFuY2VvZiBjaGVja1xuICAgICAgICAgKi9cbiAgICAgICAgZ2V0RWRpdG9yVHlwZSgpOiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGRhdGUgdGhlIGVkaXRvcidzIG9wdGlvbnMgYWZ0ZXIgdGhlIGVkaXRvciBoYXMgYmVlbiBjcmVhdGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdXBkYXRlT3B0aW9ucyhuZXdPcHRpb25zOiBJRWRpdG9yT3B0aW9ucyk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnN0cnVjdHMgdGhlIGVkaXRvciB0byByZW1lYXN1cmUgaXRzIGNvbnRhaW5lci4gVGhpcyBtZXRob2Qgc2hvdWxkXG4gICAgICAgICAqIGJlIGNhbGxlZCB3aGVuIHRoZSBjb250YWluZXIgb2YgdGhlIGVkaXRvciBnZXRzIHJlc2l6ZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIElmIGEgZGltZW5zaW9uIGlzIHBhc3NlZCBpbiwgdGhlIHBhc3NlZCBpbiB2YWx1ZSB3aWxsIGJlIHVzZWQuXG4gICAgICAgICAqL1xuICAgICAgICBsYXlvdXQoZGltZW5zaW9uPzogSURpbWVuc2lvbik6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCcmluZ3MgYnJvd3NlciBmb2N1cyB0byB0aGUgZWRpdG9yIHRleHRcbiAgICAgICAgICovXG4gICAgICAgIGZvY3VzKCk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHRleHQgaW5zaWRlIHRoaXMgZWRpdG9yIGlzIGZvY3VzZWQgKGkuZS4gY3Vyc29yIGlzIGJsaW5raW5nKS5cbiAgICAgICAgICovXG4gICAgICAgIGhhc1RleHRGb2N1cygpOiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyBhbGwgYWN0aW9ucyBhc3NvY2lhdGVkIHdpdGggdGhpcyBlZGl0b3IuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRTdXBwb3J0ZWRBY3Rpb25zKCk6IElFZGl0b3JBY3Rpb25bXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNhdmVzIGN1cnJlbnQgdmlldyBzdGF0ZSBvZiB0aGUgZWRpdG9yIGluIGEgc2VyaWFsaXphYmxlIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIHNhdmVWaWV3U3RhdGUoKTogSUVkaXRvclZpZXdTdGF0ZSB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXN0b3JlcyB0aGUgdmlldyBzdGF0ZSBvZiB0aGUgZWRpdG9yIGZyb20gYSBzZXJpYWxpemFibGUgb2JqZWN0IGdlbmVyYXRlZCBieSBgc2F2ZVZpZXdTdGF0ZWAuXG4gICAgICAgICAqL1xuICAgICAgICByZXN0b3JlVmlld1N0YXRlKHN0YXRlOiBJRWRpdG9yVmlld1N0YXRlKTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdpdmVuIGEgcG9zaXRpb24sIHJldHVybnMgYSBjb2x1bW4gbnVtYmVyIHRoYXQgdGFrZXMgdGFiLXdpZHRocyBpbnRvIGFjY291bnQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRWaXNpYmxlQ29sdW1uRnJvbVBvc2l0aW9uKHBvc2l0aW9uOiBJUG9zaXRpb24pOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBwcmltYXJ5IHBvc2l0aW9uIG9mIHRoZSBjdXJzb3IuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRQb3NpdGlvbigpOiBQb3NpdGlvbiB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgdGhlIHByaW1hcnkgcG9zaXRpb24gb2YgdGhlIGN1cnNvci4gVGhpcyB3aWxsIHJlbW92ZSBhbnkgc2Vjb25kYXJ5IGN1cnNvcnMuXG4gICAgICAgICAqIEBwYXJhbSBwb3NpdGlvbiBOZXcgcHJpbWFyeSBjdXJzb3IncyBwb3NpdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgc2V0UG9zaXRpb24ocG9zaXRpb246IElQb3NpdGlvbik6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTY3JvbGwgdmVydGljYWxseSBhcyBuZWNlc3NhcnkgYW5kIHJldmVhbCBhIGxpbmUuXG4gICAgICAgICAqL1xuICAgICAgICByZXZlYWxMaW5lKGxpbmVOdW1iZXI6IG51bWJlciwgc2Nyb2xsVHlwZT86IFNjcm9sbFR5cGUpOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2Nyb2xsIHZlcnRpY2FsbHkgYXMgbmVjZXNzYXJ5IGFuZCByZXZlYWwgYSBsaW5lIGNlbnRlcmVkIHZlcnRpY2FsbHkuXG4gICAgICAgICAqL1xuICAgICAgICByZXZlYWxMaW5lSW5DZW50ZXIobGluZU51bWJlcjogbnVtYmVyLCBzY3JvbGxUeXBlPzogU2Nyb2xsVHlwZSk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTY3JvbGwgdmVydGljYWxseSBhcyBuZWNlc3NhcnkgYW5kIHJldmVhbCBhIGxpbmUgY2VudGVyZWQgdmVydGljYWxseSBvbmx5IGlmIGl0IGxpZXMgb3V0c2lkZSB0aGUgdmlld3BvcnQuXG4gICAgICAgICAqL1xuICAgICAgICByZXZlYWxMaW5lSW5DZW50ZXJJZk91dHNpZGVWaWV3cG9ydChsaW5lTnVtYmVyOiBudW1iZXIsIHNjcm9sbFR5cGU/OiBTY3JvbGxUeXBlKTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNjcm9sbCB2ZXJ0aWNhbGx5IGFzIG5lY2Vzc2FyeSBhbmQgcmV2ZWFsIGEgbGluZSBjbG9zZSB0byB0aGUgdG9wIG9mIHRoZSB2aWV3cG9ydCxcbiAgICAgICAgICogb3B0aW1pemVkIGZvciB2aWV3aW5nIGEgY29kZSBkZWZpbml0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgcmV2ZWFsTGluZU5lYXJUb3AobGluZU51bWJlcjogbnVtYmVyLCBzY3JvbGxUeXBlPzogU2Nyb2xsVHlwZSk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTY3JvbGwgdmVydGljYWxseSBvciBob3Jpem9udGFsbHkgYXMgbmVjZXNzYXJ5IGFuZCByZXZlYWwgYSBwb3NpdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHJldmVhbFBvc2l0aW9uKHBvc2l0aW9uOiBJUG9zaXRpb24sIHNjcm9sbFR5cGU/OiBTY3JvbGxUeXBlKTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNjcm9sbCB2ZXJ0aWNhbGx5IG9yIGhvcml6b250YWxseSBhcyBuZWNlc3NhcnkgYW5kIHJldmVhbCBhIHBvc2l0aW9uIGNlbnRlcmVkIHZlcnRpY2FsbHkuXG4gICAgICAgICAqL1xuICAgICAgICByZXZlYWxQb3NpdGlvbkluQ2VudGVyKHBvc2l0aW9uOiBJUG9zaXRpb24sIHNjcm9sbFR5cGU/OiBTY3JvbGxUeXBlKTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNjcm9sbCB2ZXJ0aWNhbGx5IG9yIGhvcml6b250YWxseSBhcyBuZWNlc3NhcnkgYW5kIHJldmVhbCBhIHBvc2l0aW9uIGNlbnRlcmVkIHZlcnRpY2FsbHkgb25seSBpZiBpdCBsaWVzIG91dHNpZGUgdGhlIHZpZXdwb3J0LlxuICAgICAgICAgKi9cbiAgICAgICAgcmV2ZWFsUG9zaXRpb25JbkNlbnRlcklmT3V0c2lkZVZpZXdwb3J0KHBvc2l0aW9uOiBJUG9zaXRpb24sIHNjcm9sbFR5cGU/OiBTY3JvbGxUeXBlKTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNjcm9sbCB2ZXJ0aWNhbGx5IG9yIGhvcml6b250YWxseSBhcyBuZWNlc3NhcnkgYW5kIHJldmVhbCBhIHBvc2l0aW9uIGNsb3NlIHRvIHRoZSB0b3Agb2YgdGhlIHZpZXdwb3J0LFxuICAgICAgICAgKiBvcHRpbWl6ZWQgZm9yIHZpZXdpbmcgYSBjb2RlIGRlZmluaXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICByZXZlYWxQb3NpdGlvbk5lYXJUb3AocG9zaXRpb246IElQb3NpdGlvbiwgc2Nyb2xsVHlwZT86IFNjcm9sbFR5cGUpOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgcHJpbWFyeSBzZWxlY3Rpb24gb2YgdGhlIGVkaXRvci5cbiAgICAgICAgICovXG4gICAgICAgIGdldFNlbGVjdGlvbigpOiBTZWxlY3Rpb24gfCBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyBhbGwgdGhlIHNlbGVjdGlvbnMgb2YgdGhlIGVkaXRvci5cbiAgICAgICAgICovXG4gICAgICAgIGdldFNlbGVjdGlvbnMoKTogU2VsZWN0aW9uW10gfCBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IHRoZSBwcmltYXJ5IHNlbGVjdGlvbiBvZiB0aGUgZWRpdG9yLiBUaGlzIHdpbGwgcmVtb3ZlIGFueSBzZWNvbmRhcnkgY3Vyc29ycy5cbiAgICAgICAgICogQHBhcmFtIHNlbGVjdGlvbiBUaGUgbmV3IHNlbGVjdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgc2V0U2VsZWN0aW9uKHNlbGVjdGlvbjogSVJhbmdlKTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCB0aGUgcHJpbWFyeSBzZWxlY3Rpb24gb2YgdGhlIGVkaXRvci4gVGhpcyB3aWxsIHJlbW92ZSBhbnkgc2Vjb25kYXJ5IGN1cnNvcnMuXG4gICAgICAgICAqIEBwYXJhbSBzZWxlY3Rpb24gVGhlIG5ldyBzZWxlY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgIHNldFNlbGVjdGlvbihzZWxlY3Rpb246IFJhbmdlKTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCB0aGUgcHJpbWFyeSBzZWxlY3Rpb24gb2YgdGhlIGVkaXRvci4gVGhpcyB3aWxsIHJlbW92ZSBhbnkgc2Vjb25kYXJ5IGN1cnNvcnMuXG4gICAgICAgICAqIEBwYXJhbSBzZWxlY3Rpb24gVGhlIG5ldyBzZWxlY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgIHNldFNlbGVjdGlvbihzZWxlY3Rpb246IElTZWxlY3Rpb24pOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IHRoZSBwcmltYXJ5IHNlbGVjdGlvbiBvZiB0aGUgZWRpdG9yLiBUaGlzIHdpbGwgcmVtb3ZlIGFueSBzZWNvbmRhcnkgY3Vyc29ycy5cbiAgICAgICAgICogQHBhcmFtIHNlbGVjdGlvbiBUaGUgbmV3IHNlbGVjdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgc2V0U2VsZWN0aW9uKHNlbGVjdGlvbjogU2VsZWN0aW9uKTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCB0aGUgc2VsZWN0aW9ucyBmb3IgYWxsIHRoZSBjdXJzb3JzIG9mIHRoZSBlZGl0b3IuXG4gICAgICAgICAqIEN1cnNvcnMgd2lsbCBiZSByZW1vdmVkIG9yIGFkZGVkLCBhcyBuZWNlc3NhcnkuXG4gICAgICAgICAqL1xuICAgICAgICBzZXRTZWxlY3Rpb25zKHNlbGVjdGlvbnM6IHJlYWRvbmx5IElTZWxlY3Rpb25bXSk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTY3JvbGwgdmVydGljYWxseSBhcyBuZWNlc3NhcnkgYW5kIHJldmVhbCBsaW5lcy5cbiAgICAgICAgICovXG4gICAgICAgIHJldmVhbExpbmVzKHN0YXJ0TGluZU51bWJlcjogbnVtYmVyLCBlbmRMaW5lTnVtYmVyOiBudW1iZXIsIHNjcm9sbFR5cGU/OiBTY3JvbGxUeXBlKTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNjcm9sbCB2ZXJ0aWNhbGx5IGFzIG5lY2Vzc2FyeSBhbmQgcmV2ZWFsIGxpbmVzIGNlbnRlcmVkIHZlcnRpY2FsbHkuXG4gICAgICAgICAqL1xuICAgICAgICByZXZlYWxMaW5lc0luQ2VudGVyKGxpbmVOdW1iZXI6IG51bWJlciwgZW5kTGluZU51bWJlcjogbnVtYmVyLCBzY3JvbGxUeXBlPzogU2Nyb2xsVHlwZSk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTY3JvbGwgdmVydGljYWxseSBhcyBuZWNlc3NhcnkgYW5kIHJldmVhbCBsaW5lcyBjZW50ZXJlZCB2ZXJ0aWNhbGx5IG9ubHkgaWYgaXQgbGllcyBvdXRzaWRlIHRoZSB2aWV3cG9ydC5cbiAgICAgICAgICovXG4gICAgICAgIHJldmVhbExpbmVzSW5DZW50ZXJJZk91dHNpZGVWaWV3cG9ydChsaW5lTnVtYmVyOiBudW1iZXIsIGVuZExpbmVOdW1iZXI6IG51bWJlciwgc2Nyb2xsVHlwZT86IFNjcm9sbFR5cGUpOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2Nyb2xsIHZlcnRpY2FsbHkgYXMgbmVjZXNzYXJ5IGFuZCByZXZlYWwgbGluZXMgY2xvc2UgdG8gdGhlIHRvcCBvZiB0aGUgdmlld3BvcnQsXG4gICAgICAgICAqIG9wdGltaXplZCBmb3Igdmlld2luZyBhIGNvZGUgZGVmaW5pdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHJldmVhbExpbmVzTmVhclRvcChsaW5lTnVtYmVyOiBudW1iZXIsIGVuZExpbmVOdW1iZXI6IG51bWJlciwgc2Nyb2xsVHlwZT86IFNjcm9sbFR5cGUpOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2Nyb2xsIHZlcnRpY2FsbHkgb3IgaG9yaXpvbnRhbGx5IGFzIG5lY2Vzc2FyeSBhbmQgcmV2ZWFsIGEgcmFuZ2UuXG4gICAgICAgICAqL1xuICAgICAgICByZXZlYWxSYW5nZShyYW5nZTogSVJhbmdlLCBzY3JvbGxUeXBlPzogU2Nyb2xsVHlwZSk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTY3JvbGwgdmVydGljYWxseSBvciBob3Jpem9udGFsbHkgYXMgbmVjZXNzYXJ5IGFuZCByZXZlYWwgYSByYW5nZSBjZW50ZXJlZCB2ZXJ0aWNhbGx5LlxuICAgICAgICAgKi9cbiAgICAgICAgcmV2ZWFsUmFuZ2VJbkNlbnRlcihyYW5nZTogSVJhbmdlLCBzY3JvbGxUeXBlPzogU2Nyb2xsVHlwZSk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTY3JvbGwgdmVydGljYWxseSBvciBob3Jpem9udGFsbHkgYXMgbmVjZXNzYXJ5IGFuZCByZXZlYWwgYSByYW5nZSBhdCB0aGUgdG9wIG9mIHRoZSB2aWV3cG9ydC5cbiAgICAgICAgICovXG4gICAgICAgIHJldmVhbFJhbmdlQXRUb3AocmFuZ2U6IElSYW5nZSwgc2Nyb2xsVHlwZT86IFNjcm9sbFR5cGUpOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2Nyb2xsIHZlcnRpY2FsbHkgb3IgaG9yaXpvbnRhbGx5IGFzIG5lY2Vzc2FyeSBhbmQgcmV2ZWFsIGEgcmFuZ2UgY2VudGVyZWQgdmVydGljYWxseSBvbmx5IGlmIGl0IGxpZXMgb3V0c2lkZSB0aGUgdmlld3BvcnQuXG4gICAgICAgICAqL1xuICAgICAgICByZXZlYWxSYW5nZUluQ2VudGVySWZPdXRzaWRlVmlld3BvcnQocmFuZ2U6IElSYW5nZSwgc2Nyb2xsVHlwZT86IFNjcm9sbFR5cGUpOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2Nyb2xsIHZlcnRpY2FsbHkgb3IgaG9yaXpvbnRhbGx5IGFzIG5lY2Vzc2FyeSBhbmQgcmV2ZWFsIGEgcmFuZ2UgY2xvc2UgdG8gdGhlIHRvcCBvZiB0aGUgdmlld3BvcnQsXG4gICAgICAgICAqIG9wdGltaXplZCBmb3Igdmlld2luZyBhIGNvZGUgZGVmaW5pdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHJldmVhbFJhbmdlTmVhclRvcChyYW5nZTogSVJhbmdlLCBzY3JvbGxUeXBlPzogU2Nyb2xsVHlwZSk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTY3JvbGwgdmVydGljYWxseSBvciBob3Jpem9udGFsbHkgYXMgbmVjZXNzYXJ5IGFuZCByZXZlYWwgYSByYW5nZSBjbG9zZSB0byB0aGUgdG9wIG9mIHRoZSB2aWV3cG9ydCxcbiAgICAgICAgICogb3B0aW1pemVkIGZvciB2aWV3aW5nIGEgY29kZSBkZWZpbml0aW9uLiBPbmx5IGlmIGl0IGxpZXMgb3V0c2lkZSB0aGUgdmlld3BvcnQuXG4gICAgICAgICAqL1xuICAgICAgICByZXZlYWxSYW5nZU5lYXJUb3BJZk91dHNpZGVWaWV3cG9ydChyYW5nZTogSVJhbmdlLCBzY3JvbGxUeXBlPzogU2Nyb2xsVHlwZSk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEaXJlY3RseSB0cmlnZ2VyIGEgaGFuZGxlciBvciBhbiBlZGl0b3IgYWN0aW9uLlxuICAgICAgICAgKiBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2YgdGhlIGNhbGwuXG4gICAgICAgICAqIEBwYXJhbSBoYW5kbGVySWQgVGhlIGlkIG9mIHRoZSBoYW5kbGVyIG9yIHRoZSBpZCBvZiBhIGNvbnRyaWJ1dGlvbi5cbiAgICAgICAgICogQHBhcmFtIHBheWxvYWQgRXh0cmEgZGF0YSB0byBiZSBzZW50IHRvIHRoZSBoYW5kbGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgdHJpZ2dlcihzb3VyY2U6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQsIGhhbmRsZXJJZDogc3RyaW5nLCBwYXlsb2FkOiBhbnkpOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgY3VycmVudCBtb2RlbCBhdHRhY2hlZCB0byB0aGlzIGVkaXRvci5cbiAgICAgICAgICovXG4gICAgICAgIGdldE1vZGVsKCk6IElFZGl0b3JNb2RlbCB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXRzIHRoZSBjdXJyZW50IG1vZGVsIGF0dGFjaGVkIHRvIHRoaXMgZWRpdG9yLlxuICAgICAgICAgKiBJZiB0aGUgcHJldmlvdXMgbW9kZWwgd2FzIGNyZWF0ZWQgYnkgdGhlIGVkaXRvciB2aWEgdGhlIHZhbHVlIGtleSBpbiB0aGUgb3B0aW9uc1xuICAgICAgICAgKiBsaXRlcmFsIG9iamVjdCwgaXQgd2lsbCBiZSBkZXN0cm95ZWQuIE90aGVyd2lzZSwgaWYgdGhlIHByZXZpb3VzIG1vZGVsIHdhcyBzZXRcbiAgICAgICAgICogdmlhIHNldE1vZGVsLCBvciB0aGUgbW9kZWwga2V5IGluIHRoZSBvcHRpb25zIGxpdGVyYWwgb2JqZWN0LCB0aGUgcHJldmlvdXMgbW9kZWxcbiAgICAgICAgICogd2lsbCBub3QgYmUgZGVzdHJveWVkLlxuICAgICAgICAgKiBJdCBpcyBzYWZlIHRvIGNhbGwgc2V0TW9kZWwobnVsbCkgdG8gc2ltcGx5IGRldGFjaCB0aGUgY3VycmVudCBtb2RlbCBmcm9tIHRoZSBlZGl0b3IuXG4gICAgICAgICAqL1xuICAgICAgICBzZXRNb2RlbChtb2RlbDogSUVkaXRvck1vZGVsIHwgbnVsbCk6IHZvaWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gZWRpdG9yIGNvbnRyaWJ1dGlvbiB0aGF0IGdldHMgY3JlYXRlZCBldmVyeSB0aW1lIGEgbmV3IGVkaXRvciBnZXRzIGNyZWF0ZWQgYW5kIGdldHMgZGlzcG9zZWQgd2hlbiB0aGUgZWRpdG9yIGdldHMgZGlzcG9zZWQuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJRWRpdG9yQ29udHJpYnV0aW9uIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERpc3Bvc2UgdGhpcyBjb250cmlidXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICBkaXNwb3NlKCk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdG9yZSB2aWV3IHN0YXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgc2F2ZVZpZXdTdGF0ZT8oKTogYW55O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVzdG9yZSB2aWV3IHN0YXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVzdG9yZVZpZXdTdGF0ZT8oc3RhdGU6IGFueSk6IHZvaWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIGBJRWRpdG9yYC5cbiAgICAgKi9cbiAgICBleHBvcnQgY29uc3QgRWRpdG9yVHlwZToge1xuICAgICAgICBJQ29kZUVkaXRvcjogc3RyaW5nO1xuICAgICAgICBJRGlmZkVkaXRvcjogc3RyaW5nO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBbiBldmVudCBkZXNjcmliaW5nIHRoYXQgdGhlIGN1cnJlbnQgbGFuZ3VhZ2UgYXNzb2NpYXRlZCB3aXRoIGEgbW9kZWwgaGFzIGNoYW5nZWQuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJTW9kZWxMYW5ndWFnZUNoYW5nZWRFdmVudCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcmV2aW91cyBsYW5ndWFnZVxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgb2xkTGFuZ3VhZ2U6IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE5ldyBsYW5ndWFnZVxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgbmV3TGFuZ3VhZ2U6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBldmVudCBkZXNjcmliaW5nIHRoYXQgdGhlIGxhbmd1YWdlIGNvbmZpZ3VyYXRpb24gYXNzb2NpYXRlZCB3aXRoIGEgbW9kZWwgaGFzIGNoYW5nZWQuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJTW9kZWxMYW5ndWFnZUNvbmZpZ3VyYXRpb25DaGFuZ2VkRXZlbnQge1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU1vZGVsQ29udGVudENoYW5nZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcmFuZ2UgdGhhdCBnb3QgcmVwbGFjZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSByYW5nZTogSVJhbmdlO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG9mZnNldCBvZiB0aGUgcmFuZ2UgdGhhdCBnb3QgcmVwbGFjZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSByYW5nZU9mZnNldDogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGxlbmd0aCBvZiB0aGUgcmFuZ2UgdGhhdCBnb3QgcmVwbGFjZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSByYW5nZUxlbmd0aDogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG5ldyB0ZXh0IGZvciB0aGUgcmFuZ2UuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSB0ZXh0OiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gZXZlbnQgZGVzY3JpYmluZyBhIGNoYW5nZSBpbiB0aGUgdGV4dCBvZiBhIG1vZGVsLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU1vZGVsQ29udGVudENoYW5nZWRFdmVudCB7XG4gICAgICAgIHJlYWRvbmx5IGNoYW5nZXM6IElNb2RlbENvbnRlbnRDaGFuZ2VbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSAobmV3KSBlbmQtb2YtbGluZSBjaGFyYWN0ZXIuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBlb2w6IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBuZXcgdmVyc2lvbiBpZCB0aGUgbW9kZWwgaGFzIHRyYW5zaXRpb25lZCB0by5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHZlcnNpb25JZDogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmxhZyB0aGF0IGluZGljYXRlcyB0aGF0IHRoaXMgZXZlbnQgd2FzIGdlbmVyYXRlZCB3aGlsZSB1bmRvaW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgaXNVbmRvaW5nOiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmxhZyB0aGF0IGluZGljYXRlcyB0aGF0IHRoaXMgZXZlbnQgd2FzIGdlbmVyYXRlZCB3aGlsZSByZWRvaW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgaXNSZWRvaW5nOiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmxhZyB0aGF0IGluZGljYXRlcyB0aGF0IGFsbCBkZWNvcmF0aW9ucyB3ZXJlIGxvc3Qgd2l0aCB0aGlzIGVkaXQuXG4gICAgICAgICAqIFRoZSBtb2RlbCBoYXMgYmVlbiByZXNldCB0byBhIG5ldyB2YWx1ZS5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGlzRmx1c2g6IGJvb2xlYW47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gZXZlbnQgZGVzY3JpYmluZyB0aGF0IG1vZGVsIGRlY29yYXRpb25zIGhhdmUgY2hhbmdlZC5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElNb2RlbERlY29yYXRpb25zQ2hhbmdlZEV2ZW50IHtcbiAgICAgICAgcmVhZG9ubHkgYWZmZWN0c01pbmltYXA6IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IGFmZmVjdHNPdmVydmlld1J1bGVyOiBib29sZWFuO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU1vZGVsT3B0aW9uc0NoYW5nZWRFdmVudCB7XG4gICAgICAgIHJlYWRvbmx5IHRhYlNpemU6IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IGluZGVudFNpemU6IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IGluc2VydFNwYWNlczogYm9vbGVhbjtcbiAgICAgICAgcmVhZG9ubHkgdHJpbUF1dG9XaGl0ZXNwYWNlOiBib29sZWFuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc2NyaWJlcyB0aGUgcmVhc29uIHRoZSBjdXJzb3IgaGFzIGNoYW5nZWQgaXRzIHBvc2l0aW9uLlxuICAgICAqL1xuICAgIGV4cG9ydCBlbnVtIEN1cnNvckNoYW5nZVJlYXNvbiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVbmtub3duIG9yIG5vdCBzZXQuXG4gICAgICAgICAqL1xuICAgICAgICBOb3RTZXQgPSAwLFxuICAgICAgICAvKipcbiAgICAgICAgICogQSBgbW9kZWwuc2V0VmFsdWUoKWAgd2FzIGNhbGxlZC5cbiAgICAgICAgICovXG4gICAgICAgIENvbnRlbnRGbHVzaCA9IDEsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYG1vZGVsYCBoYXMgYmVlbiBjaGFuZ2VkIG91dHNpZGUgb2YgdGhpcyBjdXJzb3IgYW5kIHRoZSBjdXJzb3IgcmVjb3ZlcnMgaXRzIHBvc2l0aW9uIGZyb20gYXNzb2NpYXRlZCBtYXJrZXJzLlxuICAgICAgICAgKi9cbiAgICAgICAgUmVjb3ZlckZyb21NYXJrZXJzID0gMixcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZXJlIHdhcyBhbiBleHBsaWNpdCB1c2VyIGdlc3R1cmUuXG4gICAgICAgICAqL1xuICAgICAgICBFeHBsaWNpdCA9IDMsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGVyZSB3YXMgYSBQYXN0ZS5cbiAgICAgICAgICovXG4gICAgICAgIFBhc3RlID0gNCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZXJlIHdhcyBhbiBVbmRvLlxuICAgICAgICAgKi9cbiAgICAgICAgVW5kbyA9IDUsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGVyZSB3YXMgYSBSZWRvLlxuICAgICAgICAgKi9cbiAgICAgICAgUmVkbyA9IDZcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBldmVudCBkZXNjcmliaW5nIHRoYXQgdGhlIGN1cnNvciBwb3NpdGlvbiBoYXMgY2hhbmdlZC5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElDdXJzb3JQb3NpdGlvbkNoYW5nZWRFdmVudCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcmltYXJ5IGN1cnNvcidzIHBvc2l0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgcG9zaXRpb246IFBvc2l0aW9uO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2Vjb25kYXJ5IGN1cnNvcnMnIHBvc2l0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgc2Vjb25kYXJ5UG9zaXRpb25zOiBQb3NpdGlvbltdO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVhc29uLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgcmVhc29uOiBDdXJzb3JDaGFuZ2VSZWFzb247XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTb3VyY2Ugb2YgdGhlIGNhbGwgdGhhdCBjYXVzZWQgdGhlIGV2ZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgc291cmNlOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gZXZlbnQgZGVzY3JpYmluZyB0aGF0IHRoZSBjdXJzb3Igc2VsZWN0aW9uIGhhcyBjaGFuZ2VkLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUN1cnNvclNlbGVjdGlvbkNoYW5nZWRFdmVudCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcHJpbWFyeSBzZWxlY3Rpb24uXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBzZWxlY3Rpb246IFNlbGVjdGlvbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzZWNvbmRhcnkgc2VsZWN0aW9ucy5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHNlY29uZGFyeVNlbGVjdGlvbnM6IFNlbGVjdGlvbltdO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG1vZGVsIHZlcnNpb24gaWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBtb2RlbFZlcnNpb25JZDogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG9sZCBzZWxlY3Rpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgb2xkU2VsZWN0aW9uczogU2VsZWN0aW9uW10gfCBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG1vZGVsIHZlcnNpb24gaWQgdGhlIHRoYXQgYG9sZFNlbGVjdGlvbnNgIHJlZmVyIHRvLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgb2xkTW9kZWxWZXJzaW9uSWQ6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNvdXJjZSBvZiB0aGUgY2FsbCB0aGF0IGNhdXNlZCB0aGUgZXZlbnQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBzb3VyY2U6IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlYXNvbi5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHJlYXNvbjogQ3Vyc29yQ2hhbmdlUmVhc29uO1xuICAgIH1cblxuICAgIGV4cG9ydCBlbnVtIEFjY2Vzc2liaWxpdHlTdXBwb3J0IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgc2hvdWxkIGJlIHRoZSBicm93c2VyIGNhc2Ugd2hlcmUgaXQgaXMgbm90IGtub3duIGlmIGEgc2NyZWVuIHJlYWRlciBpcyBhdHRhY2hlZCBvciBuby5cbiAgICAgICAgICovXG4gICAgICAgIFVua25vd24gPSAwLFxuICAgICAgICBEaXNhYmxlZCA9IDEsXG4gICAgICAgIEVuYWJsZWQgPSAyXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciBhdXRvIGNsb3NpbmcgcXVvdGVzIGFuZCBicmFja2V0c1xuICAgICAqL1xuICAgIGV4cG9ydCB0eXBlIEVkaXRvckF1dG9DbG9zaW5nU3RyYXRlZ3kgPSAnYWx3YXlzJyB8ICdsYW5ndWFnZURlZmluZWQnIHwgJ2JlZm9yZVdoaXRlc3BhY2UnIHwgJ25ldmVyJztcblxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgYXV0byB3cmFwcGluZyBxdW90ZXMgYW5kIGJyYWNrZXRzXG4gICAgICovXG4gICAgZXhwb3J0IHR5cGUgRWRpdG9yQXV0b1N1cnJvdW5kU3RyYXRlZ3kgPSAnbGFuZ3VhZ2VEZWZpbmVkJyB8ICdxdW90ZXMnIHwgJ2JyYWNrZXRzJyB8ICduZXZlcic7XG5cbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHR5cGluZyBvdmVyIGNsb3NpbmcgcXVvdGVzIG9yIGJyYWNrZXRzXG4gICAgICovXG4gICAgZXhwb3J0IHR5cGUgRWRpdG9yQXV0b0Nsb3NpbmdFZGl0U3RyYXRlZ3kgPSAnYWx3YXlzJyB8ICdhdXRvJyB8ICduZXZlcic7XG5cbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIGF1dG8gaW5kZW50YXRpb24gaW4gdGhlIGVkaXRvclxuICAgICAqL1xuICAgIGV4cG9ydCBlbnVtIEVkaXRvckF1dG9JbmRlbnRTdHJhdGVneSB7XG4gICAgICAgIE5vbmUgPSAwLFxuICAgICAgICBLZWVwID0gMSxcbiAgICAgICAgQnJhY2tldHMgPSAyLFxuICAgICAgICBBZHZhbmNlZCA9IDMsXG4gICAgICAgIEZ1bGwgPSA0XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgZWRpdG9yLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUVkaXRvck9wdGlvbnMge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBlZGl0b3IgaXMgdXNlZCBpbnNpZGUgYSBkaWZmIGVkaXRvci5cbiAgICAgICAgICovXG4gICAgICAgIGluRGlmZkVkaXRvcj86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYXJpYSBsYWJlbCBmb3IgdGhlIGVkaXRvcidzIHRleHRhcmVhICh3aGVuIGl0IGlzIGZvY3VzZWQpLlxuICAgICAgICAgKi9cbiAgICAgICAgYXJpYUxhYmVsPzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGB0YWJpbmRleGAgcHJvcGVydHkgb2YgdGhlIGVkaXRvcidzIHRleHRhcmVhXG4gICAgICAgICAqL1xuICAgICAgICB0YWJJbmRleD86IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbmRlciB2ZXJ0aWNhbCBsaW5lcyBhdCB0aGUgc3BlY2lmaWVkIGNvbHVtbnMuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIGVtcHR5IGFycmF5LlxuICAgICAgICAgKi9cbiAgICAgICAgcnVsZXJzPzogKG51bWJlciB8IElSdWxlck9wdGlvbilbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIHdvcmQgc2VwYXJhdG9ycyB1c2VkIHdoZW4gZG9pbmcgd29yZCBuYXZpZ2F0aW9uLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBgfiFAIyQlXiYqKCktPStbe119XFxcXHw7OlxcJ1wiLC48Pi8/XG4gICAgICAgICAqL1xuICAgICAgICB3b3JkU2VwYXJhdG9ycz86IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuYWJsZSBMaW51eCBwcmltYXJ5IGNsaXBib2FyZC5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIHNlbGVjdGlvbkNsaXBib2FyZD86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9sIHRoZSByZW5kZXJpbmcgb2YgbGluZSBudW1iZXJzLlxuICAgICAgICAgKiBJZiBpdCBpcyBhIGZ1bmN0aW9uLCBpdCB3aWxsIGJlIGludm9rZWQgd2hlbiByZW5kZXJpbmcgYSBsaW5lIG51bWJlciBhbmQgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGJlIHJlbmRlcmVkLlxuICAgICAgICAgKiBPdGhlcndpc2UsIGlmIGl0IGlzIGEgdHJ1dGh5LCBsaW5lIG51bWJlcnMgd2lsbCBiZSByZW5kZXJlZCBub3JtYWxseSAoZXF1aXZhbGVudCBvZiB1c2luZyBhbiBpZGVudGl0eSBmdW5jdGlvbikuXG4gICAgICAgICAqIE90aGVyd2lzZSwgbGluZSBudW1iZXJzIHdpbGwgbm90IGJlIHJlbmRlcmVkLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBgb25gLlxuICAgICAgICAgKi9cbiAgICAgICAgbGluZU51bWJlcnM/OiBMaW5lTnVtYmVyc1R5cGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9scyB0aGUgbWluaW1hbCBudW1iZXIgb2YgdmlzaWJsZSBsZWFkaW5nIGFuZCB0cmFpbGluZyBsaW5lcyBzdXJyb3VuZGluZyB0aGUgY3Vyc29yLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byAwLlxuICAgICAgICAqL1xuICAgICAgICBjdXJzb3JTdXJyb3VuZGluZ0xpbmVzPzogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29udHJvbHMgd2hlbiBgY3Vyc29yU3Vycm91bmRpbmdMaW5lc2Agc2hvdWxkIGJlIGVuZm9yY2VkXG4gICAgICAgICAqIERlZmF1bHRzIHRvIGBkZWZhdWx0YCwgYGN1cnNvclN1cnJvdW5kaW5nTGluZXNgIGlzIG5vdCBlbmZvcmNlZCB3aGVuIGN1cnNvciBwb3NpdGlvbiBpcyBjaGFuZ2VkXG4gICAgICAgICAqIGJ5IG1vdXNlLlxuICAgICAgICAqL1xuICAgICAgICBjdXJzb3JTdXJyb3VuZGluZ0xpbmVzU3R5bGU/OiAnZGVmYXVsdCcgfCAnYWxsJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbmRlciBsYXN0IGxpbmUgbnVtYmVyIHdoZW4gdGhlIGZpbGUgZW5kcyB3aXRoIGEgbmV3bGluZS5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgICAgKi9cbiAgICAgICAgcmVuZGVyRmluYWxOZXdsaW5lPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW92ZSB1bnVzdWFsIGxpbmUgdGVybWluYXRvcnMgbGlrZSBMSU5FIFNFUEFSQVRPUiAoTFMpLCBQQVJBR1JBUEggU0VQQVJBVE9SIChQUykuXG4gICAgICAgICAqIERlZmF1bHRzIHRvICdwcm9tcHQnLlxuICAgICAgICAgKi9cbiAgICAgICAgdW51c3VhbExpbmVUZXJtaW5hdG9ycz86ICdhdXRvJyB8ICdvZmYnIHwgJ3Byb21wdCc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaG91bGQgdGhlIGNvcnJlc3BvbmRpbmcgbGluZSBiZSBzZWxlY3RlZCB3aGVuIGNsaWNraW5nIG9uIHRoZSBsaW5lIG51bWJlcj9cbiAgICAgICAgICogRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIHNlbGVjdE9uTGluZU51bWJlcnM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29udHJvbCB0aGUgd2lkdGggb2YgbGluZSBudW1iZXJzLCBieSByZXNlcnZpbmcgaG9yaXpvbnRhbCBzcGFjZSBmb3IgcmVuZGVyaW5nIGF0IGxlYXN0IGFuIGFtb3VudCBvZiBkaWdpdHMuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIDUuXG4gICAgICAgICAqL1xuICAgICAgICBsaW5lTnVtYmVyc01pbkNoYXJzPzogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlIHRoZSByZW5kZXJpbmcgb2YgdGhlIGdseXBoIG1hcmdpbi5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gdHJ1ZSBpbiB2c2NvZGUgYW5kIHRvIGZhbHNlIGluIG1vbmFjby1lZGl0b3IuXG4gICAgICAgICAqL1xuICAgICAgICBnbHlwaE1hcmdpbj86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgd2lkdGggcmVzZXJ2ZWQgZm9yIGxpbmUgZGVjb3JhdGlvbnMgKGluIHB4KS5cbiAgICAgICAgICogTGluZSBkZWNvcmF0aW9ucyBhcmUgcGxhY2VkIGJldHdlZW4gbGluZSBudW1iZXJzIGFuZCB0aGUgZWRpdG9yIGNvbnRlbnQuXG4gICAgICAgICAqIFlvdSBjYW4gcGFzcyBpbiBhIHN0cmluZyBpbiB0aGUgZm9ybWF0IGZsb2F0aW5nIHBvaW50IGZvbGxvd2VkIGJ5IFwiY2hcIi4gZS5nLiAxLjNjaC5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gMTAuXG4gICAgICAgICAqL1xuICAgICAgICBsaW5lRGVjb3JhdGlvbnNXaWR0aD86IG51bWJlciB8IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gcmV2ZWFsaW5nIHRoZSBjdXJzb3IsIGEgdmlydHVhbCBwYWRkaW5nIChweCkgaXMgYWRkZWQgdG8gdGhlIGN1cnNvciwgdHVybmluZyBpdCBpbnRvIGEgcmVjdGFuZ2xlLlxuICAgICAgICAgKiBUaGlzIHZpcnR1YWwgcGFkZGluZyBlbnN1cmVzIHRoYXQgdGhlIGN1cnNvciBnZXRzIHJldmVhbGVkIGJlZm9yZSBoaXR0aW5nIHRoZSBlZGdlIG9mIHRoZSB2aWV3cG9ydC5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gMzAgKHB4KS5cbiAgICAgICAgICovXG4gICAgICAgIHJldmVhbEhvcml6b250YWxSaWdodFBhZGRpbmc/OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW5kZXIgdGhlIGVkaXRvciBzZWxlY3Rpb24gd2l0aCByb3VuZGVkIGJvcmRlcnMuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgICAqL1xuICAgICAgICByb3VuZGVkU2VsZWN0aW9uPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENsYXNzIG5hbWUgdG8gYmUgYWRkZWQgdG8gdGhlIGVkaXRvci5cbiAgICAgICAgICovXG4gICAgICAgIGV4dHJhRWRpdG9yQ2xhc3NOYW1lPzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2hvdWxkIHRoZSBlZGl0b3IgYmUgcmVhZCBvbmx5LiBTZWUgYWxzbyBgZG9tUmVhZE9ubHlgLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRPbmx5PzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3VsZCB0aGUgdGV4dGFyZWEgdXNlZCBmb3IgaW5wdXQgdXNlIHRoZSBET00gYHJlYWRvbmx5YCBhdHRyaWJ1dGUuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAgICAgKi9cbiAgICAgICAgZG9tUmVhZE9ubHk/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlIGxpbmtlZCBlZGl0aW5nLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIGxpbmtlZEVkaXRpbmc/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogZGVwcmVjYXRlZCwgdXNlIGxpbmtlZEVkaXRpbmcgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVuYW1lT25UeXBlPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3VsZCB0aGUgZWRpdG9yIHJlbmRlciB2YWxpZGF0aW9uIGRlY29yYXRpb25zLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBlZGl0YWJsZS5cbiAgICAgICAgICovXG4gICAgICAgIHJlbmRlclZhbGlkYXRpb25EZWNvcmF0aW9ucz86ICdlZGl0YWJsZScgfCAnb24nIHwgJ29mZic7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9sIHRoZSBiZWhhdmlvciBhbmQgcmVuZGVyaW5nIG9mIHRoZSBzY3JvbGxiYXJzLlxuICAgICAgICAgKi9cbiAgICAgICAgc2Nyb2xsYmFyPzogSUVkaXRvclNjcm9sbGJhck9wdGlvbnM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9sIHRoZSBiZWhhdmlvciBhbmQgcmVuZGVyaW5nIG9mIHRoZSBtaW5pbWFwLlxuICAgICAgICAgKi9cbiAgICAgICAgbWluaW1hcD86IElFZGl0b3JNaW5pbWFwT3B0aW9ucztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnRyb2wgdGhlIGJlaGF2aW9yIG9mIHRoZSBmaW5kIHdpZGdldC5cbiAgICAgICAgICovXG4gICAgICAgIGZpbmQ/OiBJRWRpdG9yRmluZE9wdGlvbnM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEaXNwbGF5IG92ZXJmbG93IHdpZGdldHMgYXMgYGZpeGVkYC5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAgICAgICAgICovXG4gICAgICAgIGZpeGVkT3ZlcmZsb3dXaWRnZXRzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBudW1iZXIgb2YgdmVydGljYWwgbGFuZXMgdGhlIG92ZXJ2aWV3IHJ1bGVyIHNob3VsZCByZW5kZXIuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIDMuXG4gICAgICAgICAqL1xuICAgICAgICBvdmVydmlld1J1bGVyTGFuZXM/OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9scyBpZiBhIGJvcmRlciBzaG91bGQgYmUgZHJhd24gYXJvdW5kIHRoZSBvdmVydmlldyBydWxlci5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gYHRydWVgLlxuICAgICAgICAgKi9cbiAgICAgICAgb3ZlcnZpZXdSdWxlckJvcmRlcj86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9sIHRoZSBjdXJzb3IgYW5pbWF0aW9uIHN0eWxlLCBwb3NzaWJsZSB2YWx1ZXMgYXJlICdibGluaycsICdzbW9vdGgnLCAncGhhc2UnLCAnZXhwYW5kJyBhbmQgJ3NvbGlkJy5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gJ2JsaW5rJy5cbiAgICAgICAgICovXG4gICAgICAgIGN1cnNvckJsaW5raW5nPzogJ2JsaW5rJyB8ICdzbW9vdGgnIHwgJ3BoYXNlJyB8ICdleHBhbmQnIHwgJ3NvbGlkJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFpvb20gdGhlIGZvbnQgaW4gdGhlIGVkaXRvciB3aGVuIHVzaW5nIHRoZSBtb3VzZSB3aGVlbCBpbiBjb21iaW5hdGlvbiB3aXRoIGhvbGRpbmcgQ3RybC5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAgICAgICAqL1xuICAgICAgICBtb3VzZVdoZWVsWm9vbT86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9sIHRoZSBtb3VzZSBwb2ludGVyIHN0eWxlLCBlaXRoZXIgJ3RleHQnIG9yICdkZWZhdWx0JyBvciAnY29weSdcbiAgICAgICAgICogRGVmYXVsdHMgdG8gJ3RleHQnXG4gICAgICAgICAqL1xuICAgICAgICBtb3VzZVN0eWxlPzogJ3RleHQnIHwgJ2RlZmF1bHQnIHwgJ2NvcHknO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlIHNtb290aCBjYXJldCBhbmltYXRpb24uXG4gICAgICAgICAqIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAgICAgKi9cbiAgICAgICAgY3Vyc29yU21vb3RoQ2FyZXRBbmltYXRpb24/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29udHJvbCB0aGUgY3Vyc29yIHN0eWxlLCBlaXRoZXIgJ2Jsb2NrJyBvciAnbGluZScuXG4gICAgICAgICAqIERlZmF1bHRzIHRvICdsaW5lJy5cbiAgICAgICAgICovXG4gICAgICAgIGN1cnNvclN0eWxlPzogJ2xpbmUnIHwgJ2Jsb2NrJyB8ICd1bmRlcmxpbmUnIHwgJ2xpbmUtdGhpbicgfCAnYmxvY2stb3V0bGluZScgfCAndW5kZXJsaW5lLXRoaW4nO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29udHJvbCB0aGUgd2lkdGggb2YgdGhlIGN1cnNvciB3aGVuIGN1cnNvclN0eWxlIGlzIHNldCB0byAnbGluZSdcbiAgICAgICAgICovXG4gICAgICAgIGN1cnNvcldpZHRoPzogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlIGZvbnQgbGlnYXR1cmVzLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIGZvbnRMaWdhdHVyZXM/OiBib29sZWFuIHwgc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGlzYWJsZSB0aGUgdXNlIG9mIGB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpYCBmb3IgdGhlIGVkaXRvciBtYXJnaW4gYW5kIGxpbmVzIGxheWVycy5cbiAgICAgICAgICogVGhlIHVzYWdlIG9mIGB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpYCBhY3RzIGFzIGEgaGludCBmb3IgYnJvd3NlcnMgdG8gY3JlYXRlIGFuIGV4dHJhIGxheWVyLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIGRpc2FibGVMYXllckhpbnRpbmc/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGlzYWJsZSB0aGUgb3B0aW1pemF0aW9ucyBmb3IgbW9ub3NwYWNlIGZvbnRzLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIGRpc2FibGVNb25vc3BhY2VPcHRpbWl6YXRpb25zPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3VsZCB0aGUgY3Vyc29yIGJlIGhpZGRlbiBpbiB0aGUgb3ZlcnZpZXcgcnVsZXIuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAgICAgKi9cbiAgICAgICAgaGlkZUN1cnNvckluT3ZlcnZpZXdSdWxlcj86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmFibGUgdGhhdCBzY3JvbGxpbmcgY2FuIGdvIG9uZSBzY3JlZW4gc2l6ZSBhZnRlciB0aGUgbGFzdCBsaW5lLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAgICAgKi9cbiAgICAgICAgc2Nyb2xsQmV5b25kTGFzdExpbmU/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlIHRoYXQgc2Nyb2xsaW5nIGNhbiBnbyBiZXlvbmQgdGhlIGxhc3QgY29sdW1uIGJ5IGEgbnVtYmVyIG9mIGNvbHVtbnMuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIDUuXG4gICAgICAgICAqL1xuICAgICAgICBzY3JvbGxCZXlvbmRMYXN0Q29sdW1uPzogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlIHRoYXQgdGhlIGVkaXRvciBhbmltYXRlcyBzY3JvbGxpbmcgdG8gYSBwb3NpdGlvbi5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAgICAgICAqL1xuICAgICAgICBzbW9vdGhTY3JvbGxpbmc/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlIHRoYXQgdGhlIGVkaXRvciB3aWxsIGluc3RhbGwgYW4gaW50ZXJ2YWwgdG8gY2hlY2sgaWYgaXRzIGNvbnRhaW5lciBkb20gbm9kZSBzaXplIGhhcyBjaGFuZ2VkLlxuICAgICAgICAgKiBFbmFibGluZyB0aGlzIG1pZ2h0IGhhdmUgYSBzZXZlcmUgcGVyZm9ybWFuY2UgaW1wYWN0LlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIGF1dG9tYXRpY0xheW91dD86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9sIHRoZSB3cmFwcGluZyBvZiB0aGUgZWRpdG9yLlxuICAgICAgICAgKiBXaGVuIGB3b3JkV3JhcGAgPSBcIm9mZlwiLCB0aGUgbGluZXMgd2lsbCBuZXZlciB3cmFwLlxuICAgICAgICAgKiBXaGVuIGB3b3JkV3JhcGAgPSBcIm9uXCIsIHRoZSBsaW5lcyB3aWxsIHdyYXAgYXQgdGhlIHZpZXdwb3J0IHdpZHRoLlxuICAgICAgICAgKiBXaGVuIGB3b3JkV3JhcGAgPSBcIndvcmRXcmFwQ29sdW1uXCIsIHRoZSBsaW5lcyB3aWxsIHdyYXAgYXQgYHdvcmRXcmFwQ29sdW1uYC5cbiAgICAgICAgICogV2hlbiBgd29yZFdyYXBgID0gXCJib3VuZGVkXCIsIHRoZSBsaW5lcyB3aWxsIHdyYXAgYXQgbWluKHZpZXdwb3J0IHdpZHRoLCB3b3JkV3JhcENvbHVtbikuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIFwib2ZmXCIuXG4gICAgICAgICAqL1xuICAgICAgICB3b3JkV3JhcD86ICdvZmYnIHwgJ29uJyB8ICd3b3JkV3JhcENvbHVtbicgfCAnYm91bmRlZCc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPdmVycmlkZSB0aGUgYHdvcmRXcmFwYCBzZXR0aW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgd29yZFdyYXBPdmVycmlkZTE/OiAnb2ZmJyB8ICdvbicgfCAnaW5oZXJpdCc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPdmVycmlkZSB0aGUgYHdvcmRXcmFwT3ZlcnJpZGUxYCBzZXR0aW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgd29yZFdyYXBPdmVycmlkZTI/OiAnb2ZmJyB8ICdvbicgfCAnaW5oZXJpdCc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9sIHRoZSB3cmFwcGluZyBvZiB0aGUgZWRpdG9yLlxuICAgICAgICAgKiBXaGVuIGB3b3JkV3JhcGAgPSBcIm9mZlwiLCB0aGUgbGluZXMgd2lsbCBuZXZlciB3cmFwLlxuICAgICAgICAgKiBXaGVuIGB3b3JkV3JhcGAgPSBcIm9uXCIsIHRoZSBsaW5lcyB3aWxsIHdyYXAgYXQgdGhlIHZpZXdwb3J0IHdpZHRoLlxuICAgICAgICAgKiBXaGVuIGB3b3JkV3JhcGAgPSBcIndvcmRXcmFwQ29sdW1uXCIsIHRoZSBsaW5lcyB3aWxsIHdyYXAgYXQgYHdvcmRXcmFwQ29sdW1uYC5cbiAgICAgICAgICogV2hlbiBgd29yZFdyYXBgID0gXCJib3VuZGVkXCIsIHRoZSBsaW5lcyB3aWxsIHdyYXAgYXQgbWluKHZpZXdwb3J0IHdpZHRoLCB3b3JkV3JhcENvbHVtbikuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIDgwLlxuICAgICAgICAgKi9cbiAgICAgICAgd29yZFdyYXBDb2x1bW4/OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9sIGluZGVudGF0aW9uIG9mIHdyYXBwZWQgbGluZXMuIENhbiBiZTogJ25vbmUnLCAnc2FtZScsICdpbmRlbnQnIG9yICdkZWVwSW5kZW50Jy5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gJ3NhbWUnIGluIHZzY29kZSBhbmQgdG8gJ25vbmUnIGluIG1vbmFjby1lZGl0b3IuXG4gICAgICAgICAqL1xuICAgICAgICB3cmFwcGluZ0luZGVudD86ICdub25lJyB8ICdzYW1lJyB8ICdpbmRlbnQnIHwgJ2RlZXBJbmRlbnQnO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29udHJvbHMgdGhlIHdyYXBwaW5nIHN0cmF0ZWd5IHRvIHVzZS5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gJ3NpbXBsZScuXG4gICAgICAgICAqL1xuICAgICAgICB3cmFwcGluZ1N0cmF0ZWd5PzogJ3NpbXBsZScgfCAnYWR2YW5jZWQnO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29uZmlndXJlIHdvcmQgd3JhcHBpbmcgY2hhcmFjdGVycy4gQSBicmVhayB3aWxsIGJlIGludHJvZHVjZWQgYmVmb3JlIHRoZXNlIGNoYXJhY3RlcnMuXG4gICAgICAgICAqL1xuICAgICAgICB3b3JkV3JhcEJyZWFrQmVmb3JlQ2hhcmFjdGVycz86IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbmZpZ3VyZSB3b3JkIHdyYXBwaW5nIGNoYXJhY3RlcnMuIEEgYnJlYWsgd2lsbCBiZSBpbnRyb2R1Y2VkIGFmdGVyIHRoZXNlIGNoYXJhY3RlcnMuXG4gICAgICAgICAqL1xuICAgICAgICB3b3JkV3JhcEJyZWFrQWZ0ZXJDaGFyYWN0ZXJzPzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogUGVyZm9ybWFuY2UgZ3VhcmQ6IFN0b3AgcmVuZGVyaW5nIGEgbGluZSBhZnRlciB4IGNoYXJhY3RlcnMuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIDEwMDAwLlxuICAgICAgICAgKiBVc2UgLTEgdG8gbmV2ZXIgc3RvcCByZW5kZXJpbmdcbiAgICAgICAgICovXG4gICAgICAgIHN0b3BSZW5kZXJpbmdMaW5lQWZ0ZXI/OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25maWd1cmUgdGhlIGVkaXRvcidzIGhvdmVyLlxuICAgICAgICAgKi9cbiAgICAgICAgaG92ZXI/OiBJRWRpdG9ySG92ZXJPcHRpb25zO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlIGRldGVjdGluZyBsaW5rcyBhbmQgbWFraW5nIHRoZW0gY2xpY2thYmxlLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAgICAgKi9cbiAgICAgICAgbGlua3M/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlIGlubGluZSBjb2xvciBkZWNvcmF0b3JzIGFuZCBjb2xvciBwaWNrZXIgcmVuZGVyaW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgY29sb3JEZWNvcmF0b3JzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnRyb2wgdGhlIGJlaGF2aW91ciBvZiBjb21tZW50cyBpbiB0aGUgZWRpdG9yLlxuICAgICAgICAgKi9cbiAgICAgICAgY29tbWVudHM/OiBJRWRpdG9yQ29tbWVudHNPcHRpb25zO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlIGN1c3RvbSBjb250ZXh0bWVudS5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnRleHRtZW51PzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgbXVsdGlwbGllciB0byBiZSB1c2VkIG9uIHRoZSBgZGVsdGFYYCBhbmQgYGRlbHRhWWAgb2YgbW91c2Ugd2hlZWwgc2Nyb2xsIGV2ZW50cy5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gMS5cbiAgICAgICAgICovXG4gICAgICAgIG1vdXNlV2hlZWxTY3JvbGxTZW5zaXRpdml0eT86IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZhc3RTY3JvbGxpbmcgbXVsaXRwbGllciBzcGVlZCB3aGVuIHByZXNzaW5nIGBBbHRgXG4gICAgICAgICAqIERlZmF1bHRzIHRvIDUuXG4gICAgICAgICAqL1xuICAgICAgICBmYXN0U2Nyb2xsU2Vuc2l0aXZpdHk/OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmFibGUgdGhhdCB0aGUgZWRpdG9yIHNjcm9sbHMgb25seSB0aGUgcHJlZG9taW5hbnQgYXhpcy4gUHJldmVudHMgaG9yaXpvbnRhbCBkcmlmdCB3aGVuIHNjcm9sbGluZyB2ZXJ0aWNhbGx5IG9uIGEgdHJhY2twYWQuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgICAqL1xuICAgICAgICBzY3JvbGxQcmVkb21pbmFudEF4aXM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlIHRoYXQgdGhlIHNlbGVjdGlvbiB3aXRoIHRoZSBtb3VzZSBhbmQga2V5cyBpcyBkb2luZyBjb2x1bW4gc2VsZWN0aW9uLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIGNvbHVtblNlbGVjdGlvbj86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbW9kaWZpZXIgdG8gYmUgdXNlZCB0byBhZGQgbXVsdGlwbGUgY3Vyc29ycyB3aXRoIHRoZSBtb3VzZS5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gJ2FsdCdcbiAgICAgICAgICovXG4gICAgICAgIG11bHRpQ3Vyc29yTW9kaWZpZXI/OiAnY3RybENtZCcgfCAnYWx0JztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1lcmdlIG92ZXJsYXBwaW5nIHNlbGVjdGlvbnMuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIHRydWVcbiAgICAgICAgICovXG4gICAgICAgIG11bHRpQ3Vyc29yTWVyZ2VPdmVybGFwcGluZz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25maWd1cmUgdGhlIGJlaGF2aW91ciB3aGVuIHBhc3RpbmcgYSB0ZXh0IHdpdGggdGhlIGxpbmUgY291bnQgZXF1YWwgdG8gdGhlIGN1cnNvciBjb3VudC5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gJ3NwcmVhZCcuXG4gICAgICAgICAqL1xuICAgICAgICBtdWx0aUN1cnNvclBhc3RlPzogJ3NwcmVhZCcgfCAnZnVsbCc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25maWd1cmUgdGhlIGVkaXRvcidzIGFjY2Vzc2liaWxpdHkgc3VwcG9ydC5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gJ2F1dG8nLiBJdCBpcyBiZXN0IHRvIGxlYXZlIHRoaXMgdG8gJ2F1dG8nLlxuICAgICAgICAgKi9cbiAgICAgICAgYWNjZXNzaWJpbGl0eVN1cHBvcnQ/OiAnYXV0bycgfCAnb2ZmJyB8ICdvbic7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9scyB0aGUgbnVtYmVyIG9mIGxpbmVzIGluIHRoZSBlZGl0b3IgdGhhdCBjYW4gYmUgcmVhZCBvdXQgYnkgYSBzY3JlZW4gcmVhZGVyXG4gICAgICAgICAqL1xuICAgICAgICBhY2Nlc3NpYmlsaXR5UGFnZVNpemU/OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdWdnZXN0IG9wdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICBzdWdnZXN0PzogSVN1Z2dlc3RPcHRpb25zO1xuICAgICAgICBpbmxpbmVTdWdnZXN0PzogSUlubGluZVN1Z2dlc3RPcHRpb25zO1xuICAgICAgICAvKipcbiAgICAgICAgICogU21hcnQgc2VsZWN0IG9wdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICBzbWFydFNlbGVjdD86IElTbWFydFNlbGVjdE9wdGlvbnM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZ290b0xvY2F0aW9uPzogSUdvdG9Mb2NhdGlvbk9wdGlvbnM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmFibGUgcXVpY2sgc3VnZ2VzdGlvbnMgKHNoYWRvdyBzdWdnZXN0aW9ucylcbiAgICAgICAgICogRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIHF1aWNrU3VnZ2VzdGlvbnM/OiBib29sZWFuIHwgSVF1aWNrU3VnZ2VzdGlvbnNPcHRpb25zO1xuICAgICAgICAvKipcbiAgICAgICAgICogUXVpY2sgc3VnZ2VzdGlvbnMgc2hvdyBkZWxheSAoaW4gbXMpXG4gICAgICAgICAqIERlZmF1bHRzIHRvIDEwIChtcylcbiAgICAgICAgICovXG4gICAgICAgIHF1aWNrU3VnZ2VzdGlvbnNEZWxheT86IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnRyb2xzIHRoZSBzcGFjaW5nIGFyb3VuZCB0aGUgZWRpdG9yLlxuICAgICAgICAgKi9cbiAgICAgICAgcGFkZGluZz86IElFZGl0b3JQYWRkaW5nT3B0aW9ucztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBhcmFtZXRlciBoaW50IG9wdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICBwYXJhbWV0ZXJIaW50cz86IElFZGl0b3JQYXJhbWV0ZXJIaW50T3B0aW9ucztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9wdGlvbnMgZm9yIGF1dG8gY2xvc2luZyBicmFja2V0cy5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gbGFuZ3VhZ2UgZGVmaW5lZCBiZWhhdmlvci5cbiAgICAgICAgICovXG4gICAgICAgIGF1dG9DbG9zaW5nQnJhY2tldHM/OiBFZGl0b3JBdXRvQ2xvc2luZ1N0cmF0ZWd5O1xuICAgICAgICAvKipcbiAgICAgICAgICogT3B0aW9ucyBmb3IgYXV0byBjbG9zaW5nIHF1b3Rlcy5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gbGFuZ3VhZ2UgZGVmaW5lZCBiZWhhdmlvci5cbiAgICAgICAgICovXG4gICAgICAgIGF1dG9DbG9zaW5nUXVvdGVzPzogRWRpdG9yQXV0b0Nsb3NpbmdTdHJhdGVneTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9wdGlvbnMgZm9yIHByZXNzaW5nIGJhY2tzcGFjZSBuZWFyIHF1b3RlcyBvciBicmFja2V0IHBhaXJzLlxuICAgICAgICAgKi9cbiAgICAgICAgYXV0b0Nsb3NpbmdEZWxldGU/OiBFZGl0b3JBdXRvQ2xvc2luZ0VkaXRTdHJhdGVneTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9wdGlvbnMgZm9yIHR5cGluZyBvdmVyIGNsb3NpbmcgcXVvdGVzIG9yIGJyYWNrZXRzLlxuICAgICAgICAgKi9cbiAgICAgICAgYXV0b0Nsb3NpbmdPdmVydHlwZT86IEVkaXRvckF1dG9DbG9zaW5nRWRpdFN0cmF0ZWd5O1xuICAgICAgICAvKipcbiAgICAgICAgICogT3B0aW9ucyBmb3IgYXV0byBzdXJyb3VuZGluZy5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gYWx3YXlzIGFsbG93aW5nIGF1dG8gc3Vycm91bmRpbmcuXG4gICAgICAgICAqL1xuICAgICAgICBhdXRvU3Vycm91bmQ/OiBFZGl0b3JBdXRvU3Vycm91bmRTdHJhdGVneTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnRyb2xzIHdoZXRoZXIgdGhlIGVkaXRvciBzaG91bGQgYXV0b21hdGljYWxseSBhZGp1c3QgdGhlIGluZGVudGF0aW9uIHdoZW4gdXNlcnMgdHlwZSwgcGFzdGUsIG1vdmUgb3IgaW5kZW50IGxpbmVzLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBhZHZhbmNlZC5cbiAgICAgICAgICovXG4gICAgICAgIGF1dG9JbmRlbnQ/OiAnbm9uZScgfCAna2VlcCcgfCAnYnJhY2tldHMnIHwgJ2FkdmFuY2VkJyB8ICdmdWxsJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVtdWxhdGUgc2VsZWN0aW9uIGJlaGF2aW91ciBvZiB0YWIgY2hhcmFjdGVycyB3aGVuIHVzaW5nIHNwYWNlcyBmb3IgaW5kZW50YXRpb24uXG4gICAgICAgICAqIFRoaXMgbWVhbnMgc2VsZWN0aW9uIHdpbGwgc3RpY2sgdG8gdGFiIHN0b3BzLlxuICAgICAgICAgKi9cbiAgICAgICAgc3RpY2t5VGFiU3RvcHM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlIGZvcm1hdCBvbiB0eXBlLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIGZvcm1hdE9uVHlwZT86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmFibGUgZm9ybWF0IG9uIHBhc3RlLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIGZvcm1hdE9uUGFzdGU/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29udHJvbHMgaWYgdGhlIGVkaXRvciBzaG91bGQgYWxsb3cgdG8gbW92ZSBzZWxlY3Rpb25zIHZpYSBkcmFnIGFuZCBkcm9wLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIGRyYWdBbmREcm9wPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuYWJsZSB0aGUgc3VnZ2VzdGlvbiBib3ggdG8gcG9wLXVwIG9uIHRyaWdnZXIgY2hhcmFjdGVycy5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIHN1Z2dlc3RPblRyaWdnZXJDaGFyYWN0ZXJzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFjY2VwdCBzdWdnZXN0aW9ucyBvbiBFTlRFUi5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gJ29uJy5cbiAgICAgICAgICovXG4gICAgICAgIGFjY2VwdFN1Z2dlc3Rpb25PbkVudGVyPzogJ29uJyB8ICdzbWFydCcgfCAnb2ZmJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFjY2VwdCBzdWdnZXN0aW9ucyBvbiBwcm92aWRlciBkZWZpbmVkIGNoYXJhY3RlcnMuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgICAqL1xuICAgICAgICBhY2NlcHRTdWdnZXN0aW9uT25Db21taXRDaGFyYWN0ZXI/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlIHNuaXBwZXQgc3VnZ2VzdGlvbnMuIERlZmF1bHQgdG8gJ3RydWUnLlxuICAgICAgICAgKi9cbiAgICAgICAgc25pcHBldFN1Z2dlc3Rpb25zPzogJ3RvcCcgfCAnYm90dG9tJyB8ICdpbmxpbmUnIHwgJ25vbmUnO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29weWluZyB3aXRob3V0IGEgc2VsZWN0aW9uIGNvcGllcyB0aGUgY3VycmVudCBsaW5lLlxuICAgICAgICAgKi9cbiAgICAgICAgZW1wdHlTZWxlY3Rpb25DbGlwYm9hcmQ/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogU3ludGF4IGhpZ2hsaWdodGluZyBpcyBjb3BpZWQuXG4gICAgICAgICAqL1xuICAgICAgICBjb3B5V2l0aFN5bnRheEhpZ2hsaWdodGluZz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgaGlzdG9yeSBtb2RlIGZvciBzdWdnZXN0aW9ucy5cbiAgICAgICAgICovXG4gICAgICAgIHN1Z2dlc3RTZWxlY3Rpb24/OiAnZmlyc3QnIHwgJ3JlY2VudGx5VXNlZCcgfCAncmVjZW50bHlVc2VkQnlQcmVmaXgnO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGZvbnQgc2l6ZSBmb3IgdGhlIHN1Z2dlc3Qgd2lkZ2V0LlxuICAgICAgICAgKiBEZWZhdWx0cyB0byB0aGUgZWRpdG9yIGZvbnQgc2l6ZS5cbiAgICAgICAgICovXG4gICAgICAgIHN1Z2dlc3RGb250U2l6ZT86IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBsaW5lIGhlaWdodCBmb3IgdGhlIHN1Z2dlc3Qgd2lkZ2V0LlxuICAgICAgICAgKiBEZWZhdWx0cyB0byB0aGUgZWRpdG9yIGxpbmUgaGVpZ2h0LlxuICAgICAgICAgKi9cbiAgICAgICAgc3VnZ2VzdExpbmVIZWlnaHQ/OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmFibGUgdGFiIGNvbXBsZXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICB0YWJDb21wbGV0aW9uPzogJ29uJyB8ICdvZmYnIHwgJ29ubHlTbmlwcGV0cyc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmFibGUgc2VsZWN0aW9uIGhpZ2hsaWdodC5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIHNlbGVjdGlvbkhpZ2hsaWdodD86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmFibGUgc2VtYW50aWMgb2NjdXJyZW5jZXMgaGlnaGxpZ2h0LlxuICAgICAgICAgKiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAgICAgKi9cbiAgICAgICAgb2NjdXJyZW5jZXNIaWdobGlnaHQ/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2hvdyBjb2RlIGxlbnNcbiAgICAgICAgICogRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGNvZGVMZW5zPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgbGVucyBmb250IGZhbWlseS4gRGVmYXVsdHMgdG8gZWRpdG9yIGZvbnQgZmFtaWx5LlxuICAgICAgICAgKi9cbiAgICAgICAgY29kZUxlbnNGb250RmFtaWx5Pzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBsZW5zIGZvbnQgc2l6ZS4gRGVmYXVsdCB0byA5MCUgb2YgdGhlIGVkaXRvciBmb250IHNpemVcbiAgICAgICAgICovXG4gICAgICAgIGNvZGVMZW5zRm9udFNpemU/OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9sIHRoZSBiZWhhdmlvciBhbmQgcmVuZGVyaW5nIG9mIHRoZSBjb2RlIGFjdGlvbiBsaWdodGJ1bGIuXG4gICAgICAgICAqL1xuICAgICAgICBsaWdodGJ1bGI/OiBJRWRpdG9yTGlnaHRidWxiT3B0aW9ucztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRpbWVvdXQgZm9yIHJ1bm5pbmcgY29kZSBhY3Rpb25zIG9uIHNhdmUuXG4gICAgICAgICAqL1xuICAgICAgICBjb2RlQWN0aW9uc09uU2F2ZVRpbWVvdXQ/OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmFibGUgY29kZSBmb2xkaW5nLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAgICAgKi9cbiAgICAgICAgZm9sZGluZz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZWxlY3RzIHRoZSBmb2xkaW5nIHN0cmF0ZWd5LiAnYXV0bycgdXNlcyB0aGUgc3RyYXRlZ2llcyBjb250cmlidXRlZCBmb3IgdGhlIGN1cnJlbnQgZG9jdW1lbnQsICdpbmRlbnRhdGlvbicgdXNlcyB0aGUgaW5kZW50YXRpb24gYmFzZWQgZm9sZGluZyBzdHJhdGVneS5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gJ2F1dG8nLlxuICAgICAgICAgKi9cbiAgICAgICAgZm9sZGluZ1N0cmF0ZWd5PzogJ2F1dG8nIHwgJ2luZGVudGF0aW9uJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuYWJsZSBoaWdobGlnaHQgZm9yIGZvbGRlZCByZWdpb25zLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAgICAgKi9cbiAgICAgICAgZm9sZGluZ0hpZ2hsaWdodD86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBdXRvIGZvbGQgaW1wb3J0cyBmb2xkaW5nIHJlZ2lvbnMuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgICAqL1xuICAgICAgICBmb2xkaW5nSW1wb3J0c0J5RGVmYXVsdD86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9scyB3aGV0aGVyIHRoZSBmb2xkIGFjdGlvbnMgaW4gdGhlIGd1dHRlciBzdGF5IGFsd2F5cyB2aXNpYmxlIG9yIGhpZGUgdW5sZXNzIHRoZSBtb3VzZSBpcyBvdmVyIHRoZSBndXR0ZXIuXG4gICAgICAgICAqIERlZmF1bHRzIHRvICdtb3VzZW92ZXInLlxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd0ZvbGRpbmdDb250cm9scz86ICdhbHdheXMnIHwgJ21vdXNlb3Zlcic7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9scyB3aGV0aGVyIGNsaWNraW5nIG9uIHRoZSBlbXB0eSBjb250ZW50IGFmdGVyIGEgZm9sZGVkIGxpbmUgd2lsbCB1bmZvbGQgdGhlIGxpbmUuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAgICAgKi9cbiAgICAgICAgdW5mb2xkT25DbGlja0FmdGVyRW5kT2ZMaW5lPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuYWJsZSBoaWdobGlnaHRpbmcgb2YgbWF0Y2hpbmcgYnJhY2tldHMuXG4gICAgICAgICAqIERlZmF1bHRzIHRvICdhbHdheXMnLlxuICAgICAgICAgKi9cbiAgICAgICAgbWF0Y2hCcmFja2V0cz86ICduZXZlcicgfCAnbmVhcicgfCAnYWx3YXlzJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuYWJsZSByZW5kZXJpbmcgb2Ygd2hpdGVzcGFjZS5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gJ3NlbGVjdGlvbicuXG4gICAgICAgICAqL1xuICAgICAgICByZW5kZXJXaGl0ZXNwYWNlPzogJ25vbmUnIHwgJ2JvdW5kYXJ5JyB8ICdzZWxlY3Rpb24nIHwgJ3RyYWlsaW5nJyB8ICdhbGwnO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlIHJlbmRlcmluZyBvZiBjb250cm9sIGNoYXJhY3RlcnMuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgICAqL1xuICAgICAgICByZW5kZXJDb250cm9sQ2hhcmFjdGVycz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmFibGUgcmVuZGVyaW5nIG9mIGN1cnJlbnQgbGluZSBoaWdobGlnaHQuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIGFsbC5cbiAgICAgICAgICovXG4gICAgICAgIHJlbmRlckxpbmVIaWdobGlnaHQ/OiAnbm9uZScgfCAnZ3V0dGVyJyB8ICdsaW5lJyB8ICdhbGwnO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29udHJvbCBpZiB0aGUgY3VycmVudCBsaW5lIGhpZ2hsaWdodCBzaG91bGQgYmUgcmVuZGVyZWQgb25seSB0aGUgZWRpdG9yIGlzIGZvY3VzZWQuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVuZGVyTGluZUhpZ2hsaWdodE9ubHlXaGVuRm9jdXM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogSW5zZXJ0aW5nIGFuZCBkZWxldGluZyB3aGl0ZXNwYWNlIGZvbGxvd3MgdGFiIHN0b3BzLlxuICAgICAgICAgKi9cbiAgICAgICAgdXNlVGFiU3RvcHM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGZvbnQgZmFtaWx5XG4gICAgICAgICAqL1xuICAgICAgICBmb250RmFtaWx5Pzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGZvbnQgd2VpZ2h0XG4gICAgICAgICAqL1xuICAgICAgICBmb250V2VpZ2h0Pzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGZvbnQgc2l6ZVxuICAgICAgICAgKi9cbiAgICAgICAgZm9udFNpemU/OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbGluZSBoZWlnaHRcbiAgICAgICAgICovXG4gICAgICAgIGxpbmVIZWlnaHQ/OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbGV0dGVyIHNwYWNpbmdcbiAgICAgICAgICovXG4gICAgICAgIGxldHRlclNwYWNpbmc/OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9scyBmYWRpbmcgb3V0IG9mIHVudXNlZCB2YXJpYWJsZXMuXG4gICAgICAgICAqL1xuICAgICAgICBzaG93VW51c2VkPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnRyb2xzIHdoZXRoZXIgdG8gZm9jdXMgdGhlIGlubGluZSBlZGl0b3IgaW4gdGhlIHBlZWsgd2lkZ2V0IGJ5IGRlZmF1bHQuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAgICAgKi9cbiAgICAgICAgcGVla1dpZGdldERlZmF1bHRGb2N1cz86ICd0cmVlJyB8ICdlZGl0b3InO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29udHJvbHMgd2hldGhlciB0aGUgZGVmaW5pdGlvbiBsaW5rIG9wZW5zIGVsZW1lbnQgaW4gdGhlIHBlZWsgd2lkZ2V0LlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIGRlZmluaXRpb25MaW5rT3BlbnNJblBlZWs/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29udHJvbHMgc3RyaWtldGhyb3VnaCBkZXByZWNhdGVkIHZhcmlhYmxlcy5cbiAgICAgICAgICovXG4gICAgICAgIHNob3dEZXByZWNhdGVkPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnRyb2wgdGhlIGJlaGF2aW9yIGFuZCByZW5kZXJpbmcgb2YgdGhlIGlubGluZSBoaW50cy5cbiAgICAgICAgICovXG4gICAgICAgIGlubGF5SGludHM/OiBJRWRpdG9ySW5sYXlIaW50c09wdGlvbnM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9sIGlmIHRoZSBlZGl0b3Igc2hvdWxkIHVzZSBzaGFkb3cgRE9NLlxuICAgICAgICAgKi9cbiAgICAgICAgdXNlU2hhZG93RE9NPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnRyb2xzIHRoZSBiZWhhdmlvciBvZiBlZGl0b3IgZ3VpZGVzLlxuICAgICAgICAqL1xuICAgICAgICBndWlkZXM/OiBJR3VpZGVzT3B0aW9ucztcbiAgICAgICAgdW5pY29kZUhpZ2hsaWdodD86IElVbmljb2RlSGlnaGxpZ2h0T3B0aW9ucztcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElEaWZmRWRpdG9yQmFzZU9wdGlvbnMge1xuICAgICAgICAvKipcbiAgICAgICAgICogQWxsb3cgdGhlIHVzZXIgdG8gcmVzaXplIHRoZSBkaWZmIGVkaXRvciBzcGxpdCB2aWV3LlxuICAgICAgICAgKiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAgICAgKi9cbiAgICAgICAgZW5hYmxlU3BsaXRWaWV3UmVzaXppbmc/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVuZGVyIHRoZSBkaWZmZXJlbmNlcyBpbiB0d28gc2lkZS1ieS1zaWRlIGVkaXRvcnMuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgICAqL1xuICAgICAgICByZW5kZXJTaWRlQnlTaWRlPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIGFmdGVyIHdoaWNoIGRpZmYgY29tcHV0YXRpb24gaXMgY2FuY2VsbGVkLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byA1MDAwLlxuICAgICAgICAgKi9cbiAgICAgICAgbWF4Q29tcHV0YXRpb25UaW1lPzogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogTWF4aW11bSBzdXBwb3J0ZWQgZmlsZSBzaXplIGluIE1CLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byA1MC5cbiAgICAgICAgICovXG4gICAgICAgIG1heEZpbGVTaXplPzogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29tcHV0ZSB0aGUgZGlmZiBieSBpZ25vcmluZyBsZWFkaW5nL3RyYWlsaW5nIHdoaXRlc3BhY2VcbiAgICAgICAgICogRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGlnbm9yZVRyaW1XaGl0ZXNwYWNlPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbmRlciArLy0gaW5kaWNhdG9ycyBmb3IgYWRkZWQvZGVsZXRlZCBjaGFuZ2VzLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVuZGVySW5kaWNhdG9ycz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPcmlnaW5hbCBtb2RlbCBzaG91bGQgYmUgZWRpdGFibGU/XG4gICAgICAgICAqIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAgICAgKi9cbiAgICAgICAgb3JpZ2luYWxFZGl0YWJsZT86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaG91bGQgdGhlIGRpZmYgZWRpdG9yIGVuYWJsZSBjb2RlIGxlbnM/XG4gICAgICAgICAqIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAgICAgKi9cbiAgICAgICAgZGlmZkNvZGVMZW5zPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElzIHRoZSBkaWZmIGVkaXRvciBzaG91bGQgcmVuZGVyIG92ZXJ2aWV3IHJ1bGVyXG4gICAgICAgICAqIERlZmF1bHRzIHRvIHRydWVcbiAgICAgICAgICovXG4gICAgICAgIHJlbmRlck92ZXJ2aWV3UnVsZXI/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29udHJvbCB0aGUgd3JhcHBpbmcgb2YgdGhlIGRpZmYgZWRpdG9yLlxuICAgICAgICAgKi9cbiAgICAgICAgZGlmZldvcmRXcmFwPzogJ29mZicgfCAnb24nIHwgJ2luaGVyaXQnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGRpZmYgZWRpdG9yLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSURpZmZFZGl0b3JPcHRpb25zIGV4dGVuZHMgSUVkaXRvck9wdGlvbnMsIElEaWZmRWRpdG9yQmFzZU9wdGlvbnMge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuIGV2ZW50IGRlc2NyaWJpbmcgdGhhdCB0aGUgY29uZmlndXJhdGlvbiBvZiB0aGUgZWRpdG9yIGhhcyBjaGFuZ2VkLlxuICAgICAqL1xuICAgIGV4cG9ydCBjbGFzcyBDb25maWd1cmF0aW9uQ2hhbmdlZEV2ZW50IHtcbiAgICAgICAgaGFzQ2hhbmdlZChpZDogRWRpdG9yT3B0aW9uKTogYm9vbGVhbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbGwgY29tcHV0ZWQgZWRpdG9yIG9wdGlvbnMuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJQ29tcHV0ZWRFZGl0b3JPcHRpb25zIHtcbiAgICAgICAgZ2V0PFQgZXh0ZW5kcyBFZGl0b3JPcHRpb24+KGlkOiBUKTogRmluZENvbXB1dGVkRWRpdG9yT3B0aW9uVmFsdWVCeUlkPFQ+O1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUVkaXRvck9wdGlvbjxLMSBleHRlbmRzIEVkaXRvck9wdGlvbiwgVj4ge1xuICAgICAgICByZWFkb25seSBpZDogSzE7XG4gICAgICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBWO1xuICAgICAgICAvKipcbiAgICAgICAgICogTWlnaHQgbW9kaWZ5IGB2YWx1ZWAuXG4gICAgICAgICovXG4gICAgICAgIGFwcGx5VXBkYXRlKHZhbHVlOiBWLCB1cGRhdGU6IFYpOiBBcHBseVVwZGF0ZVJlc3VsdDxWPjtcbiAgICB9XG5cbiAgICBleHBvcnQgY2xhc3MgQXBwbHlVcGRhdGVSZXN1bHQ8VD4ge1xuICAgICAgICByZWFkb25seSBuZXdWYWx1ZTogVDtcbiAgICAgICAgcmVhZG9ubHkgZGlkQ2hhbmdlOiBib29sZWFuO1xuICAgICAgICBjb25zdHJ1Y3RvcihuZXdWYWx1ZTogVCwgZGlkQ2hhbmdlOiBib29sZWFuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIGVkaXRvciBjb21tZW50c1xuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUVkaXRvckNvbW1lbnRzT3B0aW9ucyB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnNlcnQgYSBzcGFjZSBhZnRlciB0aGUgbGluZSBjb21tZW50IHRva2VuIGFuZCBpbnNpZGUgdGhlIGJsb2NrIGNvbW1lbnRzIHRva2Vucy5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGluc2VydFNwYWNlPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElnbm9yZSBlbXB0eSBsaW5lcyB3aGVuIGluc2VydGluZyBsaW5lIGNvbW1lbnRzLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAgICAgKi9cbiAgICAgICAgaWdub3JlRW1wdHlMaW5lcz86IGJvb2xlYW47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGtpbmQgb2YgYW5pbWF0aW9uIGluIHdoaWNoIHRoZSBlZGl0b3IncyBjdXJzb3Igc2hvdWxkIGJlIHJlbmRlcmVkLlxuICAgICAqL1xuICAgIGV4cG9ydCBlbnVtIFRleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhpZGRlblxuICAgICAgICAgKi9cbiAgICAgICAgSGlkZGVuID0gMCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJsaW5raW5nXG4gICAgICAgICAqL1xuICAgICAgICBCbGluayA9IDEsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCbGlua2luZyB3aXRoIHNtb290aCBmYWRpbmdcbiAgICAgICAgICovXG4gICAgICAgIFNtb290aCA9IDIsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCbGlua2luZyB3aXRoIHByb2xvbmdlZCBmaWxsZWQgc3RhdGUgYW5kIHNtb290aCBmYWRpbmdcbiAgICAgICAgICovXG4gICAgICAgIFBoYXNlID0gMyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEV4cGFuZCBjb2xsYXBzZSBhbmltYXRpb24gb24gdGhlIHkgYXhpc1xuICAgICAgICAgKi9cbiAgICAgICAgRXhwYW5kID0gNCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE5vLUJsaW5raW5nXG4gICAgICAgICAqL1xuICAgICAgICBTb2xpZCA9IDVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc3R5bGUgaW4gd2hpY2ggdGhlIGVkaXRvcidzIGN1cnNvciBzaG91bGQgYmUgcmVuZGVyZWQuXG4gICAgICovXG4gICAgZXhwb3J0IGVudW0gVGV4dEVkaXRvckN1cnNvclN0eWxlIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFzIGEgdmVydGljYWwgbGluZSAoc2l0dGluZyBiZXR3ZWVuIHR3byBjaGFyYWN0ZXJzKS5cbiAgICAgICAgICovXG4gICAgICAgIExpbmUgPSAxLFxuICAgICAgICAvKipcbiAgICAgICAgICogQXMgYSBibG9jayAoc2l0dGluZyBvbiB0b3Agb2YgYSBjaGFyYWN0ZXIpLlxuICAgICAgICAgKi9cbiAgICAgICAgQmxvY2sgPSAyLFxuICAgICAgICAvKipcbiAgICAgICAgICogQXMgYSBob3Jpem9udGFsIGxpbmUgKHNpdHRpbmcgdW5kZXIgYSBjaGFyYWN0ZXIpLlxuICAgICAgICAgKi9cbiAgICAgICAgVW5kZXJsaW5lID0gMyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFzIGEgdGhpbiB2ZXJ0aWNhbCBsaW5lIChzaXR0aW5nIGJldHdlZW4gdHdvIGNoYXJhY3RlcnMpLlxuICAgICAgICAgKi9cbiAgICAgICAgTGluZVRoaW4gPSA0LFxuICAgICAgICAvKipcbiAgICAgICAgICogQXMgYW4gb3V0bGluZWQgYmxvY2sgKHNpdHRpbmcgb24gdG9wIG9mIGEgY2hhcmFjdGVyKS5cbiAgICAgICAgICovXG4gICAgICAgIEJsb2NrT3V0bGluZSA9IDUsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcyBhIHRoaW4gaG9yaXpvbnRhbCBsaW5lIChzaXR0aW5nIHVuZGVyIGEgY2hhcmFjdGVyKS5cbiAgICAgICAgICovXG4gICAgICAgIFVuZGVybGluZVRoaW4gPSA2XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciBlZGl0b3IgZmluZCB3aWRnZXRcbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElFZGl0b3JGaW5kT3B0aW9ucyB7XG4gICAgICAgIC8qKlxuICAgICAgICAqIENvbnRyb2xzIHdoZXRoZXIgdGhlIGN1cnNvciBzaG91bGQgbW92ZSB0byBmaW5kIG1hdGNoZXMgd2hpbGUgdHlwaW5nLlxuICAgICAgICAqL1xuICAgICAgICBjdXJzb3JNb3ZlT25UeXBlPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnRyb2xzIGlmIHdlIHNlZWQgc2VhcmNoIHN0cmluZyBpbiB0aGUgRmluZCBXaWRnZXQgd2l0aCBlZGl0b3Igc2VsZWN0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgc2VlZFNlYXJjaFN0cmluZ0Zyb21TZWxlY3Rpb24/OiAnbmV2ZXInIHwgJ2Fsd2F5cycgfCAnc2VsZWN0aW9uJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnRyb2xzIGlmIEZpbmQgaW4gU2VsZWN0aW9uIGZsYWcgaXMgdHVybmVkIG9uIGluIHRoZSBlZGl0b3IuXG4gICAgICAgICAqL1xuICAgICAgICBhdXRvRmluZEluU2VsZWN0aW9uPzogJ25ldmVyJyB8ICdhbHdheXMnIHwgJ211bHRpbGluZSc7XG4gICAgICAgIGFkZEV4dHJhU3BhY2VPblRvcD86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9scyB3aGV0aGVyIHRoZSBzZWFyY2ggYXV0b21hdGljYWxseSByZXN0YXJ0cyBmcm9tIHRoZSBiZWdpbm5pbmcgKG9yIHRoZSBlbmQpIHdoZW4gbm8gZnVydGhlciBtYXRjaGVzIGNhbiBiZSBmb3VuZFxuICAgICAgICAgKi9cbiAgICAgICAgbG9vcD86IGJvb2xlYW47XG4gICAgfVxuXG4gICAgZXhwb3J0IHR5cGUgR29Ub0xvY2F0aW9uVmFsdWVzID0gJ3BlZWsnIHwgJ2dvdG9BbmRQZWVrJyB8ICdnb3RvJztcblxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgZ28gdG8gbG9jYXRpb25cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElHb3RvTG9jYXRpb25PcHRpb25zIHtcbiAgICAgICAgbXVsdGlwbGU/OiBHb1RvTG9jYXRpb25WYWx1ZXM7XG4gICAgICAgIG11bHRpcGxlRGVmaW5pdGlvbnM/OiBHb1RvTG9jYXRpb25WYWx1ZXM7XG4gICAgICAgIG11bHRpcGxlVHlwZURlZmluaXRpb25zPzogR29Ub0xvY2F0aW9uVmFsdWVzO1xuICAgICAgICBtdWx0aXBsZURlY2xhcmF0aW9ucz86IEdvVG9Mb2NhdGlvblZhbHVlcztcbiAgICAgICAgbXVsdGlwbGVJbXBsZW1lbnRhdGlvbnM/OiBHb1RvTG9jYXRpb25WYWx1ZXM7XG4gICAgICAgIG11bHRpcGxlUmVmZXJlbmNlcz86IEdvVG9Mb2NhdGlvblZhbHVlcztcbiAgICAgICAgYWx0ZXJuYXRpdmVEZWZpbml0aW9uQ29tbWFuZD86IHN0cmluZztcbiAgICAgICAgYWx0ZXJuYXRpdmVUeXBlRGVmaW5pdGlvbkNvbW1hbmQ/OiBzdHJpbmc7XG4gICAgICAgIGFsdGVybmF0aXZlRGVjbGFyYXRpb25Db21tYW5kPzogc3RyaW5nO1xuICAgICAgICBhbHRlcm5hdGl2ZUltcGxlbWVudGF0aW9uQ29tbWFuZD86IHN0cmluZztcbiAgICAgICAgYWx0ZXJuYXRpdmVSZWZlcmVuY2VDb21tYW5kPzogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgZWRpdG9yIGhvdmVyXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJRWRpdG9ySG92ZXJPcHRpb25zIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuYWJsZSB0aGUgaG92ZXIuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgICAqL1xuICAgICAgICBlbmFibGVkPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlbGF5IGZvciBzaG93aW5nIHRoZSBob3Zlci5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gMzAwLlxuICAgICAgICAgKi9cbiAgICAgICAgZGVsYXk/OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJcyB0aGUgaG92ZXIgc3RpY2t5IHN1Y2ggdGhhdCBpdCBjYW4gYmUgY2xpY2tlZCBhbmQgaXRzIGNvbnRlbnRzIHNlbGVjdGVkP1xuICAgICAgICAgKiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAgICAgKi9cbiAgICAgICAgc3RpY2t5PzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3VsZCB0aGUgaG92ZXIgYmUgc2hvd24gYWJvdmUgdGhlIGxpbmUgaWYgcG9zc2libGU/XG4gICAgICAgICAqIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAgICAgKi9cbiAgICAgICAgYWJvdmU/OiBib29sZWFuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgZGVzY3JpcHRpb24gZm9yIHRoZSBvdmVydmlldyBydWxlciBwb3NpdGlvbi5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIE92ZXJ2aWV3UnVsZXJQb3NpdGlvbiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaWR0aCBvZiB0aGUgb3ZlcnZpZXcgcnVsZXJcbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHdpZHRoOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIZWlnaHQgb2YgdGhlIG92ZXJ2aWV3IHJ1bGVyXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBoZWlnaHQ6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRvcCBwb3NpdGlvbiBmb3IgdGhlIG92ZXJ2aWV3IHJ1bGVyXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSB0b3A6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJpZ2h0IHBvc2l0aW9uIGZvciB0aGUgb3ZlcnZpZXcgcnVsZXJcbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHJpZ2h0OiBudW1iZXI7XG4gICAgfVxuXG4gICAgZXhwb3J0IGVudW0gUmVuZGVyTWluaW1hcCB7XG4gICAgICAgIE5vbmUgPSAwLFxuICAgICAgICBUZXh0ID0gMSxcbiAgICAgICAgQmxvY2tzID0gMlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnRlcm5hbCBsYXlvdXQgZGV0YWlscyBvZiB0aGUgZWRpdG9yLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgRWRpdG9yTGF5b3V0SW5mbyB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGdWxsIGVkaXRvciB3aWR0aC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHdpZHRoOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGdWxsIGVkaXRvciBoZWlnaHQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBoZWlnaHQ6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIExlZnQgcG9zaXRpb24gZm9yIHRoZSBnbHlwaCBtYXJnaW4uXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBnbHlwaE1hcmdpbkxlZnQ6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB3aWR0aCBvZiB0aGUgZ2x5cGggbWFyZ2luLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZ2x5cGhNYXJnaW5XaWR0aDogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogTGVmdCBwb3NpdGlvbiBmb3IgdGhlIGxpbmUgbnVtYmVycy5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGxpbmVOdW1iZXJzTGVmdDogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHdpZHRoIG9mIHRoZSBsaW5lIG51bWJlcnMuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBsaW5lTnVtYmVyc1dpZHRoOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMZWZ0IHBvc2l0aW9uIGZvciB0aGUgbGluZSBkZWNvcmF0aW9ucy5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGRlY29yYXRpb25zTGVmdDogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHdpZHRoIG9mIHRoZSBsaW5lIGRlY29yYXRpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZGVjb3JhdGlvbnNXaWR0aDogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogTGVmdCBwb3NpdGlvbiBmb3IgdGhlIGNvbnRlbnQgKGFjdHVhbCB0ZXh0KVxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgY29udGVudExlZnQ6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB3aWR0aCBvZiB0aGUgY29udGVudCAoYWN0dWFsIHRleHQpXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBjb250ZW50V2lkdGg6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIExheW91dCBpbmZvcm1hdGlvbiBmb3IgdGhlIG1pbmltYXBcbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IG1pbmltYXA6IEVkaXRvck1pbmltYXBMYXlvdXRJbmZvO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG51bWJlciBvZiBjb2x1bW5zIChvZiB0eXBpY2FsIGNoYXJhY3RlcnMpIGZpdHRpbmcgb24gYSB2aWV3cG9ydCBsaW5lLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgdmlld3BvcnRDb2x1bW46IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgaXNXb3JkV3JhcE1pbmlmaWVkOiBib29sZWFuO1xuICAgICAgICByZWFkb25seSBpc1ZpZXdwb3J0V3JhcHBpbmc6IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IHdyYXBwaW5nQ29sdW1uOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgd2lkdGggb2YgdGhlIHZlcnRpY2FsIHNjcm9sbGJhci5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHZlcnRpY2FsU2Nyb2xsYmFyV2lkdGg6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBoZWlnaHQgb2YgdGhlIGhvcml6b250YWwgc2Nyb2xsYmFyLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgaG9yaXpvbnRhbFNjcm9sbGJhckhlaWdodDogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHBvc2l0aW9uIG9mIHRoZSBvdmVydmlldyBydWxlci5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IG92ZXJ2aWV3UnVsZXI6IE92ZXJ2aWV3UnVsZXJQb3NpdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW50ZXJuYWwgbGF5b3V0IGRldGFpbHMgb2YgdGhlIGVkaXRvci5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIEVkaXRvck1pbmltYXBMYXlvdXRJbmZvIHtcbiAgICAgICAgcmVhZG9ubHkgcmVuZGVyTWluaW1hcDogUmVuZGVyTWluaW1hcDtcbiAgICAgICAgcmVhZG9ubHkgbWluaW1hcExlZnQ6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgbWluaW1hcFdpZHRoOiBudW1iZXI7XG4gICAgICAgIHJlYWRvbmx5IG1pbmltYXBIZWlnaHRJc0VkaXRvckhlaWdodDogYm9vbGVhbjtcbiAgICAgICAgcmVhZG9ubHkgbWluaW1hcElzU2FtcGxpbmc6IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IG1pbmltYXBTY2FsZTogbnVtYmVyO1xuICAgICAgICByZWFkb25seSBtaW5pbWFwTGluZUhlaWdodDogbnVtYmVyO1xuICAgICAgICByZWFkb25seSBtaW5pbWFwQ2FudmFzSW5uZXJXaWR0aDogbnVtYmVyO1xuICAgICAgICByZWFkb25seSBtaW5pbWFwQ2FudmFzSW5uZXJIZWlnaHQ6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgbWluaW1hcENhbnZhc091dGVyV2lkdGg6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgbWluaW1hcENhbnZhc091dGVySGVpZ2h0OiBudW1iZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciBlZGl0b3IgbGlnaHRidWxiXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJRWRpdG9yTGlnaHRidWxiT3B0aW9ucyB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmFibGUgdGhlIGxpZ2h0YnVsYiBjb2RlIGFjdGlvbi5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGVuYWJsZWQ/OiBib29sZWFuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgZWRpdG9yIGlubGF5SGludHNcbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElFZGl0b3JJbmxheUhpbnRzT3B0aW9ucyB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmFibGUgdGhlIGlubGluZSBoaW50cy5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGVuYWJsZWQ/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRm9udCBzaXplIG9mIGlubGluZSBoaW50cy5cbiAgICAgICAgICogRGVmYXVsdCB0byA5MCUgb2YgdGhlIGVkaXRvciBmb250IHNpemUuXG4gICAgICAgICAqL1xuICAgICAgICBmb250U2l6ZT86IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZvbnQgZmFtaWx5IG9mIGlubGluZSBoaW50cy5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gZWRpdG9yIGZvbnQgZmFtaWx5LlxuICAgICAgICAgKi9cbiAgICAgICAgZm9udEZhbWlseT86IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIGVkaXRvciBtaW5pbWFwXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJRWRpdG9yTWluaW1hcE9wdGlvbnMge1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlIHRoZSByZW5kZXJpbmcgb2YgdGhlIG1pbmltYXAuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgICAqL1xuICAgICAgICBlbmFibGVkPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnRyb2wgdGhlIHNpZGUgb2YgdGhlIG1pbmltYXAgaW4gZWRpdG9yLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byAncmlnaHQnLlxuICAgICAgICAgKi9cbiAgICAgICAgc2lkZT86ICdyaWdodCcgfCAnbGVmdCc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9sIHRoZSBtaW5pbWFwIHJlbmRlcmluZyBtb2RlLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byAnYWN0dWFsJy5cbiAgICAgICAgICovXG4gICAgICAgIHNpemU/OiAncHJvcG9ydGlvbmFsJyB8ICdmaWxsJyB8ICdmaXQnO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29udHJvbCB0aGUgcmVuZGVyaW5nIG9mIHRoZSBtaW5pbWFwIHNsaWRlci5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gJ21vdXNlb3ZlcicuXG4gICAgICAgICAqL1xuICAgICAgICBzaG93U2xpZGVyPzogJ2Fsd2F5cycgfCAnbW91c2VvdmVyJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbmRlciB0aGUgYWN0dWFsIHRleHQgb24gYSBsaW5lIChhcyBvcHBvc2VkIHRvIGNvbG9yIGJsb2NrcykuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgICAqL1xuICAgICAgICByZW5kZXJDaGFyYWN0ZXJzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIExpbWl0IHRoZSB3aWR0aCBvZiB0aGUgbWluaW1hcCB0byByZW5kZXIgYXQgbW9zdCBhIGNlcnRhaW4gbnVtYmVyIG9mIGNvbHVtbnMuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIDEyMC5cbiAgICAgICAgICovXG4gICAgICAgIG1heENvbHVtbj86IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbGF0aXZlIHNpemUgb2YgdGhlIGZvbnQgaW4gdGhlIG1pbmltYXAuIERlZmF1bHRzIHRvIDEuXG4gICAgICAgICAqL1xuICAgICAgICBzY2FsZT86IG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIGVkaXRvciBwYWRkaW5nXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJRWRpdG9yUGFkZGluZ09wdGlvbnMge1xuICAgICAgICAvKipcbiAgICAgICAgICogU3BhY2luZyBiZXR3ZWVuIHRvcCBlZGdlIG9mIGVkaXRvciBhbmQgZmlyc3QgbGluZS5cbiAgICAgICAgICovXG4gICAgICAgIHRvcD86IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwYWNpbmcgYmV0d2VlbiBib3R0b20gZWRnZSBvZiBlZGl0b3IgYW5kIGxhc3QgbGluZS5cbiAgICAgICAgICovXG4gICAgICAgIGJvdHRvbT86IG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHBhcmFtZXRlciBoaW50c1xuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUVkaXRvclBhcmFtZXRlckhpbnRPcHRpb25zIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuYWJsZSBwYXJhbWV0ZXIgaGludHMuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgICAqL1xuICAgICAgICBlbmFibGVkPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuYWJsZSBjeWNsaW5nIG9mIHBhcmFtZXRlciBoaW50cy5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAgICAgICAqL1xuICAgICAgICBjeWNsZT86IGJvb2xlYW47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciBxdWljayBzdWdnZXN0aW9uc1xuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVF1aWNrU3VnZ2VzdGlvbnNPcHRpb25zIHtcbiAgICAgICAgb3RoZXI/OiBib29sZWFuO1xuICAgICAgICBjb21tZW50cz86IGJvb2xlYW47XG4gICAgICAgIHN0cmluZ3M/OiBib29sZWFuO1xuICAgIH1cblxuICAgIGV4cG9ydCB0eXBlIExpbmVOdW1iZXJzVHlwZSA9ICdvbicgfCAnb2ZmJyB8ICdyZWxhdGl2ZScgfCAnaW50ZXJ2YWwnIHwgKChsaW5lTnVtYmVyOiBudW1iZXIpID0+IHN0cmluZyk7XG5cbiAgICBleHBvcnQgZW51bSBSZW5kZXJMaW5lTnVtYmVyc1R5cGUge1xuICAgICAgICBPZmYgPSAwLFxuICAgICAgICBPbiA9IDEsXG4gICAgICAgIFJlbGF0aXZlID0gMixcbiAgICAgICAgSW50ZXJ2YWwgPSAzLFxuICAgICAgICBDdXN0b20gPSA0XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBJbnRlcm5hbEVkaXRvclJlbmRlckxpbmVOdW1iZXJzT3B0aW9ucyB7XG4gICAgICAgIHJlYWRvbmx5IHJlbmRlclR5cGU6IFJlbmRlckxpbmVOdW1iZXJzVHlwZTtcbiAgICAgICAgcmVhZG9ubHkgcmVuZGVyRm46ICgobGluZU51bWJlcjogbnVtYmVyKSA9PiBzdHJpbmcpIHwgbnVsbDtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElSdWxlck9wdGlvbiB7XG4gICAgICAgIHJlYWRvbmx5IGNvbHVtbjogbnVtYmVyO1xuICAgICAgICByZWFkb25seSBjb2xvcjogc3RyaW5nIHwgbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIGVkaXRvciBzY3JvbGxiYXJzXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJRWRpdG9yU2Nyb2xsYmFyT3B0aW9ucyB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgc2l6ZSBvZiBhcnJvd3MgKGlmIGRpc3BsYXllZCkuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIDExLlxuICAgICAgICAgKiAqKk5PVEUqKjogVGhpcyBvcHRpb24gY2Fubm90IGJlIHVwZGF0ZWQgdXNpbmcgYHVwZGF0ZU9wdGlvbnMoKWBcbiAgICAgICAgICovXG4gICAgICAgIGFycm93U2l6ZT86IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbmRlciB2ZXJ0aWNhbCBzY3JvbGxiYXIuXG4gICAgICAgICAqIERlZmF1bHRzIHRvICdhdXRvJy5cbiAgICAgICAgICovXG4gICAgICAgIHZlcnRpY2FsPzogJ2F1dG8nIHwgJ3Zpc2libGUnIHwgJ2hpZGRlbic7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW5kZXIgaG9yaXpvbnRhbCBzY3JvbGxiYXIuXG4gICAgICAgICAqIERlZmF1bHRzIHRvICdhdXRvJy5cbiAgICAgICAgICovXG4gICAgICAgIGhvcml6b250YWw/OiAnYXV0bycgfCAndmlzaWJsZScgfCAnaGlkZGVuJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhc3QgaG9yaXpvbnRhbCBhbmQgdmVydGljYWwgc2hhZG93cyB3aGVuIHRoZSBjb250ZW50IGlzIHNjcm9sbGVkLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAgICAgKiAqKk5PVEUqKjogVGhpcyBvcHRpb24gY2Fubm90IGJlIHVwZGF0ZWQgdXNpbmcgYHVwZGF0ZU9wdGlvbnMoKWBcbiAgICAgICAgICovXG4gICAgICAgIHVzZVNoYWRvd3M/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVuZGVyIGFycm93cyBhdCB0aGUgdG9wIGFuZCBib3R0b20gb2YgdGhlIHZlcnRpY2FsIHNjcm9sbGJhci5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAgICAgICAqICoqTk9URSoqOiBUaGlzIG9wdGlvbiBjYW5ub3QgYmUgdXBkYXRlZCB1c2luZyBgdXBkYXRlT3B0aW9ucygpYFxuICAgICAgICAgKi9cbiAgICAgICAgdmVydGljYWxIYXNBcnJvd3M/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVuZGVyIGFycm93cyBhdCB0aGUgbGVmdCBhbmQgcmlnaHQgb2YgdGhlIGhvcml6b250YWwgc2Nyb2xsYmFyLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgICAgICogKipOT1RFKio6IFRoaXMgb3B0aW9uIGNhbm5vdCBiZSB1cGRhdGVkIHVzaW5nIGB1cGRhdGVPcHRpb25zKClgXG4gICAgICAgICAqL1xuICAgICAgICBob3Jpem9udGFsSGFzQXJyb3dzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIExpc3RlbiB0byBtb3VzZSB3aGVlbCBldmVudHMgYW5kIHJlYWN0IHRvIHRoZW0gYnkgc2Nyb2xsaW5nLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAgICAgKi9cbiAgICAgICAgaGFuZGxlTW91c2VXaGVlbD86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbHdheXMgY29uc3VtZSBtb3VzZSB3aGVlbCBldmVudHMgKGFsd2F5cyBjYWxsIHByZXZlbnREZWZhdWx0KCkgYW5kIHN0b3BQcm9wYWdhdGlvbigpIG9uIHRoZSBicm93c2VyIGV2ZW50cykuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgICAqICoqTk9URSoqOiBUaGlzIG9wdGlvbiBjYW5ub3QgYmUgdXBkYXRlZCB1c2luZyBgdXBkYXRlT3B0aW9ucygpYFxuICAgICAgICAgKi9cbiAgICAgICAgYWx3YXlzQ29uc3VtZU1vdXNlV2hlZWw/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogSGVpZ2h0IGluIHBpeGVscyBmb3IgdGhlIGhvcml6b250YWwgc2Nyb2xsYmFyLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byAxMCAocHgpLlxuICAgICAgICAgKi9cbiAgICAgICAgaG9yaXpvbnRhbFNjcm9sbGJhclNpemU/OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaWR0aCBpbiBwaXhlbHMgZm9yIHRoZSB2ZXJ0aWNhbCBzY3JvbGxiYXIuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIDEwIChweCkuXG4gICAgICAgICAqL1xuICAgICAgICB2ZXJ0aWNhbFNjcm9sbGJhclNpemU/OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaWR0aCBpbiBwaXhlbHMgZm9yIHRoZSB2ZXJ0aWNhbCBzbGlkZXIuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIGB2ZXJ0aWNhbFNjcm9sbGJhclNpemVgLlxuICAgICAgICAgKiAqKk5PVEUqKjogVGhpcyBvcHRpb24gY2Fubm90IGJlIHVwZGF0ZWQgdXNpbmcgYHVwZGF0ZU9wdGlvbnMoKWBcbiAgICAgICAgICovXG4gICAgICAgIHZlcnRpY2FsU2xpZGVyU2l6ZT86IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhlaWdodCBpbiBwaXhlbHMgZm9yIHRoZSBob3Jpem9udGFsIHNsaWRlci5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gYGhvcml6b250YWxTY3JvbGxiYXJTaXplYC5cbiAgICAgICAgICogKipOT1RFKio6IFRoaXMgb3B0aW9uIGNhbm5vdCBiZSB1cGRhdGVkIHVzaW5nIGB1cGRhdGVPcHRpb25zKClgXG4gICAgICAgICAqL1xuICAgICAgICBob3Jpem9udGFsU2xpZGVyU2l6ZT86IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNjcm9sbCBndXR0ZXIgY2xpY2tzIG1vdmUgYnkgcGFnZSB2cyBqdW1wIHRvIHBvc2l0aW9uLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIHNjcm9sbEJ5UGFnZT86IGJvb2xlYW47XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBJbnRlcm5hbEVkaXRvclNjcm9sbGJhck9wdGlvbnMge1xuICAgICAgICByZWFkb25seSBhcnJvd1NpemU6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgdmVydGljYWw6IFNjcm9sbGJhclZpc2liaWxpdHk7XG4gICAgICAgIHJlYWRvbmx5IGhvcml6b250YWw6IFNjcm9sbGJhclZpc2liaWxpdHk7XG4gICAgICAgIHJlYWRvbmx5IHVzZVNoYWRvd3M6IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IHZlcnRpY2FsSGFzQXJyb3dzOiBib29sZWFuO1xuICAgICAgICByZWFkb25seSBob3Jpem9udGFsSGFzQXJyb3dzOiBib29sZWFuO1xuICAgICAgICByZWFkb25seSBoYW5kbGVNb3VzZVdoZWVsOiBib29sZWFuO1xuICAgICAgICByZWFkb25seSBhbHdheXNDb25zdW1lTW91c2VXaGVlbDogYm9vbGVhbjtcbiAgICAgICAgcmVhZG9ubHkgaG9yaXpvbnRhbFNjcm9sbGJhclNpemU6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgaG9yaXpvbnRhbFNsaWRlclNpemU6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgdmVydGljYWxTY3JvbGxiYXJTaXplOiBudW1iZXI7XG4gICAgICAgIHJlYWRvbmx5IHZlcnRpY2FsU2xpZGVyU2l6ZTogbnVtYmVyO1xuICAgICAgICByZWFkb25seSBzY3JvbGxCeVBhZ2U6IGJvb2xlYW47XG4gICAgfVxuXG4gICAgZXhwb3J0IHR5cGUgSW5VbnRydXN0ZWRXb3Jrc3BhY2UgPSAnaW5VbnRydXN0ZWRXb3Jrc3BhY2UnO1xuXG4gICAgLyoqXG4gICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB1bmljb2RlIGhpZ2hsaWdodGluZy5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElVbmljb2RlSGlnaGxpZ2h0T3B0aW9ucyB7XG4gICAgICAgIG5vbkJhc2ljQVNDSUk/OiBib29sZWFuIHwgSW5VbnRydXN0ZWRXb3Jrc3BhY2U7XG4gICAgICAgIGludmlzaWJsZUNoYXJhY3RlcnM/OiBib29sZWFuO1xuICAgICAgICBhbWJpZ3VvdXNDaGFyYWN0ZXJzPzogYm9vbGVhbjtcbiAgICAgICAgaW5jbHVkZUNvbW1lbnRzPzogYm9vbGVhbiB8IEluVW50cnVzdGVkV29ya3NwYWNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBtYXAgb2YgYWxsb3dlZCBjaGFyYWN0ZXJzICh0cnVlOiBhbGxvd2VkKS5cbiAgICAgICAgKi9cbiAgICAgICAgYWxsb3dlZENoYXJhY3RlcnM/OiBSZWNvcmQ8c3RyaW5nLCB0cnVlPjtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElJbmxpbmVTdWdnZXN0T3B0aW9ucyB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmFibGUgb3IgZGlzYWJsZSB0aGUgcmVuZGVyaW5nIG9mIGF1dG9tYXRpYyBpbmxpbmUgY29tcGxldGlvbnMuXG4gICAgICAgICovXG4gICAgICAgIGVuYWJsZWQ/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29uZmlndXJlcyB0aGUgbW9kZS5cbiAgICAgICAgICogVXNlIGBwcmVmaXhgIHRvIG9ubHkgc2hvdyBnaG9zdCB0ZXh0IGlmIHRoZSB0ZXh0IHRvIHJlcGxhY2UgaXMgYSBwcmVmaXggb2YgdGhlIHN1Z2dlc3Rpb24gdGV4dC5cbiAgICAgICAgICogVXNlIGBzdWJ3b3JkYCB0byBvbmx5IHNob3cgZ2hvc3QgdGV4dCBpZiB0aGUgcmVwbGFjZSB0ZXh0IGlzIGEgc3Vid29yZCBvZiB0aGUgc3VnZ2VzdGlvbiB0ZXh0LlxuICAgICAgICAgKiBVc2UgYHN1YndvcmRTbWFydGAgdG8gb25seSBzaG93IGdob3N0IHRleHQgaWYgdGhlIHJlcGxhY2UgdGV4dCBpcyBhIHN1YndvcmQgb2YgdGhlIHN1Z2dlc3Rpb24gdGV4dCwgYnV0IHRoZSBzdWJ3b3JkIG11c3Qgc3RhcnQgYWZ0ZXIgdGhlIGN1cnNvciBwb3NpdGlvbi5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gYHByZWZpeGAuXG4gICAgICAgICovXG4gICAgICAgIG1vZGU/OiAncHJlZml4JyB8ICdzdWJ3b3JkJyB8ICdzdWJ3b3JkU21hcnQnO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUJyYWNrZXRQYWlyQ29sb3JpemF0aW9uT3B0aW9ucyB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmFibGUgb3IgZGlzYWJsZSBicmFja2V0IHBhaXIgY29sb3JpemF0aW9uLlxuICAgICAgICAqL1xuICAgICAgICBlbmFibGVkPzogYm9vbGVhbjtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElHdWlkZXNPcHRpb25zIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuYWJsZSByZW5kZXJpbmcgb2YgYnJhY2tldCBwYWlyIGd1aWRlcy5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAgICAgICovXG4gICAgICAgIGJyYWNrZXRQYWlycz86IGJvb2xlYW4gfCAnYWN0aXZlJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuYWJsZSByZW5kZXJpbmcgb2YgdmVydGljYWwgYnJhY2tldCBwYWlyIGd1aWRlcy5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gJ2FjdGl2ZScuXG4gICAgICAgICAqL1xuICAgICAgICBicmFja2V0UGFpcnNIb3Jpem9udGFsPzogYm9vbGVhbiB8ICdhY3RpdmUnO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlIGhpZ2hsaWdodGluZyBvZiB0aGUgYWN0aXZlIGJyYWNrZXQgcGFpci5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgICAgKi9cbiAgICAgICAgaGlnaGxpZ2h0QWN0aXZlQnJhY2tldFBhaXI/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlIHJlbmRlcmluZyBvZiBpbmRlbnQgZ3VpZGVzLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAgICAgKi9cbiAgICAgICAgaW5kZW50YXRpb24/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlIGhpZ2hsaWdodGluZyBvZiB0aGUgYWN0aXZlIGluZGVudCBndWlkZS5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGhpZ2hsaWdodEFjdGl2ZUluZGVudGF0aW9uPzogYm9vbGVhbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIGVkaXRvciBzdWdnZXN0IHdpZGdldFxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVN1Z2dlc3RPcHRpb25zIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE92ZXJ3cml0ZSB3b3JkIGVuZHMgb24gYWNjZXB0LiBEZWZhdWx0IHRvIGZhbHNlLlxuICAgICAgICAgKi9cbiAgICAgICAgaW5zZXJ0TW9kZT86ICdpbnNlcnQnIHwgJ3JlcGxhY2UnO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlIGdyYWNlZnVsIG1hdGNoaW5nLiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAgICAgKi9cbiAgICAgICAgZmlsdGVyR3JhY2VmdWw/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJldmVudCBxdWljayBzdWdnZXN0aW9ucyB3aGVuIGEgc25pcHBldCBpcyBhY3RpdmUuIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgICAqL1xuICAgICAgICBzbmlwcGV0c1ByZXZlbnRRdWlja1N1Z2dlc3Rpb25zPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZhdm9ycyB3b3JkcyB0aGF0IGFwcGVhciBjbG9zZSB0byB0aGUgY3Vyc29yLlxuICAgICAgICAgKi9cbiAgICAgICAgbG9jYWxpdHlCb251cz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmFibGUgdXNpbmcgZ2xvYmFsIHN0b3JhZ2UgZm9yIHJlbWVtYmVyaW5nIHN1Z2dlc3Rpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgc2hhcmVTdWdnZXN0U2VsZWN0aW9ucz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmFibGUgb3IgZGlzYWJsZSBpY29ucyBpbiBzdWdnZXN0aW9ucy4gRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIHNob3dJY29ucz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmFibGUgb3IgZGlzYWJsZSB0aGUgc3VnZ2VzdCBzdGF0dXMgYmFyLlxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd1N0YXR1c0Jhcj86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmFibGUgb3IgZGlzYWJsZSB0aGUgcmVuZGVyaW5nIG9mIHRoZSBzdWdnZXN0aW9uIHByZXZpZXcuXG4gICAgICAgICAqL1xuICAgICAgICBwcmV2aWV3PzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbmZpZ3VyZXMgdGhlIG1vZGUgb2YgdGhlIHByZXZpZXcuXG4gICAgICAgICovXG4gICAgICAgIHByZXZpZXdNb2RlPzogJ3ByZWZpeCcgfCAnc3Vid29yZCcgfCAnc3Vid29yZFNtYXJ0JztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3cgZGV0YWlscyBpbmxpbmUgd2l0aCB0aGUgbGFiZWwuIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgICAqL1xuICAgICAgICBzaG93SW5saW5lRGV0YWlscz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaG93IG1ldGhvZC1zdWdnZXN0aW9ucy5cbiAgICAgICAgICovXG4gICAgICAgIHNob3dNZXRob2RzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3cgZnVuY3Rpb24tc3VnZ2VzdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICBzaG93RnVuY3Rpb25zPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3cgY29uc3RydWN0b3Itc3VnZ2VzdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICBzaG93Q29uc3RydWN0b3JzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3cgZGVwcmVjYXRlZC1zdWdnZXN0aW9ucy5cbiAgICAgICAgICovXG4gICAgICAgIHNob3dEZXByZWNhdGVkPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3cgZmllbGQtc3VnZ2VzdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICBzaG93RmllbGRzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3cgdmFyaWFibGUtc3VnZ2VzdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICBzaG93VmFyaWFibGVzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3cgY2xhc3Mtc3VnZ2VzdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICBzaG93Q2xhc3Nlcz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaG93IHN0cnVjdC1zdWdnZXN0aW9ucy5cbiAgICAgICAgICovXG4gICAgICAgIHNob3dTdHJ1Y3RzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3cgaW50ZXJmYWNlLXN1Z2dlc3Rpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd0ludGVyZmFjZXM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2hvdyBtb2R1bGUtc3VnZ2VzdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICBzaG93TW9kdWxlcz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaG93IHByb3BlcnR5LXN1Z2dlc3Rpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd1Byb3BlcnRpZXM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2hvdyBldmVudC1zdWdnZXN0aW9ucy5cbiAgICAgICAgICovXG4gICAgICAgIHNob3dFdmVudHM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2hvdyBvcGVyYXRvci1zdWdnZXN0aW9ucy5cbiAgICAgICAgICovXG4gICAgICAgIHNob3dPcGVyYXRvcnM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2hvdyB1bml0LXN1Z2dlc3Rpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd1VuaXRzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3cgdmFsdWUtc3VnZ2VzdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICBzaG93VmFsdWVzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3cgY29uc3RhbnQtc3VnZ2VzdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICBzaG93Q29uc3RhbnRzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3cgZW51bS1zdWdnZXN0aW9ucy5cbiAgICAgICAgICovXG4gICAgICAgIHNob3dFbnVtcz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaG93IGVudW1NZW1iZXItc3VnZ2VzdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICBzaG93RW51bU1lbWJlcnM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2hvdyBrZXl3b3JkLXN1Z2dlc3Rpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd0tleXdvcmRzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3cgdGV4dC1zdWdnZXN0aW9ucy5cbiAgICAgICAgICovXG4gICAgICAgIHNob3dXb3Jkcz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaG93IGNvbG9yLXN1Z2dlc3Rpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd0NvbG9ycz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaG93IGZpbGUtc3VnZ2VzdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICBzaG93RmlsZXM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2hvdyByZWZlcmVuY2Utc3VnZ2VzdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICBzaG93UmVmZXJlbmNlcz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaG93IGZvbGRlci1zdWdnZXN0aW9ucy5cbiAgICAgICAgICovXG4gICAgICAgIHNob3dGb2xkZXJzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3cgdHlwZVBhcmFtZXRlci1zdWdnZXN0aW9ucy5cbiAgICAgICAgICovXG4gICAgICAgIHNob3dUeXBlUGFyYW1ldGVycz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaG93IGlzc3VlLXN1Z2dlc3Rpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd0lzc3Vlcz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaG93IHVzZXItc3VnZ2VzdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICBzaG93VXNlcnM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2hvdyBzbmlwcGV0LXN1Z2dlc3Rpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd1NuaXBwZXRzPzogYm9vbGVhbjtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElTbWFydFNlbGVjdE9wdGlvbnMge1xuICAgICAgICBzZWxlY3RMZWFkaW5nQW5kVHJhaWxpbmdXaGl0ZXNwYWNlPzogYm9vbGVhbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmliZXMgaG93IHRvIGluZGVudCB3cmFwcGVkIGxpbmVzLlxuICAgICAqL1xuICAgIGV4cG9ydCBlbnVtIFdyYXBwaW5nSW5kZW50IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE5vIGluZGVudGF0aW9uID0+IHdyYXBwZWQgbGluZXMgYmVnaW4gYXQgY29sdW1uIDEuXG4gICAgICAgICAqL1xuICAgICAgICBOb25lID0gMCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNhbWUgPT4gd3JhcHBlZCBsaW5lcyBnZXQgdGhlIHNhbWUgaW5kZW50YXRpb24gYXMgdGhlIHBhcmVudC5cbiAgICAgICAgICovXG4gICAgICAgIFNhbWUgPSAxLFxuICAgICAgICAvKipcbiAgICAgICAgICogSW5kZW50ID0+IHdyYXBwZWQgbGluZXMgZ2V0ICsxIGluZGVudGF0aW9uIHRvd2FyZCB0aGUgcGFyZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgSW5kZW50ID0gMixcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZXBJbmRlbnQgPT4gd3JhcHBlZCBsaW5lcyBnZXQgKzIgaW5kZW50YXRpb24gdG93YXJkIHRoZSBwYXJlbnQuXG4gICAgICAgICAqL1xuICAgICAgICBEZWVwSW5kZW50ID0gM1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRWRpdG9yV3JhcHBpbmdJbmZvIHtcbiAgICAgICAgcmVhZG9ubHkgaXNEb21pbmF0ZWRCeUxvbmdMaW5lczogYm9vbGVhbjtcbiAgICAgICAgcmVhZG9ubHkgaXNXb3JkV3JhcE1pbmlmaWVkOiBib29sZWFuO1xuICAgICAgICByZWFkb25seSBpc1ZpZXdwb3J0V3JhcHBpbmc6IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IHdyYXBwaW5nQ29sdW1uOiBudW1iZXI7XG4gICAgfVxuXG4gICAgZXhwb3J0IGVudW0gRWRpdG9yT3B0aW9uIHtcbiAgICAgICAgYWNjZXB0U3VnZ2VzdGlvbk9uQ29tbWl0Q2hhcmFjdGVyID0gMCxcbiAgICAgICAgYWNjZXB0U3VnZ2VzdGlvbk9uRW50ZXIgPSAxLFxuICAgICAgICBhY2Nlc3NpYmlsaXR5U3VwcG9ydCA9IDIsXG4gICAgICAgIGFjY2Vzc2liaWxpdHlQYWdlU2l6ZSA9IDMsXG4gICAgICAgIGFyaWFMYWJlbCA9IDQsXG4gICAgICAgIGF1dG9DbG9zaW5nQnJhY2tldHMgPSA1LFxuICAgICAgICBhdXRvQ2xvc2luZ0RlbGV0ZSA9IDYsXG4gICAgICAgIGF1dG9DbG9zaW5nT3ZlcnR5cGUgPSA3LFxuICAgICAgICBhdXRvQ2xvc2luZ1F1b3RlcyA9IDgsXG4gICAgICAgIGF1dG9JbmRlbnQgPSA5LFxuICAgICAgICBhdXRvbWF0aWNMYXlvdXQgPSAxMCxcbiAgICAgICAgYXV0b1N1cnJvdW5kID0gMTEsXG4gICAgICAgIGJyYWNrZXRQYWlyQ29sb3JpemF0aW9uID0gMTIsXG4gICAgICAgIGd1aWRlcyA9IDEzLFxuICAgICAgICBjb2RlTGVucyA9IDE0LFxuICAgICAgICBjb2RlTGVuc0ZvbnRGYW1pbHkgPSAxNSxcbiAgICAgICAgY29kZUxlbnNGb250U2l6ZSA9IDE2LFxuICAgICAgICBjb2xvckRlY29yYXRvcnMgPSAxNyxcbiAgICAgICAgY29sdW1uU2VsZWN0aW9uID0gMTgsXG4gICAgICAgIGNvbW1lbnRzID0gMTksXG4gICAgICAgIGNvbnRleHRtZW51ID0gMjAsXG4gICAgICAgIGNvcHlXaXRoU3ludGF4SGlnaGxpZ2h0aW5nID0gMjEsXG4gICAgICAgIGN1cnNvckJsaW5raW5nID0gMjIsXG4gICAgICAgIGN1cnNvclNtb290aENhcmV0QW5pbWF0aW9uID0gMjMsXG4gICAgICAgIGN1cnNvclN0eWxlID0gMjQsXG4gICAgICAgIGN1cnNvclN1cnJvdW5kaW5nTGluZXMgPSAyNSxcbiAgICAgICAgY3Vyc29yU3Vycm91bmRpbmdMaW5lc1N0eWxlID0gMjYsXG4gICAgICAgIGN1cnNvcldpZHRoID0gMjcsXG4gICAgICAgIGRpc2FibGVMYXllckhpbnRpbmcgPSAyOCxcbiAgICAgICAgZGlzYWJsZU1vbm9zcGFjZU9wdGltaXphdGlvbnMgPSAyOSxcbiAgICAgICAgZG9tUmVhZE9ubHkgPSAzMCxcbiAgICAgICAgZHJhZ0FuZERyb3AgPSAzMSxcbiAgICAgICAgZW1wdHlTZWxlY3Rpb25DbGlwYm9hcmQgPSAzMixcbiAgICAgICAgZXh0cmFFZGl0b3JDbGFzc05hbWUgPSAzMyxcbiAgICAgICAgZmFzdFNjcm9sbFNlbnNpdGl2aXR5ID0gMzQsXG4gICAgICAgIGZpbmQgPSAzNSxcbiAgICAgICAgZml4ZWRPdmVyZmxvd1dpZGdldHMgPSAzNixcbiAgICAgICAgZm9sZGluZyA9IDM3LFxuICAgICAgICBmb2xkaW5nU3RyYXRlZ3kgPSAzOCxcbiAgICAgICAgZm9sZGluZ0hpZ2hsaWdodCA9IDM5LFxuICAgICAgICBmb2xkaW5nSW1wb3J0c0J5RGVmYXVsdCA9IDQwLFxuICAgICAgICB1bmZvbGRPbkNsaWNrQWZ0ZXJFbmRPZkxpbmUgPSA0MSxcbiAgICAgICAgZm9udEZhbWlseSA9IDQyLFxuICAgICAgICBmb250SW5mbyA9IDQzLFxuICAgICAgICBmb250TGlnYXR1cmVzID0gNDQsXG4gICAgICAgIGZvbnRTaXplID0gNDUsXG4gICAgICAgIGZvbnRXZWlnaHQgPSA0NixcbiAgICAgICAgZm9ybWF0T25QYXN0ZSA9IDQ3LFxuICAgICAgICBmb3JtYXRPblR5cGUgPSA0OCxcbiAgICAgICAgZ2x5cGhNYXJnaW4gPSA0OSxcbiAgICAgICAgZ290b0xvY2F0aW9uID0gNTAsXG4gICAgICAgIGhpZGVDdXJzb3JJbk92ZXJ2aWV3UnVsZXIgPSA1MSxcbiAgICAgICAgaG92ZXIgPSA1MixcbiAgICAgICAgaW5EaWZmRWRpdG9yID0gNTMsXG4gICAgICAgIGlubGluZVN1Z2dlc3QgPSA1NCxcbiAgICAgICAgbGV0dGVyU3BhY2luZyA9IDU1LFxuICAgICAgICBsaWdodGJ1bGIgPSA1NixcbiAgICAgICAgbGluZURlY29yYXRpb25zV2lkdGggPSA1NyxcbiAgICAgICAgbGluZUhlaWdodCA9IDU4LFxuICAgICAgICBsaW5lTnVtYmVycyA9IDU5LFxuICAgICAgICBsaW5lTnVtYmVyc01pbkNoYXJzID0gNjAsXG4gICAgICAgIGxpbmtlZEVkaXRpbmcgPSA2MSxcbiAgICAgICAgbGlua3MgPSA2MixcbiAgICAgICAgbWF0Y2hCcmFja2V0cyA9IDYzLFxuICAgICAgICBtaW5pbWFwID0gNjQsXG4gICAgICAgIG1vdXNlU3R5bGUgPSA2NSxcbiAgICAgICAgbW91c2VXaGVlbFNjcm9sbFNlbnNpdGl2aXR5ID0gNjYsXG4gICAgICAgIG1vdXNlV2hlZWxab29tID0gNjcsXG4gICAgICAgIG11bHRpQ3Vyc29yTWVyZ2VPdmVybGFwcGluZyA9IDY4LFxuICAgICAgICBtdWx0aUN1cnNvck1vZGlmaWVyID0gNjksXG4gICAgICAgIG11bHRpQ3Vyc29yUGFzdGUgPSA3MCxcbiAgICAgICAgb2NjdXJyZW5jZXNIaWdobGlnaHQgPSA3MSxcbiAgICAgICAgb3ZlcnZpZXdSdWxlckJvcmRlciA9IDcyLFxuICAgICAgICBvdmVydmlld1J1bGVyTGFuZXMgPSA3MyxcbiAgICAgICAgcGFkZGluZyA9IDc0LFxuICAgICAgICBwYXJhbWV0ZXJIaW50cyA9IDc1LFxuICAgICAgICBwZWVrV2lkZ2V0RGVmYXVsdEZvY3VzID0gNzYsXG4gICAgICAgIGRlZmluaXRpb25MaW5rT3BlbnNJblBlZWsgPSA3NyxcbiAgICAgICAgcXVpY2tTdWdnZXN0aW9ucyA9IDc4LFxuICAgICAgICBxdWlja1N1Z2dlc3Rpb25zRGVsYXkgPSA3OSxcbiAgICAgICAgcmVhZE9ubHkgPSA4MCxcbiAgICAgICAgcmVuYW1lT25UeXBlID0gODEsXG4gICAgICAgIHJlbmRlckNvbnRyb2xDaGFyYWN0ZXJzID0gODIsXG4gICAgICAgIHJlbmRlckZpbmFsTmV3bGluZSA9IDgzLFxuICAgICAgICByZW5kZXJMaW5lSGlnaGxpZ2h0ID0gODQsXG4gICAgICAgIHJlbmRlckxpbmVIaWdobGlnaHRPbmx5V2hlbkZvY3VzID0gODUsXG4gICAgICAgIHJlbmRlclZhbGlkYXRpb25EZWNvcmF0aW9ucyA9IDg2LFxuICAgICAgICByZW5kZXJXaGl0ZXNwYWNlID0gODcsXG4gICAgICAgIHJldmVhbEhvcml6b250YWxSaWdodFBhZGRpbmcgPSA4OCxcbiAgICAgICAgcm91bmRlZFNlbGVjdGlvbiA9IDg5LFxuICAgICAgICBydWxlcnMgPSA5MCxcbiAgICAgICAgc2Nyb2xsYmFyID0gOTEsXG4gICAgICAgIHNjcm9sbEJleW9uZExhc3RDb2x1bW4gPSA5MixcbiAgICAgICAgc2Nyb2xsQmV5b25kTGFzdExpbmUgPSA5MyxcbiAgICAgICAgc2Nyb2xsUHJlZG9taW5hbnRBeGlzID0gOTQsXG4gICAgICAgIHNlbGVjdGlvbkNsaXBib2FyZCA9IDk1LFxuICAgICAgICBzZWxlY3Rpb25IaWdobGlnaHQgPSA5NixcbiAgICAgICAgc2VsZWN0T25MaW5lTnVtYmVycyA9IDk3LFxuICAgICAgICBzaG93Rm9sZGluZ0NvbnRyb2xzID0gOTgsXG4gICAgICAgIHNob3dVbnVzZWQgPSA5OSxcbiAgICAgICAgc25pcHBldFN1Z2dlc3Rpb25zID0gMTAwLFxuICAgICAgICBzbWFydFNlbGVjdCA9IDEwMSxcbiAgICAgICAgc21vb3RoU2Nyb2xsaW5nID0gMTAyLFxuICAgICAgICBzdGlja3lUYWJTdG9wcyA9IDEwMyxcbiAgICAgICAgc3RvcFJlbmRlcmluZ0xpbmVBZnRlciA9IDEwNCxcbiAgICAgICAgc3VnZ2VzdCA9IDEwNSxcbiAgICAgICAgc3VnZ2VzdEZvbnRTaXplID0gMTA2LFxuICAgICAgICBzdWdnZXN0TGluZUhlaWdodCA9IDEwNyxcbiAgICAgICAgc3VnZ2VzdE9uVHJpZ2dlckNoYXJhY3RlcnMgPSAxMDgsXG4gICAgICAgIHN1Z2dlc3RTZWxlY3Rpb24gPSAxMDksXG4gICAgICAgIHRhYkNvbXBsZXRpb24gPSAxMTAsXG4gICAgICAgIHRhYkluZGV4ID0gMTExLFxuICAgICAgICB1bmljb2RlSGlnaGxpZ2h0aW5nID0gMTEyLFxuICAgICAgICB1bnVzdWFsTGluZVRlcm1pbmF0b3JzID0gMTEzLFxuICAgICAgICB1c2VTaGFkb3dET00gPSAxMTQsXG4gICAgICAgIHVzZVRhYlN0b3BzID0gMTE1LFxuICAgICAgICB3b3JkU2VwYXJhdG9ycyA9IDExNixcbiAgICAgICAgd29yZFdyYXAgPSAxMTcsXG4gICAgICAgIHdvcmRXcmFwQnJlYWtBZnRlckNoYXJhY3RlcnMgPSAxMTgsXG4gICAgICAgIHdvcmRXcmFwQnJlYWtCZWZvcmVDaGFyYWN0ZXJzID0gMTE5LFxuICAgICAgICB3b3JkV3JhcENvbHVtbiA9IDEyMCxcbiAgICAgICAgd29yZFdyYXBPdmVycmlkZTEgPSAxMjEsXG4gICAgICAgIHdvcmRXcmFwT3ZlcnJpZGUyID0gMTIyLFxuICAgICAgICB3cmFwcGluZ0luZGVudCA9IDEyMyxcbiAgICAgICAgd3JhcHBpbmdTdHJhdGVneSA9IDEyNCxcbiAgICAgICAgc2hvd0RlcHJlY2F0ZWQgPSAxMjUsXG4gICAgICAgIGlubGF5SGludHMgPSAxMjYsXG4gICAgICAgIGVkaXRvckNsYXNzTmFtZSA9IDEyNyxcbiAgICAgICAgcGl4ZWxSYXRpbyA9IDEyOCxcbiAgICAgICAgdGFiRm9jdXNNb2RlID0gMTI5LFxuICAgICAgICBsYXlvdXRJbmZvID0gMTMwLFxuICAgICAgICB3cmFwcGluZ0luZm8gPSAxMzFcbiAgICB9XG5cbiAgICBleHBvcnQgY29uc3QgRWRpdG9yT3B0aW9uczoge1xuICAgICAgICBhY2NlcHRTdWdnZXN0aW9uT25Db21taXRDaGFyYWN0ZXI6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLmFjY2VwdFN1Z2dlc3Rpb25PbkNvbW1pdENoYXJhY3RlciwgYm9vbGVhbj47XG4gICAgICAgIGFjY2VwdFN1Z2dlc3Rpb25PbkVudGVyOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5hY2NlcHRTdWdnZXN0aW9uT25FbnRlciwgJ29uJyB8ICdvZmYnIHwgJ3NtYXJ0Jz47XG4gICAgICAgIGFjY2Vzc2liaWxpdHlTdXBwb3J0OiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5hY2Nlc3NpYmlsaXR5U3VwcG9ydCwgQWNjZXNzaWJpbGl0eVN1cHBvcnQ+O1xuICAgICAgICBhY2Nlc3NpYmlsaXR5UGFnZVNpemU6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLmFjY2Vzc2liaWxpdHlQYWdlU2l6ZSwgbnVtYmVyPjtcbiAgICAgICAgYXJpYUxhYmVsOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5hcmlhTGFiZWwsIHN0cmluZz47XG4gICAgICAgIGF1dG9DbG9zaW5nQnJhY2tldHM6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLmF1dG9DbG9zaW5nQnJhY2tldHMsICdhbHdheXMnIHwgJ2xhbmd1YWdlRGVmaW5lZCcgfCAnYmVmb3JlV2hpdGVzcGFjZScgfCAnbmV2ZXInPjtcbiAgICAgICAgYXV0b0Nsb3NpbmdEZWxldGU6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLmF1dG9DbG9zaW5nRGVsZXRlLCAnYWx3YXlzJyB8ICduZXZlcicgfCAnYXV0byc+O1xuICAgICAgICBhdXRvQ2xvc2luZ092ZXJ0eXBlOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5hdXRvQ2xvc2luZ092ZXJ0eXBlLCAnYWx3YXlzJyB8ICduZXZlcicgfCAnYXV0byc+O1xuICAgICAgICBhdXRvQ2xvc2luZ1F1b3RlczogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uYXV0b0Nsb3NpbmdRdW90ZXMsICdhbHdheXMnIHwgJ2xhbmd1YWdlRGVmaW5lZCcgfCAnYmVmb3JlV2hpdGVzcGFjZScgfCAnbmV2ZXInPjtcbiAgICAgICAgYXV0b0luZGVudDogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uYXV0b0luZGVudCwgRWRpdG9yQXV0b0luZGVudFN0cmF0ZWd5PjtcbiAgICAgICAgYXV0b21hdGljTGF5b3V0OiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5hdXRvbWF0aWNMYXlvdXQsIGJvb2xlYW4+O1xuICAgICAgICBhdXRvU3Vycm91bmQ6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLmF1dG9TdXJyb3VuZCwgJ2xhbmd1YWdlRGVmaW5lZCcgfCAnbmV2ZXInIHwgJ3F1b3RlcycgfCAnYnJhY2tldHMnPjtcbiAgICAgICAgYnJhY2tldFBhaXJDb2xvcml6YXRpb246IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLmJyYWNrZXRQYWlyQ29sb3JpemF0aW9uLCBSZWFkb25seTxSZXF1aXJlZDxJQnJhY2tldFBhaXJDb2xvcml6YXRpb25PcHRpb25zPj4+O1xuICAgICAgICBicmFja2V0UGFpckd1aWRlczogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uZ3VpZGVzLCBSZWFkb25seTxSZXF1aXJlZDxJR3VpZGVzT3B0aW9ucz4+PjtcbiAgICAgICAgc3RpY2t5VGFiU3RvcHM6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLnN0aWNreVRhYlN0b3BzLCBib29sZWFuPjtcbiAgICAgICAgY29kZUxlbnM6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLmNvZGVMZW5zLCBib29sZWFuPjtcbiAgICAgICAgY29kZUxlbnNGb250RmFtaWx5OiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5jb2RlTGVuc0ZvbnRGYW1pbHksIHN0cmluZz47XG4gICAgICAgIGNvZGVMZW5zRm9udFNpemU6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLmNvZGVMZW5zRm9udFNpemUsIG51bWJlcj47XG4gICAgICAgIGNvbG9yRGVjb3JhdG9yczogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uY29sb3JEZWNvcmF0b3JzLCBib29sZWFuPjtcbiAgICAgICAgY29sdW1uU2VsZWN0aW9uOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5jb2x1bW5TZWxlY3Rpb24sIGJvb2xlYW4+O1xuICAgICAgICBjb21tZW50czogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uY29tbWVudHMsIFJlYWRvbmx5PFJlcXVpcmVkPElFZGl0b3JDb21tZW50c09wdGlvbnM+Pj47XG4gICAgICAgIGNvbnRleHRtZW51OiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5jb250ZXh0bWVudSwgYm9vbGVhbj47XG4gICAgICAgIGNvcHlXaXRoU3ludGF4SGlnaGxpZ2h0aW5nOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5jb3B5V2l0aFN5bnRheEhpZ2hsaWdodGluZywgYm9vbGVhbj47XG4gICAgICAgIGN1cnNvckJsaW5raW5nOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5jdXJzb3JCbGlua2luZywgVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGU+O1xuICAgICAgICBjdXJzb3JTbW9vdGhDYXJldEFuaW1hdGlvbjogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uY3Vyc29yU21vb3RoQ2FyZXRBbmltYXRpb24sIGJvb2xlYW4+O1xuICAgICAgICBjdXJzb3JTdHlsZTogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uY3Vyc29yU3R5bGUsIFRleHRFZGl0b3JDdXJzb3JTdHlsZT47XG4gICAgICAgIGN1cnNvclN1cnJvdW5kaW5nTGluZXM6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLmN1cnNvclN1cnJvdW5kaW5nTGluZXMsIG51bWJlcj47XG4gICAgICAgIGN1cnNvclN1cnJvdW5kaW5nTGluZXNTdHlsZTogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uY3Vyc29yU3Vycm91bmRpbmdMaW5lc1N0eWxlLCAnZGVmYXVsdCcgfCAnYWxsJz47XG4gICAgICAgIGN1cnNvcldpZHRoOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5jdXJzb3JXaWR0aCwgbnVtYmVyPjtcbiAgICAgICAgZGlzYWJsZUxheWVySGludGluZzogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uZGlzYWJsZUxheWVySGludGluZywgYm9vbGVhbj47XG4gICAgICAgIGRpc2FibGVNb25vc3BhY2VPcHRpbWl6YXRpb25zOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5kaXNhYmxlTW9ub3NwYWNlT3B0aW1pemF0aW9ucywgYm9vbGVhbj47XG4gICAgICAgIGRvbVJlYWRPbmx5OiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5kb21SZWFkT25seSwgYm9vbGVhbj47XG4gICAgICAgIGRyYWdBbmREcm9wOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5kcmFnQW5kRHJvcCwgYm9vbGVhbj47XG4gICAgICAgIGVtcHR5U2VsZWN0aW9uQ2xpcGJvYXJkOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5lbXB0eVNlbGVjdGlvbkNsaXBib2FyZCwgYm9vbGVhbj47XG4gICAgICAgIGV4dHJhRWRpdG9yQ2xhc3NOYW1lOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5leHRyYUVkaXRvckNsYXNzTmFtZSwgc3RyaW5nPjtcbiAgICAgICAgZmFzdFNjcm9sbFNlbnNpdGl2aXR5OiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5mYXN0U2Nyb2xsU2Vuc2l0aXZpdHksIG51bWJlcj47XG4gICAgICAgIGZpbmQ6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLmZpbmQsIFJlYWRvbmx5PFJlcXVpcmVkPElFZGl0b3JGaW5kT3B0aW9ucz4+PjtcbiAgICAgICAgZml4ZWRPdmVyZmxvd1dpZGdldHM6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLmZpeGVkT3ZlcmZsb3dXaWRnZXRzLCBib29sZWFuPjtcbiAgICAgICAgZm9sZGluZzogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uZm9sZGluZywgYm9vbGVhbj47XG4gICAgICAgIGZvbGRpbmdTdHJhdGVneTogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uZm9sZGluZ1N0cmF0ZWd5LCAnYXV0bycgfCAnaW5kZW50YXRpb24nPjtcbiAgICAgICAgZm9sZGluZ0hpZ2hsaWdodDogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uZm9sZGluZ0hpZ2hsaWdodCwgYm9vbGVhbj47XG4gICAgICAgIGZvbGRpbmdJbXBvcnRzQnlEZWZhdWx0OiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5mb2xkaW5nSW1wb3J0c0J5RGVmYXVsdCwgYm9vbGVhbj47XG4gICAgICAgIHVuZm9sZE9uQ2xpY2tBZnRlckVuZE9mTGluZTogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24udW5mb2xkT25DbGlja0FmdGVyRW5kT2ZMaW5lLCBib29sZWFuPjtcbiAgICAgICAgZm9udEZhbWlseTogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uZm9udEZhbWlseSwgc3RyaW5nPjtcbiAgICAgICAgZm9udEluZm86IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLmZvbnRJbmZvLCBGb250SW5mbz47XG4gICAgICAgIGZvbnRMaWdhdHVyZXMyOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5mb250TGlnYXR1cmVzLCBzdHJpbmc+O1xuICAgICAgICBmb250U2l6ZTogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uZm9udFNpemUsIG51bWJlcj47XG4gICAgICAgIGZvbnRXZWlnaHQ6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLmZvbnRXZWlnaHQsIHN0cmluZz47XG4gICAgICAgIGZvcm1hdE9uUGFzdGU6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLmZvcm1hdE9uUGFzdGUsIGJvb2xlYW4+O1xuICAgICAgICBmb3JtYXRPblR5cGU6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLmZvcm1hdE9uVHlwZSwgYm9vbGVhbj47XG4gICAgICAgIGdseXBoTWFyZ2luOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5nbHlwaE1hcmdpbiwgYm9vbGVhbj47XG4gICAgICAgIGdvdG9Mb2NhdGlvbjogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uZ290b0xvY2F0aW9uLCBSZWFkb25seTxSZXF1aXJlZDxJR290b0xvY2F0aW9uT3B0aW9ucz4+PjtcbiAgICAgICAgaGlkZUN1cnNvckluT3ZlcnZpZXdSdWxlcjogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uaGlkZUN1cnNvckluT3ZlcnZpZXdSdWxlciwgYm9vbGVhbj47XG4gICAgICAgIGhvdmVyOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5ob3ZlciwgUmVhZG9ubHk8UmVxdWlyZWQ8SUVkaXRvckhvdmVyT3B0aW9ucz4+PjtcbiAgICAgICAgaW5EaWZmRWRpdG9yOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5pbkRpZmZFZGl0b3IsIGJvb2xlYW4+O1xuICAgICAgICBsZXR0ZXJTcGFjaW5nOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5sZXR0ZXJTcGFjaW5nLCBudW1iZXI+O1xuICAgICAgICBsaWdodGJ1bGI6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLmxpZ2h0YnVsYiwgUmVhZG9ubHk8UmVxdWlyZWQ8SUVkaXRvckxpZ2h0YnVsYk9wdGlvbnM+Pj47XG4gICAgICAgIGxpbmVEZWNvcmF0aW9uc1dpZHRoOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5saW5lRGVjb3JhdGlvbnNXaWR0aCwgc3RyaW5nIHwgbnVtYmVyPjtcbiAgICAgICAgbGluZUhlaWdodDogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24ubGluZUhlaWdodCwgbnVtYmVyPjtcbiAgICAgICAgbGluZU51bWJlcnM6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLmxpbmVOdW1iZXJzLCBJbnRlcm5hbEVkaXRvclJlbmRlckxpbmVOdW1iZXJzT3B0aW9ucz47XG4gICAgICAgIGxpbmVOdW1iZXJzTWluQ2hhcnM6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLmxpbmVOdW1iZXJzTWluQ2hhcnMsIG51bWJlcj47XG4gICAgICAgIGxpbmtlZEVkaXRpbmc6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLmxpbmtlZEVkaXRpbmcsIGJvb2xlYW4+O1xuICAgICAgICBsaW5rczogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24ubGlua3MsIGJvb2xlYW4+O1xuICAgICAgICBtYXRjaEJyYWNrZXRzOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5tYXRjaEJyYWNrZXRzLCAnYWx3YXlzJyB8ICduZXZlcicgfCAnbmVhcic+O1xuICAgICAgICBtaW5pbWFwOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5taW5pbWFwLCBSZWFkb25seTxSZXF1aXJlZDxJRWRpdG9yTWluaW1hcE9wdGlvbnM+Pj47XG4gICAgICAgIG1vdXNlU3R5bGU6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLm1vdXNlU3R5bGUsICdkZWZhdWx0JyB8ICd0ZXh0JyB8ICdjb3B5Jz47XG4gICAgICAgIG1vdXNlV2hlZWxTY3JvbGxTZW5zaXRpdml0eTogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24ubW91c2VXaGVlbFNjcm9sbFNlbnNpdGl2aXR5LCBudW1iZXI+O1xuICAgICAgICBtb3VzZVdoZWVsWm9vbTogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24ubW91c2VXaGVlbFpvb20sIGJvb2xlYW4+O1xuICAgICAgICBtdWx0aUN1cnNvck1lcmdlT3ZlcmxhcHBpbmc6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLm11bHRpQ3Vyc29yTWVyZ2VPdmVybGFwcGluZywgYm9vbGVhbj47XG4gICAgICAgIG11bHRpQ3Vyc29yTW9kaWZpZXI6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLm11bHRpQ3Vyc29yTW9kaWZpZXIsICdhbHRLZXknIHwgJ21ldGFLZXknIHwgJ2N0cmxLZXknPjtcbiAgICAgICAgbXVsdGlDdXJzb3JQYXN0ZTogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24ubXVsdGlDdXJzb3JQYXN0ZSwgJ3NwcmVhZCcgfCAnZnVsbCc+O1xuICAgICAgICBvY2N1cnJlbmNlc0hpZ2hsaWdodDogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24ub2NjdXJyZW5jZXNIaWdobGlnaHQsIGJvb2xlYW4+O1xuICAgICAgICBvdmVydmlld1J1bGVyQm9yZGVyOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5vdmVydmlld1J1bGVyQm9yZGVyLCBib29sZWFuPjtcbiAgICAgICAgb3ZlcnZpZXdSdWxlckxhbmVzOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5vdmVydmlld1J1bGVyTGFuZXMsIG51bWJlcj47XG4gICAgICAgIHBhZGRpbmc6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLnBhZGRpbmcsIFJlYWRvbmx5PFJlcXVpcmVkPElFZGl0b3JQYWRkaW5nT3B0aW9ucz4+PjtcbiAgICAgICAgcGFyYW1ldGVySGludHM6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLnBhcmFtZXRlckhpbnRzLCBSZWFkb25seTxSZXF1aXJlZDxJRWRpdG9yUGFyYW1ldGVySGludE9wdGlvbnM+Pj47XG4gICAgICAgIHBlZWtXaWRnZXREZWZhdWx0Rm9jdXM6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLnBlZWtXaWRnZXREZWZhdWx0Rm9jdXMsICd0cmVlJyB8ICdlZGl0b3InPjtcbiAgICAgICAgZGVmaW5pdGlvbkxpbmtPcGVuc0luUGVlazogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uZGVmaW5pdGlvbkxpbmtPcGVuc0luUGVlaywgYm9vbGVhbj47XG4gICAgICAgIHF1aWNrU3VnZ2VzdGlvbnM6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLnF1aWNrU3VnZ2VzdGlvbnMsIGFueT47XG4gICAgICAgIHF1aWNrU3VnZ2VzdGlvbnNEZWxheTogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24ucXVpY2tTdWdnZXN0aW9uc0RlbGF5LCBudW1iZXI+O1xuICAgICAgICByZWFkT25seTogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24ucmVhZE9ubHksIGJvb2xlYW4+O1xuICAgICAgICByZW5hbWVPblR5cGU6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLnJlbmFtZU9uVHlwZSwgYm9vbGVhbj47XG4gICAgICAgIHJlbmRlckNvbnRyb2xDaGFyYWN0ZXJzOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5yZW5kZXJDb250cm9sQ2hhcmFjdGVycywgYm9vbGVhbj47XG4gICAgICAgIHJlbmRlckZpbmFsTmV3bGluZTogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24ucmVuZGVyRmluYWxOZXdsaW5lLCBib29sZWFuPjtcbiAgICAgICAgcmVuZGVyTGluZUhpZ2hsaWdodDogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24ucmVuZGVyTGluZUhpZ2hsaWdodCwgJ2FsbCcgfCAnbGluZScgfCAnbm9uZScgfCAnZ3V0dGVyJz47XG4gICAgICAgIHJlbmRlckxpbmVIaWdobGlnaHRPbmx5V2hlbkZvY3VzOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5yZW5kZXJMaW5lSGlnaGxpZ2h0T25seVdoZW5Gb2N1cywgYm9vbGVhbj47XG4gICAgICAgIHJlbmRlclZhbGlkYXRpb25EZWNvcmF0aW9uczogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24ucmVuZGVyVmFsaWRhdGlvbkRlY29yYXRpb25zLCAnb24nIHwgJ29mZicgfCAnZWRpdGFibGUnPjtcbiAgICAgICAgcmVuZGVyV2hpdGVzcGFjZTogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24ucmVuZGVyV2hpdGVzcGFjZSwgJ2FsbCcgfCAnbm9uZScgfCAnYm91bmRhcnknIHwgJ3NlbGVjdGlvbicgfCAndHJhaWxpbmcnPjtcbiAgICAgICAgcmV2ZWFsSG9yaXpvbnRhbFJpZ2h0UGFkZGluZzogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24ucmV2ZWFsSG9yaXpvbnRhbFJpZ2h0UGFkZGluZywgbnVtYmVyPjtcbiAgICAgICAgcm91bmRlZFNlbGVjdGlvbjogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24ucm91bmRlZFNlbGVjdGlvbiwgYm9vbGVhbj47XG4gICAgICAgIHJ1bGVyczogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24ucnVsZXJzLCB7fT47XG4gICAgICAgIHNjcm9sbGJhcjogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uc2Nyb2xsYmFyLCBJbnRlcm5hbEVkaXRvclNjcm9sbGJhck9wdGlvbnM+O1xuICAgICAgICBzY3JvbGxCZXlvbmRMYXN0Q29sdW1uOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5zY3JvbGxCZXlvbmRMYXN0Q29sdW1uLCBudW1iZXI+O1xuICAgICAgICBzY3JvbGxCZXlvbmRMYXN0TGluZTogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uc2Nyb2xsQmV5b25kTGFzdExpbmUsIGJvb2xlYW4+O1xuICAgICAgICBzY3JvbGxQcmVkb21pbmFudEF4aXM6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLnNjcm9sbFByZWRvbWluYW50QXhpcywgYm9vbGVhbj47XG4gICAgICAgIHNlbGVjdGlvbkNsaXBib2FyZDogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uc2VsZWN0aW9uQ2xpcGJvYXJkLCBib29sZWFuPjtcbiAgICAgICAgc2VsZWN0aW9uSGlnaGxpZ2h0OiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5zZWxlY3Rpb25IaWdobGlnaHQsIGJvb2xlYW4+O1xuICAgICAgICBzZWxlY3RPbkxpbmVOdW1iZXJzOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5zZWxlY3RPbkxpbmVOdW1iZXJzLCBib29sZWFuPjtcbiAgICAgICAgc2hvd0ZvbGRpbmdDb250cm9sczogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uc2hvd0ZvbGRpbmdDb250cm9scywgJ2Fsd2F5cycgfCAnbW91c2VvdmVyJz47XG4gICAgICAgIHNob3dVbnVzZWQ6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLnNob3dVbnVzZWQsIGJvb2xlYW4+O1xuICAgICAgICBzaG93RGVwcmVjYXRlZDogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uc2hvd0RlcHJlY2F0ZWQsIGJvb2xlYW4+O1xuICAgICAgICBpbmxheUhpbnRzOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5pbmxheUhpbnRzLCBSZWFkb25seTxSZXF1aXJlZDxJRWRpdG9ySW5sYXlIaW50c09wdGlvbnM+Pj47XG4gICAgICAgIHNuaXBwZXRTdWdnZXN0aW9uczogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uc25pcHBldFN1Z2dlc3Rpb25zLCAnbm9uZScgfCAndG9wJyB8ICdib3R0b20nIHwgJ2lubGluZSc+O1xuICAgICAgICBzbWFydFNlbGVjdDogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uc21hcnRTZWxlY3QsIFJlYWRvbmx5PFJlcXVpcmVkPElTbWFydFNlbGVjdE9wdGlvbnM+Pj47XG4gICAgICAgIHNtb290aFNjcm9sbGluZzogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uc21vb3RoU2Nyb2xsaW5nLCBib29sZWFuPjtcbiAgICAgICAgc3RvcFJlbmRlcmluZ0xpbmVBZnRlcjogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uc3RvcFJlbmRlcmluZ0xpbmVBZnRlciwgbnVtYmVyPjtcbiAgICAgICAgc3VnZ2VzdDogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uc3VnZ2VzdCwgUmVhZG9ubHk8UmVxdWlyZWQ8SVN1Z2dlc3RPcHRpb25zPj4+O1xuICAgICAgICBpbmxpbmVTdWdnZXN0OiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5pbmxpbmVTdWdnZXN0LCBSZWFkb25seTxSZXF1aXJlZDxJSW5saW5lU3VnZ2VzdE9wdGlvbnM+Pj47XG4gICAgICAgIHN1Z2dlc3RGb250U2l6ZTogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uc3VnZ2VzdEZvbnRTaXplLCBudW1iZXI+O1xuICAgICAgICBzdWdnZXN0TGluZUhlaWdodDogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uc3VnZ2VzdExpbmVIZWlnaHQsIG51bWJlcj47XG4gICAgICAgIHN1Z2dlc3RPblRyaWdnZXJDaGFyYWN0ZXJzOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5zdWdnZXN0T25UcmlnZ2VyQ2hhcmFjdGVycywgYm9vbGVhbj47XG4gICAgICAgIHN1Z2dlc3RTZWxlY3Rpb246IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLnN1Z2dlc3RTZWxlY3Rpb24sICdmaXJzdCcgfCAncmVjZW50bHlVc2VkJyB8ICdyZWNlbnRseVVzZWRCeVByZWZpeCc+O1xuICAgICAgICB0YWJDb21wbGV0aW9uOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi50YWJDb21wbGV0aW9uLCAnb24nIHwgJ29mZicgfCAnb25seVNuaXBwZXRzJz47XG4gICAgICAgIHRhYkluZGV4OiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi50YWJJbmRleCwgbnVtYmVyPjtcbiAgICAgICAgdW5pY29kZUhpZ2hsaWdodDogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24udW5pY29kZUhpZ2hsaWdodGluZywgUmVxdWlyZWQ8UmVhZG9ubHk8SVVuaWNvZGVIaWdobGlnaHRPcHRpb25zPj4+O1xuICAgICAgICB1bnVzdWFsTGluZVRlcm1pbmF0b3JzOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi51bnVzdWFsTGluZVRlcm1pbmF0b3JzLCAnYXV0bycgfCAnb2ZmJyB8ICdwcm9tcHQnPjtcbiAgICAgICAgdXNlU2hhZG93RE9NOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi51c2VTaGFkb3dET00sIGJvb2xlYW4+O1xuICAgICAgICB1c2VUYWJTdG9wczogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24udXNlVGFiU3RvcHMsIGJvb2xlYW4+O1xuICAgICAgICB3b3JkU2VwYXJhdG9yczogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24ud29yZFNlcGFyYXRvcnMsIHN0cmluZz47XG4gICAgICAgIHdvcmRXcmFwOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi53b3JkV3JhcCwgJ29uJyB8ICdvZmYnIHwgJ3dvcmRXcmFwQ29sdW1uJyB8ICdib3VuZGVkJz47XG4gICAgICAgIHdvcmRXcmFwQnJlYWtBZnRlckNoYXJhY3RlcnM6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLndvcmRXcmFwQnJlYWtBZnRlckNoYXJhY3RlcnMsIHN0cmluZz47XG4gICAgICAgIHdvcmRXcmFwQnJlYWtCZWZvcmVDaGFyYWN0ZXJzOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi53b3JkV3JhcEJyZWFrQmVmb3JlQ2hhcmFjdGVycywgc3RyaW5nPjtcbiAgICAgICAgd29yZFdyYXBDb2x1bW46IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLndvcmRXcmFwQ29sdW1uLCBudW1iZXI+O1xuICAgICAgICB3b3JkV3JhcE92ZXJyaWRlMTogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24ud29yZFdyYXBPdmVycmlkZTEsICdvbicgfCAnb2ZmJyB8ICdpbmhlcml0Jz47XG4gICAgICAgIHdvcmRXcmFwT3ZlcnJpZGUyOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi53b3JkV3JhcE92ZXJyaWRlMiwgJ29uJyB8ICdvZmYnIHwgJ2luaGVyaXQnPjtcbiAgICAgICAgd3JhcHBpbmdJbmRlbnQ6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLndyYXBwaW5nSW5kZW50LCBXcmFwcGluZ0luZGVudD47XG4gICAgICAgIHdyYXBwaW5nU3RyYXRlZ3k6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLndyYXBwaW5nU3RyYXRlZ3ksICdzaW1wbGUnIHwgJ2FkdmFuY2VkJz47XG4gICAgICAgIGVkaXRvckNsYXNzTmFtZTogSUVkaXRvck9wdGlvbjxFZGl0b3JPcHRpb24uZWRpdG9yQ2xhc3NOYW1lLCBzdHJpbmc+O1xuICAgICAgICBwaXhlbFJhdGlvOiBJRWRpdG9yT3B0aW9uPEVkaXRvck9wdGlvbi5waXhlbFJhdGlvLCBudW1iZXI+O1xuICAgICAgICB0YWJGb2N1c01vZGU6IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLnRhYkZvY3VzTW9kZSwgYm9vbGVhbj47XG4gICAgICAgIGxheW91dEluZm86IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLmxheW91dEluZm8sIEVkaXRvckxheW91dEluZm8+O1xuICAgICAgICB3cmFwcGluZ0luZm86IElFZGl0b3JPcHRpb248RWRpdG9yT3B0aW9uLndyYXBwaW5nSW5mbywgRWRpdG9yV3JhcHBpbmdJbmZvPjtcbiAgICB9O1xuXG4gICAgdHlwZSBFZGl0b3JPcHRpb25zVHlwZSA9IHR5cGVvZiBFZGl0b3JPcHRpb25zO1xuXG4gICAgdHlwZSBGaW5kRWRpdG9yT3B0aW9uc0tleUJ5SWQ8VCBleHRlbmRzIEVkaXRvck9wdGlvbj4gPSB7XG4gICAgICAgIFtLIGluIGtleW9mIEVkaXRvck9wdGlvbnNUeXBlXTogRWRpdG9yT3B0aW9uc1R5cGVbS11bJ2lkJ10gZXh0ZW5kcyBUID8gSyA6IG5ldmVyO1xuICAgIH1ba2V5b2YgRWRpdG9yT3B0aW9uc1R5cGVdO1xuXG4gICAgdHlwZSBDb21wdXRlZEVkaXRvck9wdGlvblZhbHVlPFQgZXh0ZW5kcyBJRWRpdG9yT3B0aW9uPGFueSwgYW55Pj4gPSBUIGV4dGVuZHMgSUVkaXRvck9wdGlvbjxhbnksIGluZmVyIFI+ID8gUiA6IG5ldmVyO1xuXG4gICAgZXhwb3J0IHR5cGUgRmluZENvbXB1dGVkRWRpdG9yT3B0aW9uVmFsdWVCeUlkPFQgZXh0ZW5kcyBFZGl0b3JPcHRpb24+ID0gTm9uTnVsbGFibGU8Q29tcHV0ZWRFZGl0b3JPcHRpb25WYWx1ZTxFZGl0b3JPcHRpb25zVHlwZVtGaW5kRWRpdG9yT3B0aW9uc0tleUJ5SWQ8VD5dPj47XG5cbiAgICAvKipcbiAgICAgKiBBIHZpZXcgem9uZSBpcyBhIGZ1bGwgaG9yaXpvbnRhbCByZWN0YW5nbGUgdGhhdCAncHVzaGVzJyB0ZXh0IGRvd24uXG4gICAgICogVGhlIGVkaXRvciByZXNlcnZlcyBzcGFjZSBmb3IgdmlldyB6b25lcyB3aGVuIHJlbmRlcmluZy5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElWaWV3Wm9uZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbGluZSBudW1iZXIgYWZ0ZXIgd2hpY2ggdGhpcyB6b25lIHNob3VsZCBhcHBlYXIuXG4gICAgICAgICAqIFVzZSAwIHRvIHBsYWNlIGEgdmlldyB6b25lIGJlZm9yZSB0aGUgZmlyc3QgbGluZSBudW1iZXIuXG4gICAgICAgICAqL1xuICAgICAgICBhZnRlckxpbmVOdW1iZXI6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjb2x1bW4gYWZ0ZXIgd2hpY2ggdGhpcyB6b25lIHNob3VsZCBhcHBlYXIuXG4gICAgICAgICAqIElmIG5vdCBzZXQsIHRoZSBtYXhMaW5lQ29sdW1uIG9mIGBhZnRlckxpbmVOdW1iZXJgIHdpbGwgYmUgdXNlZC5cbiAgICAgICAgICovXG4gICAgICAgIGFmdGVyQ29sdW1uPzogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogU3VwcHJlc3MgbW91c2UgZG93biBldmVudHMuXG4gICAgICAgICAqIElmIHNldCwgdGhlIGVkaXRvciB3aWxsIGF0dGFjaCBhIG1vdXNlIGRvd24gbGlzdGVuZXIgdG8gdGhlIHZpZXcgem9uZSBhbmQgLnByZXZlbnREZWZhdWx0IG9uIGl0LlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBmYWxzZVxuICAgICAgICAgKi9cbiAgICAgICAgc3VwcHJlc3NNb3VzZURvd24/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGhlaWdodCBpbiBsaW5lcyBvZiB0aGUgdmlldyB6b25lLlxuICAgICAgICAgKiBJZiBzcGVjaWZpZWQsIGBoZWlnaHRJblB4YCB3aWxsIGJlIHVzZWQgaW5zdGVhZCBvZiB0aGlzLlxuICAgICAgICAgKiBJZiBuZWl0aGVyIGBoZWlnaHRJblB4YCBub3IgYGhlaWdodEluTGluZXNgIGlzIHNwZWNpZmllZCwgYSBkZWZhdWx0IG9mIGBoZWlnaHRJbkxpbmVzYCA9IDEgd2lsbCBiZSBjaG9zZW4uXG4gICAgICAgICAqL1xuICAgICAgICBoZWlnaHRJbkxpbmVzPzogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGhlaWdodCBpbiBweCBvZiB0aGUgdmlldyB6b25lLlxuICAgICAgICAgKiBJZiB0aGlzIGlzIHNldCwgdGhlIGVkaXRvciB3aWxsIGdpdmUgcHJlZmVyZW5jZSB0byBpdCByYXRoZXIgdGhhbiBgaGVpZ2h0SW5MaW5lc2AgYWJvdmUuXG4gICAgICAgICAqIElmIG5laXRoZXIgYGhlaWdodEluUHhgIG5vciBgaGVpZ2h0SW5MaW5lc2AgaXMgc3BlY2lmaWVkLCBhIGRlZmF1bHQgb2YgYGhlaWdodEluTGluZXNgID0gMSB3aWxsIGJlIGNob3Nlbi5cbiAgICAgICAgICovXG4gICAgICAgIGhlaWdodEluUHg/OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbWluaW11bSB3aWR0aCBpbiBweCBvZiB0aGUgdmlldyB6b25lLlxuICAgICAgICAgKiBJZiB0aGlzIGlzIHNldCwgdGhlIGVkaXRvciB3aWxsIGVuc3VyZSB0aGF0IHRoZSBzY3JvbGwgd2lkdGggaXMgPj0gdGhhbiB0aGlzIHZhbHVlLlxuICAgICAgICAgKi9cbiAgICAgICAgbWluV2lkdGhJblB4PzogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGRvbSBub2RlIG9mIHRoZSB2aWV3IHpvbmVcbiAgICAgICAgICovXG4gICAgICAgIGRvbU5vZGU6IEhUTUxFbGVtZW50O1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gb3B0aW9uYWwgZG9tIG5vZGUgZm9yIHRoZSB2aWV3IHpvbmUgdGhhdCB3aWxsIGJlIHBsYWNlZCBpbiB0aGUgbWFyZ2luIGFyZWEuXG4gICAgICAgICAqL1xuICAgICAgICBtYXJnaW5Eb21Ob2RlPzogSFRNTEVsZW1lbnQgfCBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbGJhY2sgd2hpY2ggZ2l2ZXMgdGhlIHJlbGF0aXZlIHRvcCBvZiB0aGUgdmlldyB6b25lIGFzIGl0IGFwcGVhcnMgKHRha2luZyBzY3JvbGxpbmcgaW50byBhY2NvdW50KS5cbiAgICAgICAgICovXG4gICAgICAgIG9uRG9tTm9kZVRvcD86ICh0b3A6IG51bWJlcikgPT4gdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGxiYWNrIHdoaWNoIGdpdmVzIHRoZSBoZWlnaHQgaW4gcGl4ZWxzIG9mIHRoZSB2aWV3IHpvbmUuXG4gICAgICAgICAqL1xuICAgICAgICBvbkNvbXB1dGVkSGVpZ2h0PzogKGhlaWdodDogbnVtYmVyKSA9PiB2b2lkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuIGFjY2Vzc29yIHRoYXQgYWxsb3dzIGZvciB6b25lcyB0byBiZSBhZGRlZCBvciByZW1vdmVkLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVZpZXdab25lQ2hhbmdlQWNjZXNzb3Ige1xuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlIGEgbmV3IHZpZXcgem9uZS5cbiAgICAgICAgICogQHBhcmFtIHpvbmUgWm9uZSB0byBjcmVhdGVcbiAgICAgICAgICogQHJldHVybiBBIHVuaXF1ZSBpZGVudGlmaWVyIHRvIHRoZSB2aWV3IHpvbmUuXG4gICAgICAgICAqL1xuICAgICAgICBhZGRab25lKHpvbmU6IElWaWV3Wm9uZSk6IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW92ZSBhIHpvbmVcbiAgICAgICAgICogQHBhcmFtIGlkIEEgdW5pcXVlIGlkZW50aWZpZXIgdG8gdGhlIHZpZXcgem9uZSwgYXMgcmV0dXJuZWQgYnkgdGhlIGBhZGRab25lYCBjYWxsLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlWm9uZShpZDogc3RyaW5nKTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENoYW5nZSBhIHpvbmUncyBwb3NpdGlvbi5cbiAgICAgICAgICogVGhlIGVkaXRvciB3aWxsIHJlc2NhbiB0aGUgYGFmdGVyTGluZU51bWJlcmAgYW5kIGBhZnRlckNvbHVtbmAgcHJvcGVydGllcyBvZiBhIHZpZXcgem9uZS5cbiAgICAgICAgICovXG4gICAgICAgIGxheW91dFpvbmUoaWQ6IHN0cmluZyk6IHZvaWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBwb3NpdGlvbmluZyBwcmVmZXJlbmNlIGZvciByZW5kZXJpbmcgY29udGVudCB3aWRnZXRzLlxuICAgICAqL1xuICAgIGV4cG9ydCBlbnVtIENvbnRlbnRXaWRnZXRQb3NpdGlvblByZWZlcmVuY2Uge1xuICAgICAgICAvKipcbiAgICAgICAgICogUGxhY2UgdGhlIGNvbnRlbnQgd2lkZ2V0IGV4YWN0bHkgYXQgYSBwb3NpdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgRVhBQ1QgPSAwLFxuICAgICAgICAvKipcbiAgICAgICAgICogUGxhY2UgdGhlIGNvbnRlbnQgd2lkZ2V0IGFib3ZlIGEgcG9zaXRpb25cbiAgICAgICAgICovXG4gICAgICAgIEFCT1ZFID0gMSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBsYWNlIHRoZSBjb250ZW50IHdpZGdldCBiZWxvdyBhIHBvc2l0aW9uXG4gICAgICAgICAqL1xuICAgICAgICBCRUxPVyA9IDJcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHBvc2l0aW9uIGZvciByZW5kZXJpbmcgY29udGVudCB3aWRnZXRzLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUNvbnRlbnRXaWRnZXRQb3NpdGlvbiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXNpcmVkIHBvc2l0aW9uIGZvciB0aGUgY29udGVudCB3aWRnZXQuXG4gICAgICAgICAqIGBwcmVmZXJlbmNlYCB3aWxsIGFsc28gYWZmZWN0IHRoZSBwbGFjZW1lbnQuXG4gICAgICAgICAqL1xuICAgICAgICBwb3NpdGlvbjogSVBvc2l0aW9uIHwgbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9wdGlvbmFsbHksIGEgcmFuZ2UgY2FuIGJlIHByb3ZpZGVkIHRvIGZ1cnRoZXJcbiAgICAgICAgICogZGVmaW5lIHRoZSBwb3NpdGlvbiBvZiB0aGUgY29udGVudCB3aWRnZXQuXG4gICAgICAgICAqL1xuICAgICAgICByYW5nZT86IElSYW5nZSB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQbGFjZW1lbnQgcHJlZmVyZW5jZSBmb3IgcG9zaXRpb24sIGluIG9yZGVyIG9mIHByZWZlcmVuY2UuXG4gICAgICAgICAqL1xuICAgICAgICBwcmVmZXJlbmNlOiBDb250ZW50V2lkZ2V0UG9zaXRpb25QcmVmZXJlbmNlW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBjb250ZW50IHdpZGdldCByZW5kZXJzIGlubGluZSB3aXRoIHRoZSB0ZXh0IGFuZCBjYW4gYmUgZWFzaWx5IHBsYWNlZCAnbmVhcicgYW4gZWRpdG9yIHBvc2l0aW9uLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUNvbnRlbnRXaWRnZXQge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVuZGVyIHRoaXMgY29udGVudCB3aWRnZXQgaW4gYSBsb2NhdGlvbiB3aGVyZSBpdCBjb3VsZCBvdmVyZmxvdyB0aGUgZWRpdG9yJ3MgdmlldyBkb20gbm9kZS5cbiAgICAgICAgICovXG4gICAgICAgIGFsbG93RWRpdG9yT3ZlcmZsb3c/OiBib29sZWFuO1xuICAgICAgICBzdXBwcmVzc01vdXNlRG93bj86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgYSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgY29udGVudCB3aWRnZXQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRJZCgpOiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdGhlIGRvbSBub2RlIG9mIHRoZSBjb250ZW50IHdpZGdldC5cbiAgICAgICAgICovXG4gICAgICAgIGdldERvbU5vZGUoKTogSFRNTEVsZW1lbnQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdGhlIHBsYWNlbWVudCBvZiB0aGUgY29udGVudCB3aWRnZXQuXG4gICAgICAgICAqIElmIG51bGwgaXMgcmV0dXJuZWQsIHRoZSBjb250ZW50IHdpZGdldCB3aWxsIGJlIHBsYWNlZCBvZmYgc2NyZWVuLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0UG9zaXRpb24oKTogSUNvbnRlbnRXaWRnZXRQb3NpdGlvbiB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPcHRpb25hbCBmdW5jdGlvbiB0aGF0IGlzIGludm9rZWQgYmVmb3JlIHJlbmRlcmluZ1xuICAgICAgICAgKiB0aGUgY29udGVudCB3aWRnZXQuIElmIGEgZGltZW5zaW9uIGlzIHJldHVybmVkIHRoZSBlZGl0b3Igd2lsbFxuICAgICAgICAgKiBhdHRlbXB0IHRvIHVzZSBpdC5cbiAgICAgICAgICovXG4gICAgICAgIGJlZm9yZVJlbmRlcj8oKTogSURpbWVuc2lvbiB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPcHRpb25hbCBmdW5jdGlvbiB0aGF0IGlzIGludm9rZWQgYWZ0ZXIgcmVuZGVyaW5nIHRoZSBjb250ZW50XG4gICAgICAgICAqIHdpZGdldC4gSXMgYmVpbmcgaW52b2tlZCB3aXRoIHRoZSBzZWxlY3RlZCBwb3NpdGlvbiBwcmVmZXJlbmNlXG4gICAgICAgICAqIG9yIGBudWxsYCBpZiBub3QgcmVuZGVyZWQuXG4gICAgICAgICAqL1xuICAgICAgICBhZnRlclJlbmRlcj8ocG9zaXRpb246IENvbnRlbnRXaWRnZXRQb3NpdGlvblByZWZlcmVuY2UgfCBudWxsKTogdm9pZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHBvc2l0aW9uaW5nIHByZWZlcmVuY2UgZm9yIHJlbmRlcmluZyBvdmVybGF5IHdpZGdldHMuXG4gICAgICovXG4gICAgZXhwb3J0IGVudW0gT3ZlcmxheVdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQb3NpdGlvbiB0aGUgb3ZlcmxheSB3aWRnZXQgaW4gdGhlIHRvcCByaWdodCBjb3JuZXJcbiAgICAgICAgICovXG4gICAgICAgIFRPUF9SSUdIVF9DT1JORVIgPSAwLFxuICAgICAgICAvKipcbiAgICAgICAgICogUG9zaXRpb24gdGhlIG92ZXJsYXkgd2lkZ2V0IGluIHRoZSBib3R0b20gcmlnaHQgY29ybmVyXG4gICAgICAgICAqL1xuICAgICAgICBCT1RUT01fUklHSFRfQ09STkVSID0gMSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBvc2l0aW9uIHRoZSBvdmVybGF5IHdpZGdldCBpbiB0aGUgdG9wIGNlbnRlclxuICAgICAgICAgKi9cbiAgICAgICAgVE9QX0NFTlRFUiA9IDJcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHBvc2l0aW9uIGZvciByZW5kZXJpbmcgb3ZlcmxheSB3aWRnZXRzLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU92ZXJsYXlXaWRnZXRQb3NpdGlvbiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcG9zaXRpb24gcHJlZmVyZW5jZSBmb3IgdGhlIG92ZXJsYXkgd2lkZ2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgcHJlZmVyZW5jZTogT3ZlcmxheVdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZSB8IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gb3ZlcmxheSB3aWRnZXRzIHJlbmRlcnMgb24gdG9wIG9mIHRoZSB0ZXh0LlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU92ZXJsYXlXaWRnZXQge1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGEgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIG92ZXJsYXkgd2lkZ2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0SWQoKTogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSBkb20gbm9kZSBvZiB0aGUgb3ZlcmxheSB3aWRnZXQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXREb21Ob2RlKCk6IEhUTUxFbGVtZW50O1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSBwbGFjZW1lbnQgb2YgdGhlIG92ZXJsYXkgd2lkZ2V0LlxuICAgICAgICAgKiBJZiBudWxsIGlzIHJldHVybmVkLCB0aGUgb3ZlcmxheSB3aWRnZXQgaXMgcmVzcG9uc2libGUgdG8gcGxhY2UgaXRzZWxmLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0UG9zaXRpb24oKTogSU92ZXJsYXlXaWRnZXRQb3NpdGlvbiB8IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHlwZSBvZiBoaXQgZWxlbWVudCB3aXRoIHRoZSBtb3VzZSBpbiB0aGUgZWRpdG9yLlxuICAgICAqL1xuICAgIGV4cG9ydCBlbnVtIE1vdXNlVGFyZ2V0VHlwZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNb3VzZSBpcyBvbiB0b3Agb2YgYW4gdW5rbm93biBlbGVtZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgVU5LTk9XTiA9IDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNb3VzZSBpcyBvbiB0b3Agb2YgdGhlIHRleHRhcmVhIHVzZWQgZm9yIGlucHV0LlxuICAgICAgICAgKi9cbiAgICAgICAgVEVYVEFSRUEgPSAxLFxuICAgICAgICAvKipcbiAgICAgICAgICogTW91c2UgaXMgb24gdG9wIG9mIHRoZSBnbHlwaCBtYXJnaW5cbiAgICAgICAgICovXG4gICAgICAgIEdVVFRFUl9HTFlQSF9NQVJHSU4gPSAyLFxuICAgICAgICAvKipcbiAgICAgICAgICogTW91c2UgaXMgb24gdG9wIG9mIHRoZSBsaW5lIG51bWJlcnNcbiAgICAgICAgICovXG4gICAgICAgIEdVVFRFUl9MSU5FX05VTUJFUlMgPSAzLFxuICAgICAgICAvKipcbiAgICAgICAgICogTW91c2UgaXMgb24gdG9wIG9mIHRoZSBsaW5lIGRlY29yYXRpb25zXG4gICAgICAgICAqL1xuICAgICAgICBHVVRURVJfTElORV9ERUNPUkFUSU9OUyA9IDQsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNb3VzZSBpcyBvbiB0b3Agb2YgdGhlIHdoaXRlc3BhY2UgbGVmdCBpbiB0aGUgZ3V0dGVyIGJ5IGEgdmlldyB6b25lLlxuICAgICAgICAgKi9cbiAgICAgICAgR1VUVEVSX1ZJRVdfWk9ORSA9IDUsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNb3VzZSBpcyBvbiB0b3Agb2YgdGV4dCBpbiB0aGUgY29udGVudC5cbiAgICAgICAgICovXG4gICAgICAgIENPTlRFTlRfVEVYVCA9IDYsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNb3VzZSBpcyBvbiB0b3Agb2YgZW1wdHkgc3BhY2UgaW4gdGhlIGNvbnRlbnQgKGUuZy4gYWZ0ZXIgbGluZSB0ZXh0IG9yIGJlbG93IGxhc3QgbGluZSlcbiAgICAgICAgICovXG4gICAgICAgIENPTlRFTlRfRU1QVFkgPSA3LFxuICAgICAgICAvKipcbiAgICAgICAgICogTW91c2UgaXMgb24gdG9wIG9mIGEgdmlldyB6b25lIGluIHRoZSBjb250ZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgQ09OVEVOVF9WSUVXX1pPTkUgPSA4LFxuICAgICAgICAvKipcbiAgICAgICAgICogTW91c2UgaXMgb24gdG9wIG9mIGEgY29udGVudCB3aWRnZXQuXG4gICAgICAgICAqL1xuICAgICAgICBDT05URU5UX1dJREdFVCA9IDksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNb3VzZSBpcyBvbiB0b3Agb2YgdGhlIGRlY29yYXRpb25zIG92ZXJ2aWV3IHJ1bGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgT1ZFUlZJRVdfUlVMRVIgPSAxMCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1vdXNlIGlzIG9uIHRvcCBvZiBhIHNjcm9sbGJhci5cbiAgICAgICAgICovXG4gICAgICAgIFNDUk9MTEJBUiA9IDExLFxuICAgICAgICAvKipcbiAgICAgICAgICogTW91c2UgaXMgb24gdG9wIG9mIGFuIG92ZXJsYXkgd2lkZ2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgT1ZFUkxBWV9XSURHRVQgPSAxMixcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1vdXNlIGlzIG91dHNpZGUgb2YgdGhlIGVkaXRvci5cbiAgICAgICAgICovXG4gICAgICAgIE9VVFNJREVfRURJVE9SID0gMTNcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUYXJnZXQgaGl0IHdpdGggdGhlIG1vdXNlIGluIHRoZSBlZGl0b3IuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJTW91c2VUYXJnZXQge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHRhcmdldCBlbGVtZW50XG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBlbGVtZW50OiBFbGVtZW50IHwgbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB0YXJnZXQgdHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgdHlwZTogTW91c2VUYXJnZXRUeXBlO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlICdhcHByb3hpbWF0ZScgZWRpdG9yIHBvc2l0aW9uXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBwb3NpdGlvbjogUG9zaXRpb24gfCBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVzaXJlZCBtb3VzZSBjb2x1bW4gKGUuZy4gd2hlbiBwb3NpdGlvbi5jb2x1bW4gZ2V0cyBjbGFtcGVkIHRvIHRleHQgbGVuZ3RoIC0tIGNsaWNraW5nIGFmdGVyIHRleHQgb24gYSBsaW5lKS5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IG1vdXNlQ29sdW1uOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgJ2FwcHJveGltYXRlJyBlZGl0b3IgcmFuZ2VcbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHJhbmdlOiBSYW5nZSB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTb21lIGV4dHJhIGRldGFpbC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGRldGFpbDogYW55O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgbW91c2UgZXZlbnQgb3JpZ2luYXRpbmcgZnJvbSB0aGUgZWRpdG9yLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUVkaXRvck1vdXNlRXZlbnQge1xuICAgICAgICByZWFkb25seSBldmVudDogSU1vdXNlRXZlbnQ7XG4gICAgICAgIHJlYWRvbmx5IHRhcmdldDogSU1vdXNlVGFyZ2V0O1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVBhcnRpYWxFZGl0b3JNb3VzZUV2ZW50IHtcbiAgICAgICAgcmVhZG9ubHkgZXZlbnQ6IElNb3VzZUV2ZW50O1xuICAgICAgICByZWFkb25seSB0YXJnZXQ6IElNb3VzZVRhcmdldCB8IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBwYXN0ZSBldmVudCBvcmlnaW5hdGluZyBmcm9tIHRoZSBlZGl0b3IuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJUGFzdGVFdmVudCB7XG4gICAgICAgIHJlYWRvbmx5IHJhbmdlOiBSYW5nZTtcbiAgICAgICAgcmVhZG9ubHkgbGFuZ3VhZ2VJZDogc3RyaW5nIHwgbnVsbDtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElFZGl0b3JDb25zdHJ1Y3Rpb25PcHRpb25zIGV4dGVuZHMgSUVkaXRvck9wdGlvbnMge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGluaXRpYWwgZWRpdG9yIGRpbWVuc2lvbiAodG8gYXZvaWQgbWVhc3VyaW5nIHRoZSBjb250YWluZXIpLlxuICAgICAgICAgKi9cbiAgICAgICAgZGltZW5zaW9uPzogSURpbWVuc2lvbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBsYWNlIG92ZXJmbG93IHdpZGdldHMgaW5zaWRlIGFuIGV4dGVybmFsIERPTSBub2RlLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBhbiBpbnRlcm5hbCBET00gbm9kZS5cbiAgICAgICAgICovXG4gICAgICAgIG92ZXJmbG93V2lkZ2V0c0RvbU5vZGU/OiBIVE1MRWxlbWVudDtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElEaWZmRWRpdG9yQ29uc3RydWN0aW9uT3B0aW9ucyBleHRlbmRzIElEaWZmRWRpdG9yT3B0aW9ucyB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgaW5pdGlhbCBlZGl0b3IgZGltZW5zaW9uICh0byBhdm9pZCBtZWFzdXJpbmcgdGhlIGNvbnRhaW5lcikuXG4gICAgICAgICAqL1xuICAgICAgICBkaW1lbnNpb24/OiBJRGltZW5zaW9uO1xuICAgICAgICAvKipcbiAgICAgICAgICogUGxhY2Ugb3ZlcmZsb3cgd2lkZ2V0cyBpbnNpZGUgYW4gZXh0ZXJuYWwgRE9NIG5vZGUuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIGFuIGludGVybmFsIERPTSBub2RlLlxuICAgICAgICAgKi9cbiAgICAgICAgb3ZlcmZsb3dXaWRnZXRzRG9tTm9kZT86IEhUTUxFbGVtZW50O1xuICAgICAgICAvKipcbiAgICAgICAgICogQXJpYSBsYWJlbCBmb3Igb3JpZ2luYWwgZWRpdG9yLlxuICAgICAgICAgKi9cbiAgICAgICAgb3JpZ2luYWxBcmlhTGFiZWw/OiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcmlhIGxhYmVsIGZvciBtb2RpZmllZCBlZGl0b3IuXG4gICAgICAgICAqL1xuICAgICAgICBtb2RpZmllZEFyaWFMYWJlbD86IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElzIHRoZSBkaWZmIGVkaXRvciBpbnNpZGUgYW5vdGhlciBlZGl0b3JcbiAgICAgICAgICogRGVmYXVsdHMgdG8gZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIGlzSW5FbWJlZGRlZEVkaXRvcj86IGJvb2xlYW47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSByaWNoIGNvZGUgZWRpdG9yLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUNvZGVFZGl0b3IgZXh0ZW5kcyBJRWRpdG9yIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgY29udGVudCBvZiB0aGUgY3VycmVudCBtb2RlbCBoYXMgY2hhbmdlZC5cbiAgICAgICAgICogQGV2ZW50XG4gICAgICAgICAqL1xuICAgICAgICBvbkRpZENoYW5nZU1vZGVsQ29udGVudDogSUV2ZW50PElNb2RlbENvbnRlbnRDaGFuZ2VkRXZlbnQ+O1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gZXZlbnQgZW1pdHRlZCB3aGVuIHRoZSBsYW5ndWFnZSBvZiB0aGUgY3VycmVudCBtb2RlbCBoYXMgY2hhbmdlZC5cbiAgICAgICAgICogQGV2ZW50XG4gICAgICAgICAqL1xuICAgICAgICBvbkRpZENoYW5nZU1vZGVsTGFuZ3VhZ2U6IElFdmVudDxJTW9kZWxMYW5ndWFnZUNoYW5nZWRFdmVudD47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBldmVudCBlbWl0dGVkIHdoZW4gdGhlIGxhbmd1YWdlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIGN1cnJlbnQgbW9kZWwgaGFzIGNoYW5nZWQuXG4gICAgICAgICAqIEBldmVudFxuICAgICAgICAgKi9cbiAgICAgICAgb25EaWRDaGFuZ2VNb2RlbExhbmd1YWdlQ29uZmlndXJhdGlvbjogSUV2ZW50PElNb2RlbExhbmd1YWdlQ29uZmlndXJhdGlvbkNoYW5nZWRFdmVudD47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBldmVudCBlbWl0dGVkIHdoZW4gdGhlIG9wdGlvbnMgb2YgdGhlIGN1cnJlbnQgbW9kZWwgaGFzIGNoYW5nZWQuXG4gICAgICAgICAqIEBldmVudFxuICAgICAgICAgKi9cbiAgICAgICAgb25EaWRDaGFuZ2VNb2RlbE9wdGlvbnM6IElFdmVudDxJTW9kZWxPcHRpb25zQ2hhbmdlZEV2ZW50PjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgY29uZmlndXJhdGlvbiBvZiB0aGUgZWRpdG9yIGhhcyBjaGFuZ2VkLiAoZS5nLiBgZWRpdG9yLnVwZGF0ZU9wdGlvbnMoKWApXG4gICAgICAgICAqIEBldmVudFxuICAgICAgICAgKi9cbiAgICAgICAgb25EaWRDaGFuZ2VDb25maWd1cmF0aW9uOiBJRXZlbnQ8Q29uZmlndXJhdGlvbkNoYW5nZWRFdmVudD47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBldmVudCBlbWl0dGVkIHdoZW4gdGhlIGN1cnNvciBwb3NpdGlvbiBoYXMgY2hhbmdlZC5cbiAgICAgICAgICogQGV2ZW50XG4gICAgICAgICAqL1xuICAgICAgICBvbkRpZENoYW5nZUN1cnNvclBvc2l0aW9uOiBJRXZlbnQ8SUN1cnNvclBvc2l0aW9uQ2hhbmdlZEV2ZW50PjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgY3Vyc29yIHNlbGVjdGlvbiBoYXMgY2hhbmdlZC5cbiAgICAgICAgICogQGV2ZW50XG4gICAgICAgICAqL1xuICAgICAgICBvbkRpZENoYW5nZUN1cnNvclNlbGVjdGlvbjogSUV2ZW50PElDdXJzb3JTZWxlY3Rpb25DaGFuZ2VkRXZlbnQ+O1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gZXZlbnQgZW1pdHRlZCB3aGVuIHRoZSBtb2RlbCBvZiB0aGlzIGVkaXRvciBoYXMgY2hhbmdlZCAoZS5nLiBgZWRpdG9yLnNldE1vZGVsKClgKS5cbiAgICAgICAgICogQGV2ZW50XG4gICAgICAgICAqL1xuICAgICAgICBvbkRpZENoYW5nZU1vZGVsOiBJRXZlbnQ8SU1vZGVsQ2hhbmdlZEV2ZW50PjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgZGVjb3JhdGlvbnMgb2YgdGhlIGN1cnJlbnQgbW9kZWwgaGF2ZSBjaGFuZ2VkLlxuICAgICAgICAgKiBAZXZlbnRcbiAgICAgICAgICovXG4gICAgICAgIG9uRGlkQ2hhbmdlTW9kZWxEZWNvcmF0aW9uczogSUV2ZW50PElNb2RlbERlY29yYXRpb25zQ2hhbmdlZEV2ZW50PjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgdGV4dCBpbnNpZGUgdGhpcyBlZGl0b3IgZ2FpbmVkIGZvY3VzIChpLmUuIGN1cnNvciBzdGFydHMgYmxpbmtpbmcpLlxuICAgICAgICAgKiBAZXZlbnRcbiAgICAgICAgICovXG4gICAgICAgIG9uRGlkRm9jdXNFZGl0b3JUZXh0KGxpc3RlbmVyOiAoKSA9PiB2b2lkKTogSURpc3Bvc2FibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBldmVudCBlbWl0dGVkIHdoZW4gdGhlIHRleHQgaW5zaWRlIHRoaXMgZWRpdG9yIGxvc3QgZm9jdXMgKGkuZS4gY3Vyc29yIHN0b3BzIGJsaW5raW5nKS5cbiAgICAgICAgICogQGV2ZW50XG4gICAgICAgICAqL1xuICAgICAgICBvbkRpZEJsdXJFZGl0b3JUZXh0KGxpc3RlbmVyOiAoKSA9PiB2b2lkKTogSURpc3Bvc2FibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBldmVudCBlbWl0dGVkIHdoZW4gdGhlIHRleHQgaW5zaWRlIHRoaXMgZWRpdG9yIG9yIGFuIGVkaXRvciB3aWRnZXQgZ2FpbmVkIGZvY3VzLlxuICAgICAgICAgKiBAZXZlbnRcbiAgICAgICAgICovXG4gICAgICAgIG9uRGlkRm9jdXNFZGl0b3JXaWRnZXQobGlzdGVuZXI6ICgpID0+IHZvaWQpOiBJRGlzcG9zYWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgdGV4dCBpbnNpZGUgdGhpcyBlZGl0b3Igb3IgYW4gZWRpdG9yIHdpZGdldCBsb3N0IGZvY3VzLlxuICAgICAgICAgKiBAZXZlbnRcbiAgICAgICAgICovXG4gICAgICAgIG9uRGlkQmx1ckVkaXRvcldpZGdldChsaXN0ZW5lcjogKCkgPT4gdm9pZCk6IElEaXNwb3NhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gZXZlbnQgZW1pdHRlZCBhZnRlciBjb21wb3NpdGlvbiBoYXMgc3RhcnRlZC5cbiAgICAgICAgICovXG4gICAgICAgIG9uRGlkQ29tcG9zaXRpb25TdGFydChsaXN0ZW5lcjogKCkgPT4gdm9pZCk6IElEaXNwb3NhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gZXZlbnQgZW1pdHRlZCBhZnRlciBjb21wb3NpdGlvbiBoYXMgZW5kZWQuXG4gICAgICAgICAqL1xuICAgICAgICBvbkRpZENvbXBvc2l0aW9uRW5kKGxpc3RlbmVyOiAoKSA9PiB2b2lkKTogSURpc3Bvc2FibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBldmVudCBlbWl0dGVkIHdoZW4gZWRpdGluZyBmYWlsZWQgYmVjYXVzZSB0aGUgZWRpdG9yIGlzIHJlYWQtb25seS5cbiAgICAgICAgICogQGV2ZW50XG4gICAgICAgICAqL1xuICAgICAgICBvbkRpZEF0dGVtcHRSZWFkT25seUVkaXQobGlzdGVuZXI6ICgpID0+IHZvaWQpOiBJRGlzcG9zYWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGV2ZW50IGVtaXR0ZWQgd2hlbiB1c2VycyBwYXN0ZSB0ZXh0IGluIHRoZSBlZGl0b3IuXG4gICAgICAgICAqIEBldmVudFxuICAgICAgICAgKi9cbiAgICAgICAgb25EaWRQYXN0ZTogSUV2ZW50PElQYXN0ZUV2ZW50PjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGV2ZW50IGVtaXR0ZWQgb24gYSBcIm1vdXNldXBcIi5cbiAgICAgICAgICogQGV2ZW50XG4gICAgICAgICAqL1xuICAgICAgICBvbk1vdXNlVXA6IElFdmVudDxJRWRpdG9yTW91c2VFdmVudD47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBldmVudCBlbWl0dGVkIG9uIGEgXCJtb3VzZWRvd25cIi5cbiAgICAgICAgICogQGV2ZW50XG4gICAgICAgICAqL1xuICAgICAgICBvbk1vdXNlRG93bjogSUV2ZW50PElFZGl0b3JNb3VzZUV2ZW50PjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGV2ZW50IGVtaXR0ZWQgb24gYSBcImNvbnRleHRtZW51XCIuXG4gICAgICAgICAqIEBldmVudFxuICAgICAgICAgKi9cbiAgICAgICAgb25Db250ZXh0TWVudTogSUV2ZW50PElFZGl0b3JNb3VzZUV2ZW50PjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGV2ZW50IGVtaXR0ZWQgb24gYSBcIm1vdXNlbW92ZVwiLlxuICAgICAgICAgKiBAZXZlbnRcbiAgICAgICAgICovXG4gICAgICAgIG9uTW91c2VNb3ZlOiBJRXZlbnQ8SUVkaXRvck1vdXNlRXZlbnQ+O1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gZXZlbnQgZW1pdHRlZCBvbiBhIFwibW91c2VsZWF2ZVwiLlxuICAgICAgICAgKiBAZXZlbnRcbiAgICAgICAgICovXG4gICAgICAgIG9uTW91c2VMZWF2ZTogSUV2ZW50PElQYXJ0aWFsRWRpdG9yTW91c2VFdmVudD47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBldmVudCBlbWl0dGVkIG9uIGEgXCJrZXl1cFwiLlxuICAgICAgICAgKiBAZXZlbnRcbiAgICAgICAgICovXG4gICAgICAgIG9uS2V5VXA6IElFdmVudDxJS2V5Ym9hcmRFdmVudD47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBldmVudCBlbWl0dGVkIG9uIGEgXCJrZXlkb3duXCIuXG4gICAgICAgICAqIEBldmVudFxuICAgICAgICAgKi9cbiAgICAgICAgb25LZXlEb3duOiBJRXZlbnQ8SUtleWJvYXJkRXZlbnQ+O1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gZXZlbnQgZW1pdHRlZCB3aGVuIHRoZSBsYXlvdXQgb2YgdGhlIGVkaXRvciBoYXMgY2hhbmdlZC5cbiAgICAgICAgICogQGV2ZW50XG4gICAgICAgICAqL1xuICAgICAgICBvbkRpZExheW91dENoYW5nZTogSUV2ZW50PEVkaXRvckxheW91dEluZm8+O1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gZXZlbnQgZW1pdHRlZCB3aGVuIHRoZSBjb250ZW50IHdpZHRoIG9yIGNvbnRlbnQgaGVpZ2h0IGluIHRoZSBlZGl0b3IgaGFzIGNoYW5nZWQuXG4gICAgICAgICAqIEBldmVudFxuICAgICAgICAgKi9cbiAgICAgICAgb25EaWRDb250ZW50U2l6ZUNoYW5nZTogSUV2ZW50PElDb250ZW50U2l6ZUNoYW5nZWRFdmVudD47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBldmVudCBlbWl0dGVkIHdoZW4gdGhlIHNjcm9sbCBpbiB0aGUgZWRpdG9yIGhhcyBjaGFuZ2VkLlxuICAgICAgICAgKiBAZXZlbnRcbiAgICAgICAgICovXG4gICAgICAgIG9uRGlkU2Nyb2xsQ2hhbmdlOiBJRXZlbnQ8SVNjcm9sbEV2ZW50PjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGV2ZW50IGVtaXR0ZWQgd2hlbiBoaWRkZW4gYXJlYXMgY2hhbmdlIGluIHRoZSBlZGl0b3IgKGUuZy4gZHVlIHRvIGZvbGRpbmcpLlxuICAgICAgICAgKiBAZXZlbnRcbiAgICAgICAgICovXG4gICAgICAgIG9uRGlkQ2hhbmdlSGlkZGVuQXJlYXM6IElFdmVudDx2b2lkPjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNhdmVzIGN1cnJlbnQgdmlldyBzdGF0ZSBvZiB0aGUgZWRpdG9yIGluIGEgc2VyaWFsaXphYmxlIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIHNhdmVWaWV3U3RhdGUoKTogSUNvZGVFZGl0b3JWaWV3U3RhdGUgfCBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVzdG9yZXMgdGhlIHZpZXcgc3RhdGUgb2YgdGhlIGVkaXRvciBmcm9tIGEgc2VyaWFsaXphYmxlIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHNhdmVWaWV3U3RhdGVgLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVzdG9yZVZpZXdTdGF0ZShzdGF0ZTogSUNvZGVFZGl0b3JWaWV3U3RhdGUpOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB0ZXh0IGluc2lkZSB0aGlzIGVkaXRvciBvciBhbiBlZGl0b3Igd2lkZ2V0IGhhcyBmb2N1cy5cbiAgICAgICAgICovXG4gICAgICAgIGhhc1dpZGdldEZvY3VzKCk6IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgYSBjb250cmlidXRpb24gb2YgdGhpcyBlZGl0b3IuXG4gICAgICAgICAqIEBpZCBVbmlxdWUgaWRlbnRpZmllciBvZiB0aGUgY29udHJpYnV0aW9uLlxuICAgICAgICAgKiBAcmV0dXJuIFRoZSBjb250cmlidXRpb24gb3IgbnVsbCBpZiBjb250cmlidXRpb24gbm90IGZvdW5kLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0Q29udHJpYnV0aW9uPFQgZXh0ZW5kcyBJRWRpdG9yQ29udHJpYnV0aW9uPihpZDogc3RyaW5nKTogVDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFR5cGUgdGhlIGdldE1vZGVsKCkgb2YgSUVkaXRvci5cbiAgICAgICAgICovXG4gICAgICAgIGdldE1vZGVsKCk6IElUZXh0TW9kZWwgfCBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgY3VycmVudCBtb2RlbCBhdHRhY2hlZCB0byB0aGlzIGVkaXRvci5cbiAgICAgICAgICogSWYgdGhlIHByZXZpb3VzIG1vZGVsIHdhcyBjcmVhdGVkIGJ5IHRoZSBlZGl0b3IgdmlhIHRoZSB2YWx1ZSBrZXkgaW4gdGhlIG9wdGlvbnNcbiAgICAgICAgICogbGl0ZXJhbCBvYmplY3QsIGl0IHdpbGwgYmUgZGVzdHJveWVkLiBPdGhlcndpc2UsIGlmIHRoZSBwcmV2aW91cyBtb2RlbCB3YXMgc2V0XG4gICAgICAgICAqIHZpYSBzZXRNb2RlbCwgb3IgdGhlIG1vZGVsIGtleSBpbiB0aGUgb3B0aW9ucyBsaXRlcmFsIG9iamVjdCwgdGhlIHByZXZpb3VzIG1vZGVsXG4gICAgICAgICAqIHdpbGwgbm90IGJlIGRlc3Ryb3llZC5cbiAgICAgICAgICogSXQgaXMgc2FmZSB0byBjYWxsIHNldE1vZGVsKG51bGwpIHRvIHNpbXBseSBkZXRhY2ggdGhlIGN1cnJlbnQgbW9kZWwgZnJvbSB0aGUgZWRpdG9yLlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0TW9kZWwobW9kZWw6IElUZXh0TW9kZWwgfCBudWxsKTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgYWxsIHRoZSBlZGl0b3IgY29tcHV0ZWQgb3B0aW9ucy5cbiAgICAgICAgICovXG4gICAgICAgIGdldE9wdGlvbnMoKTogSUNvbXB1dGVkRWRpdG9yT3B0aW9ucztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgYSBzcGVjaWZpYyBlZGl0b3Igb3B0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0T3B0aW9uPFQgZXh0ZW5kcyBFZGl0b3JPcHRpb24+KGlkOiBUKTogRmluZENvbXB1dGVkRWRpdG9yT3B0aW9uVmFsdWVCeUlkPFQ+O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgZWRpdG9yJ3MgY29uZmlndXJhdGlvbiAod2l0aG91dCBhbnkgdmFsaWRhdGlvbiBvciBkZWZhdWx0cykuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRSYXdPcHRpb25zKCk6IElFZGl0b3JPcHRpb25zO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHZhbHVlIG9mIHRoZSBjdXJyZW50IG1vZGVsIGF0dGFjaGVkIHRvIHRoaXMgZWRpdG9yLlxuICAgICAgICAgKiBAc2VlIHtAbGluayBJVGV4dE1vZGVsLmdldFZhbHVlfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0VmFsdWUob3B0aW9ucz86IHtcbiAgICAgICAgICAgIHByZXNlcnZlQk9NOiBib29sZWFuO1xuICAgICAgICAgICAgbGluZUVuZGluZzogc3RyaW5nO1xuICAgICAgICB9KTogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IHRoZSB2YWx1ZSBvZiB0aGUgY3VycmVudCBtb2RlbCBhdHRhY2hlZCB0byB0aGlzIGVkaXRvci5cbiAgICAgICAgICogQHNlZSB7QGxpbmsgSVRleHRNb2RlbC5zZXRWYWx1ZX1cbiAgICAgICAgICovXG4gICAgICAgIHNldFZhbHVlKG5ld1ZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSB3aWR0aCBvZiB0aGUgZWRpdG9yJ3MgY29udGVudC5cbiAgICAgICAgICogVGhpcyBpcyBpbmZvcm1hdGlvbiB0aGF0IGlzIFwiZXJhc2VkXCIgd2hlbiBjb21wdXRpbmcgYHNjcm9sbFdpZHRoID0gTWF0aC5tYXgoY29udGVudFdpZHRoLCB3aWR0aClgXG4gICAgICAgICAqL1xuICAgICAgICBnZXRDb250ZW50V2lkdGgoKTogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSBzY3JvbGxXaWR0aCBvZiB0aGUgZWRpdG9yJ3Mgdmlld3BvcnQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRTY3JvbGxXaWR0aCgpOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdGhlIHNjcm9sbExlZnQgb2YgdGhlIGVkaXRvcidzIHZpZXdwb3J0LlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0U2Nyb2xsTGVmdCgpOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdGhlIGhlaWdodCBvZiB0aGUgZWRpdG9yJ3MgY29udGVudC5cbiAgICAgICAgICogVGhpcyBpcyBpbmZvcm1hdGlvbiB0aGF0IGlzIFwiZXJhc2VkXCIgd2hlbiBjb21wdXRpbmcgYHNjcm9sbEhlaWdodCA9IE1hdGgubWF4KGNvbnRlbnRIZWlnaHQsIGhlaWdodClgXG4gICAgICAgICAqL1xuICAgICAgICBnZXRDb250ZW50SGVpZ2h0KCk6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgc2Nyb2xsSGVpZ2h0IG9mIHRoZSBlZGl0b3IncyB2aWV3cG9ydC5cbiAgICAgICAgICovXG4gICAgICAgIGdldFNjcm9sbEhlaWdodCgpOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdGhlIHNjcm9sbFRvcCBvZiB0aGUgZWRpdG9yJ3Mgdmlld3BvcnQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRTY3JvbGxUb3AoKTogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2hhbmdlIHRoZSBzY3JvbGxMZWZ0IG9mIHRoZSBlZGl0b3IncyB2aWV3cG9ydC5cbiAgICAgICAgICovXG4gICAgICAgIHNldFNjcm9sbExlZnQobmV3U2Nyb2xsTGVmdDogbnVtYmVyLCBzY3JvbGxUeXBlPzogU2Nyb2xsVHlwZSk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGFuZ2UgdGhlIHNjcm9sbFRvcCBvZiB0aGUgZWRpdG9yJ3Mgdmlld3BvcnQuXG4gICAgICAgICAqL1xuICAgICAgICBzZXRTY3JvbGxUb3AobmV3U2Nyb2xsVG9wOiBudW1iZXIsIHNjcm9sbFR5cGU/OiBTY3JvbGxUeXBlKTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENoYW5nZSB0aGUgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSBlZGl0b3IncyB2aWV3cG9ydC5cbiAgICAgICAgICovXG4gICAgICAgIHNldFNjcm9sbFBvc2l0aW9uKHBvc2l0aW9uOiBJTmV3U2Nyb2xsUG9zaXRpb24sIHNjcm9sbFR5cGU/OiBTY3JvbGxUeXBlKTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBhbiBhY3Rpb24gdGhhdCBpcyBhIGNvbnRyaWJ1dGlvbiB0byB0aGlzIGVkaXRvci5cbiAgICAgICAgICogQGlkIFVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBjb250cmlidXRpb24uXG4gICAgICAgICAqIEByZXR1cm4gVGhlIGFjdGlvbiBvciBudWxsIGlmIGFjdGlvbiBub3QgZm91bmQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRBY3Rpb24oaWQ6IHN0cmluZyk6IElFZGl0b3JBY3Rpb247XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFeGVjdXRlIGEgY29tbWFuZCBvbiB0aGUgZWRpdG9yLlxuICAgICAgICAgKiBUaGUgZWRpdHMgd2lsbCBsYW5kIG9uIHRoZSB1bmRvLXJlZG8gc3RhY2ssIGJ1dCBubyBcInVuZG8gc3RvcFwiIHdpbGwgYmUgcHVzaGVkLlxuICAgICAgICAgKiBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2YgdGhlIGNhbGwuXG4gICAgICAgICAqIEBwYXJhbSBjb21tYW5kIFRoZSBjb21tYW5kIHRvIGV4ZWN1dGVcbiAgICAgICAgICovXG4gICAgICAgIGV4ZWN1dGVDb21tYW5kKHNvdXJjZTogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCwgY29tbWFuZDogSUNvbW1hbmQpOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlIGFuIFwidW5kbyBzdG9wXCIgaW4gdGhlIHVuZG8tcmVkbyBzdGFjay5cbiAgICAgICAgICovXG4gICAgICAgIHB1c2hVbmRvU3RvcCgpOiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlIHRoZSBcInVuZG8gc3RvcFwiIGluIHRoZSB1bmRvLXJlZG8gc3RhY2suXG4gICAgICAgICAqL1xuICAgICAgICBwb3BVbmRvU3RvcCgpOiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRXhlY3V0ZSBlZGl0cyBvbiB0aGUgZWRpdG9yLlxuICAgICAgICAgKiBUaGUgZWRpdHMgd2lsbCBsYW5kIG9uIHRoZSB1bmRvLXJlZG8gc3RhY2ssIGJ1dCBubyBcInVuZG8gc3RvcFwiIHdpbGwgYmUgcHVzaGVkLlxuICAgICAgICAgKiBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2YgdGhlIGNhbGwuXG4gICAgICAgICAqIEBwYXJhbSBlZGl0cyBUaGUgZWRpdHMgdG8gZXhlY3V0ZS5cbiAgICAgICAgICogQHBhcmFtIGVuZEN1cnNvclN0YXRlIEN1cnNvciBzdGF0ZSBhZnRlciB0aGUgZWRpdHMgd2VyZSBhcHBsaWVkLlxuICAgICAgICAgKi9cbiAgICAgICAgZXhlY3V0ZUVkaXRzKHNvdXJjZTogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCwgZWRpdHM6IElJZGVudGlmaWVkU2luZ2xlRWRpdE9wZXJhdGlvbltdLCBlbmRDdXJzb3JTdGF0ZT86IElDdXJzb3JTdGF0ZUNvbXB1dGVyIHwgU2VsZWN0aW9uW10pOiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRXhlY3V0ZSBtdWx0aXBsZSAoY29uY29taXRhbnQpIGNvbW1hbmRzIG9uIHRoZSBlZGl0b3IuXG4gICAgICAgICAqIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvZiB0aGUgY2FsbC5cbiAgICAgICAgICogQHBhcmFtIGNvbW1hbmQgVGhlIGNvbW1hbmRzIHRvIGV4ZWN1dGVcbiAgICAgICAgICovXG4gICAgICAgIGV4ZWN1dGVDb21tYW5kcyhzb3VyY2U6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQsIGNvbW1hbmRzOiAoSUNvbW1hbmQgfCBudWxsKVtdKTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBhbGwgdGhlIGRlY29yYXRpb25zIG9uIGEgbGluZSAoZmlsdGVyaW5nIG91dCBkZWNvcmF0aW9ucyBmcm9tIG90aGVyIGVkaXRvcnMpLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0TGluZURlY29yYXRpb25zKGxpbmVOdW1iZXI6IG51bWJlcik6IElNb2RlbERlY29yYXRpb25bXSB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbGwgZGVjb3JhdGlvbnMgYWRkZWQgdGhyb3VnaCB0aGlzIGNhbGwgd2lsbCBnZXQgdGhlIG93bmVySWQgb2YgdGhpcyBlZGl0b3IuXG4gICAgICAgICAqIEBzZWUge0BsaW5rIElUZXh0TW9kZWwuZGVsdGFEZWNvcmF0aW9uc31cbiAgICAgICAgICovXG4gICAgICAgIGRlbHRhRGVjb3JhdGlvbnMob2xkRGVjb3JhdGlvbnM6IHN0cmluZ1tdLCBuZXdEZWNvcmF0aW9uczogSU1vZGVsRGVsdGFEZWNvcmF0aW9uW10pOiBzdHJpbmdbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgbGF5b3V0IGluZm8gZm9yIHRoZSBlZGl0b3IuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRMYXlvdXRJbmZvKCk6IEVkaXRvckxheW91dEluZm87XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSByYW5nZXMgdGhhdCBhcmUgY3VycmVudGx5IHZpc2libGUuXG4gICAgICAgICAqIERvZXMgbm90IGFjY291bnQgZm9yIGhvcml6b250YWwgc2Nyb2xsaW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0VmlzaWJsZVJhbmdlcygpOiBSYW5nZVtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSB2ZXJ0aWNhbCBwb3NpdGlvbiAodG9wIG9mZnNldCkgZm9yIHRoZSBsaW5lIHcuci50LiB0byB0aGUgZmlyc3QgbGluZS5cbiAgICAgICAgICovXG4gICAgICAgIGdldFRvcEZvckxpbmVOdW1iZXIobGluZU51bWJlcjogbnVtYmVyKTogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSB2ZXJ0aWNhbCBwb3NpdGlvbiAodG9wIG9mZnNldCkgZm9yIHRoZSBwb3NpdGlvbiB3LnIudC4gdG8gdGhlIGZpcnN0IGxpbmUuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRUb3BGb3JQb3NpdGlvbihsaW5lTnVtYmVyOiBudW1iZXIsIGNvbHVtbjogbnVtYmVyKTogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgZWRpdG9yJ3MgY29udGFpbmVyIGRvbSBub2RlXG4gICAgICAgICAqL1xuICAgICAgICBnZXRDb250YWluZXJEb21Ob2RlKCk6IEhUTUxFbGVtZW50O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgZWRpdG9yJ3MgZG9tIG5vZGVcbiAgICAgICAgICovXG4gICAgICAgIGdldERvbU5vZGUoKTogSFRNTEVsZW1lbnQgfCBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogQWRkIGEgY29udGVudCB3aWRnZXQuIFdpZGdldHMgbXVzdCBoYXZlIHVuaXF1ZSBpZHMsIG90aGVyd2lzZSB0aGV5IHdpbGwgYmUgb3ZlcndyaXR0ZW4uXG4gICAgICAgICAqL1xuICAgICAgICBhZGRDb250ZW50V2lkZ2V0KHdpZGdldDogSUNvbnRlbnRXaWRnZXQpOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICogTGF5b3V0L1JlcG9zaXRpb24gYSBjb250ZW50IHdpZGdldC4gVGhpcyBpcyBhIHBpbmcgdG8gdGhlIGVkaXRvciB0byBjYWxsIHdpZGdldC5nZXRQb3NpdGlvbigpXG4gICAgICAgICAqIGFuZCB1cGRhdGUgYXBwcm9wcmlhdGVseS5cbiAgICAgICAgICovXG4gICAgICAgIGxheW91dENvbnRlbnRXaWRnZXQod2lkZ2V0OiBJQ29udGVudFdpZGdldCk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW1vdmUgYSBjb250ZW50IHdpZGdldC5cbiAgICAgICAgICovXG4gICAgICAgIHJlbW92ZUNvbnRlbnRXaWRnZXQod2lkZ2V0OiBJQ29udGVudFdpZGdldCk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGQgYW4gb3ZlcmxheSB3aWRnZXQuIFdpZGdldHMgbXVzdCBoYXZlIHVuaXF1ZSBpZHMsIG90aGVyd2lzZSB0aGV5IHdpbGwgYmUgb3ZlcndyaXR0ZW4uXG4gICAgICAgICAqL1xuICAgICAgICBhZGRPdmVybGF5V2lkZ2V0KHdpZGdldDogSU92ZXJsYXlXaWRnZXQpOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICogTGF5b3V0L1JlcG9zaXRpb24gYW4gb3ZlcmxheSB3aWRnZXQuIFRoaXMgaXMgYSBwaW5nIHRvIHRoZSBlZGl0b3IgdG8gY2FsbCB3aWRnZXQuZ2V0UG9zaXRpb24oKVxuICAgICAgICAgKiBhbmQgdXBkYXRlIGFwcHJvcHJpYXRlbHkuXG4gICAgICAgICAqL1xuICAgICAgICBsYXlvdXRPdmVybGF5V2lkZ2V0KHdpZGdldDogSU92ZXJsYXlXaWRnZXQpOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlIGFuIG92ZXJsYXkgd2lkZ2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlT3ZlcmxheVdpZGdldCh3aWRnZXQ6IElPdmVybGF5V2lkZ2V0KTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENoYW5nZSB0aGUgdmlldyB6b25lcy4gVmlldyB6b25lcyBhcmUgbG9zdCB3aGVuIGEgbmV3IG1vZGVsIGlzIGF0dGFjaGVkIHRvIHRoZSBlZGl0b3IuXG4gICAgICAgICAqL1xuICAgICAgICBjaGFuZ2VWaWV3Wm9uZXMoY2FsbGJhY2s6IChhY2Nlc3NvcjogSVZpZXdab25lQ2hhbmdlQWNjZXNzb3IpID0+IHZvaWQpOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSBob3Jpem9udGFsIHBvc2l0aW9uIChsZWZ0IG9mZnNldCkgZm9yIHRoZSBjb2x1bW4gdy5yLnQgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGluZS5cbiAgICAgICAgICogVGhpcyBtZXRob2Qgd29ya3Mgb25seSBpZiB0aGUgbGluZSBgbGluZU51bWJlcmAgaXMgY3VycmVudGx5IHJlbmRlcmVkIChpbiB0aGUgZWRpdG9yJ3Mgdmlld3BvcnQpLlxuICAgICAgICAgKiBVc2UgdGhpcyBtZXRob2Qgd2l0aCBjYXV0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0T2Zmc2V0Rm9yQ29sdW1uKGxpbmVOdW1iZXI6IG51bWJlciwgY29sdW1uOiBudW1iZXIpOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGb3JjZSBhbiBlZGl0b3IgcmVuZGVyIG5vdy5cbiAgICAgICAgICovXG4gICAgICAgIHJlbmRlcihmb3JjZVJlZHJhdz86IGJvb2xlYW4pOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSBoaXQgdGVzdCB0YXJnZXQgYXQgY29vcmRpbmF0ZXMgYGNsaWVudFhgIGFuZCBgY2xpZW50WWAuXG4gICAgICAgICAqIFRoZSBjb29yZGluYXRlcyBhcmUgcmVsYXRpdmUgdG8gdGhlIHRvcC1sZWZ0IG9mIHRoZSB2aWV3cG9ydC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMgSGl0IHRlc3QgdGFyZ2V0IG9yIG51bGwgaWYgdGhlIGNvb3JkaW5hdGVzIGZhbGwgb3V0c2lkZSB0aGUgZWRpdG9yIG9yIHRoZSBlZGl0b3IgaGFzIG5vIG1vZGVsLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0VGFyZ2V0QXRDbGllbnRQb2ludChjbGllbnRYOiBudW1iZXIsIGNsaWVudFk6IG51bWJlcik6IElNb3VzZVRhcmdldCB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdGhlIHZpc2libGUgcG9zaXRpb24gZm9yIGBwb3NpdGlvbmAuXG4gICAgICAgICAqIFRoZSByZXN1bHQgcG9zaXRpb24gdGFrZXMgc2Nyb2xsaW5nIGludG8gYWNjb3VudCBhbmQgaXMgcmVsYXRpdmUgdG8gdGhlIHRvcCBsZWZ0IGNvcm5lciBvZiB0aGUgZWRpdG9yLlxuICAgICAgICAgKiBFeHBsYW5hdGlvbiAxOiB0aGUgcmVzdWx0cyBvZiB0aGlzIG1ldGhvZCB3aWxsIGNoYW5nZSBmb3IgdGhlIHNhbWUgYHBvc2l0aW9uYCBpZiB0aGUgdXNlciBzY3JvbGxzIHRoZSBlZGl0b3IuXG4gICAgICAgICAqIEV4cGxhbmF0aW9uIDI6IHRoZSByZXN1bHRzIG9mIHRoaXMgbWV0aG9kIHdpbGwgbm90IGNoYW5nZSBpZiB0aGUgY29udGFpbmVyIG9mIHRoZSBlZGl0b3IgZ2V0cyByZXBvc2l0aW9uZWQuXG4gICAgICAgICAqIFdhcm5pbmc6IHRoZSByZXN1bHRzIG9mIHRoaXMgbWV0aG9kIGFyZSBpbmFjY3VyYXRlIGZvciBwb3NpdGlvbnMgdGhhdCBhcmUgb3V0c2lkZSB0aGUgY3VycmVudCBlZGl0b3Igdmlld3BvcnQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRTY3JvbGxlZFZpc2libGVQb3NpdGlvbihwb3NpdGlvbjogSVBvc2l0aW9uKToge1xuICAgICAgICAgICAgdG9wOiBudW1iZXI7XG4gICAgICAgICAgICBsZWZ0OiBudW1iZXI7XG4gICAgICAgICAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICAgICAgfSB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcHBseSB0aGUgc2FtZSBmb250IHNldHRpbmdzIGFzIHRoZSBlZGl0b3IgdG8gYHRhcmdldGAuXG4gICAgICAgICAqL1xuICAgICAgICBhcHBseUZvbnRJbmZvKHRhcmdldDogSFRNTEVsZW1lbnQpOiB2b2lkO1xuICAgICAgICBzZXRCYW5uZXIoYmFubmVyRG9tTm9kZTogSFRNTEVsZW1lbnQgfCBudWxsLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5mb3JtYXRpb24gYWJvdXQgYSBsaW5lIGluIHRoZSBkaWZmIGVkaXRvclxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSURpZmZMaW5lSW5mb3JtYXRpb24ge1xuICAgICAgICByZWFkb25seSBlcXVpdmFsZW50TGluZU51bWJlcjogbnVtYmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgcmljaCBkaWZmIGVkaXRvci5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElEaWZmRWRpdG9yIGV4dGVuZHMgSUVkaXRvciB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAc2VlIHtAbGluayBJQ29kZUVkaXRvci5nZXREb21Ob2RlfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0RG9tTm9kZSgpOiBIVE1MRWxlbWVudDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgZGlmZiBpbmZvcm1hdGlvbiBjb21wdXRlZCBieSB0aGlzIGRpZmYgZWRpdG9yIGhhcyBiZWVuIHVwZGF0ZWQuXG4gICAgICAgICAqIEBldmVudFxuICAgICAgICAgKi9cbiAgICAgICAgb25EaWRVcGRhdGVEaWZmKGxpc3RlbmVyOiAoKSA9PiB2b2lkKTogSURpc3Bvc2FibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTYXZlcyBjdXJyZW50IHZpZXcgc3RhdGUgb2YgdGhlIGVkaXRvciBpbiBhIHNlcmlhbGl6YWJsZSBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICBzYXZlVmlld1N0YXRlKCk6IElEaWZmRWRpdG9yVmlld1N0YXRlIHwgbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc3RvcmVzIHRoZSB2aWV3IHN0YXRlIG9mIHRoZSBlZGl0b3IgZnJvbSBhIHNlcmlhbGl6YWJsZSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGBzYXZlVmlld1N0YXRlYC5cbiAgICAgICAgICovXG4gICAgICAgIHJlc3RvcmVWaWV3U3RhdGUoc3RhdGU6IElEaWZmRWRpdG9yVmlld1N0YXRlKTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFR5cGUgdGhlIGdldE1vZGVsKCkgb2YgSUVkaXRvci5cbiAgICAgICAgICovXG4gICAgICAgIGdldE1vZGVsKCk6IElEaWZmRWRpdG9yTW9kZWwgfCBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgY3VycmVudCBtb2RlbCBhdHRhY2hlZCB0byB0aGlzIGVkaXRvci5cbiAgICAgICAgICogSWYgdGhlIHByZXZpb3VzIG1vZGVsIHdhcyBjcmVhdGVkIGJ5IHRoZSBlZGl0b3IgdmlhIHRoZSB2YWx1ZSBrZXkgaW4gdGhlIG9wdGlvbnNcbiAgICAgICAgICogbGl0ZXJhbCBvYmplY3QsIGl0IHdpbGwgYmUgZGVzdHJveWVkLiBPdGhlcndpc2UsIGlmIHRoZSBwcmV2aW91cyBtb2RlbCB3YXMgc2V0XG4gICAgICAgICAqIHZpYSBzZXRNb2RlbCwgb3IgdGhlIG1vZGVsIGtleSBpbiB0aGUgb3B0aW9ucyBsaXRlcmFsIG9iamVjdCwgdGhlIHByZXZpb3VzIG1vZGVsXG4gICAgICAgICAqIHdpbGwgbm90IGJlIGRlc3Ryb3llZC5cbiAgICAgICAgICogSXQgaXMgc2FmZSB0byBjYWxsIHNldE1vZGVsKG51bGwpIHRvIHNpbXBseSBkZXRhY2ggdGhlIGN1cnJlbnQgbW9kZWwgZnJvbSB0aGUgZWRpdG9yLlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0TW9kZWwobW9kZWw6IElEaWZmRWRpdG9yTW9kZWwgfCBudWxsKTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgYG9yaWdpbmFsYCBlZGl0b3IuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRPcmlnaW5hbEVkaXRvcigpOiBJQ29kZUVkaXRvcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgYG1vZGlmaWVkYCBlZGl0b3IuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRNb2RpZmllZEVkaXRvcigpOiBJQ29kZUVkaXRvcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgY29tcHV0ZWQgZGlmZiBpbmZvcm1hdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGdldExpbmVDaGFuZ2VzKCk6IElMaW5lQ2hhbmdlW10gfCBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGluZm9ybWF0aW9uIGJhc2VkIG9uIGNvbXB1dGVkIGRpZmYgYWJvdXQgYSBsaW5lIG51bWJlciBmcm9tIHRoZSBvcmlnaW5hbCBtb2RlbC5cbiAgICAgICAgICogSWYgdGhlIGRpZmYgY29tcHV0YXRpb24gaXMgbm90IGZpbmlzaGVkIG9yIHRoZSBtb2RlbCBpcyBtaXNzaW5nLCB3aWxsIHJldHVybiBudWxsLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0RGlmZkxpbmVJbmZvcm1hdGlvbkZvck9yaWdpbmFsKGxpbmVOdW1iZXI6IG51bWJlcik6IElEaWZmTGluZUluZm9ybWF0aW9uIHwgbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBpbmZvcm1hdGlvbiBiYXNlZCBvbiBjb21wdXRlZCBkaWZmIGFib3V0IGEgbGluZSBudW1iZXIgZnJvbSB0aGUgbW9kaWZpZWQgbW9kZWwuXG4gICAgICAgICAqIElmIHRoZSBkaWZmIGNvbXB1dGF0aW9uIGlzIG5vdCBmaW5pc2hlZCBvciB0aGUgbW9kZWwgaXMgbWlzc2luZywgd2lsbCByZXR1cm4gbnVsbC5cbiAgICAgICAgICovXG4gICAgICAgIGdldERpZmZMaW5lSW5mb3JtYXRpb25Gb3JNb2RpZmllZChsaW5lTnVtYmVyOiBudW1iZXIpOiBJRGlmZkxpbmVJbmZvcm1hdGlvbiB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGRhdGUgdGhlIGVkaXRvcidzIG9wdGlvbnMgYWZ0ZXIgdGhlIGVkaXRvciBoYXMgYmVlbiBjcmVhdGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdXBkYXRlT3B0aW9ucyhuZXdPcHRpb25zOiBJRGlmZkVkaXRvck9wdGlvbnMpOiB2b2lkO1xuICAgIH1cblxuICAgIGV4cG9ydCBjbGFzcyBGb250SW5mbyBleHRlbmRzIEJhcmVGb250SW5mbyB7XG4gICAgICAgIHJlYWRvbmx5IF9lZGl0b3JTdHlsaW5nQnJhbmQ6IHZvaWQ7XG4gICAgICAgIHJlYWRvbmx5IHZlcnNpb246IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgaXNUcnVzdGVkOiBib29sZWFuO1xuICAgICAgICByZWFkb25seSBpc01vbm9zcGFjZTogYm9vbGVhbjtcbiAgICAgICAgcmVhZG9ubHkgdHlwaWNhbEhhbGZ3aWR0aENoYXJhY3RlcldpZHRoOiBudW1iZXI7XG4gICAgICAgIHJlYWRvbmx5IHR5cGljYWxGdWxsd2lkdGhDaGFyYWN0ZXJXaWR0aDogbnVtYmVyO1xuICAgICAgICByZWFkb25seSBjYW5Vc2VIYWxmd2lkdGhSaWdodHdhcmRzQXJyb3c6IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IHNwYWNlV2lkdGg6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgbWlkZG90V2lkdGg6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgd3NtaWRkb3RXaWR0aDogbnVtYmVyO1xuICAgICAgICByZWFkb25seSBtYXhEaWdpdFdpZHRoOiBudW1iZXI7XG4gICAgfVxuXG4gICAgZXhwb3J0IGNsYXNzIEJhcmVGb250SW5mbyB7XG4gICAgICAgIHJlYWRvbmx5IF9iYXJlRm9udEluZm9CcmFuZDogdm9pZDtcbiAgICAgICAgcmVhZG9ubHkgem9vbUxldmVsOiBudW1iZXI7XG4gICAgICAgIHJlYWRvbmx5IHBpeGVsUmF0aW86IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgZm9udEZhbWlseTogc3RyaW5nO1xuICAgICAgICByZWFkb25seSBmb250V2VpZ2h0OiBzdHJpbmc7XG4gICAgICAgIHJlYWRvbmx5IGZvbnRTaXplOiBudW1iZXI7XG4gICAgICAgIHJlYWRvbmx5IGZvbnRGZWF0dXJlU2V0dGluZ3M6IHN0cmluZztcbiAgICAgICAgcmVhZG9ubHkgbGluZUhlaWdodDogbnVtYmVyO1xuICAgICAgICByZWFkb25seSBsZXR0ZXJTcGFjaW5nOiBudW1iZXI7XG4gICAgfVxuXG4gICAgLy9jb21wYXRpYmlsaXR5OlxuICAgIGV4cG9ydCB0eXBlIElSZWFkT25seU1vZGVsID0gSVRleHRNb2RlbDtcbiAgICBleHBvcnQgdHlwZSBJTW9kZWwgPSBJVGV4dE1vZGVsO1xufVxuXG5kZWNsYXJlIG5hbWVzcGFjZSBtb25hY28ubGFuZ3VhZ2VzIHtcblxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgaW5mb3JtYXRpb24gYWJvdXQgYSBuZXcgbGFuZ3VhZ2UuXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyKGxhbmd1YWdlOiBJTGFuZ3VhZ2VFeHRlbnNpb25Qb2ludCk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGluZm9ybWF0aW9uIG9mIGFsbCB0aGUgcmVnaXN0ZXJlZCBsYW5ndWFnZXMuXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGdldExhbmd1YWdlcygpOiBJTGFuZ3VhZ2VFeHRlbnNpb25Qb2ludFtdO1xuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGdldEVuY29kZWRMYW5ndWFnZUlkKGxhbmd1YWdlSWQ6IHN0cmluZyk6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIEFuIGV2ZW50IGVtaXR0ZWQgd2hlbiBhIGxhbmd1YWdlIGlzIGZpcnN0IHRpbWUgbmVlZGVkIChlLmcuIGEgbW9kZWwgaGFzIGl0IHNldCkuXG4gICAgICogQGV2ZW50XG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIG9uTGFuZ3VhZ2UobGFuZ3VhZ2VJZDogc3RyaW5nLCBjYWxsYmFjazogKCkgPT4gdm9pZCk6IElEaXNwb3NhYmxlO1xuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBlZGl0aW5nIGNvbmZpZ3VyYXRpb24gZm9yIGEgbGFuZ3VhZ2UuXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHNldExhbmd1YWdlQ29uZmlndXJhdGlvbihsYW5ndWFnZUlkOiBzdHJpbmcsIGNvbmZpZ3VyYXRpb246IExhbmd1YWdlQ29uZmlndXJhdGlvbik6IElEaXNwb3NhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQSB0b2tlbi5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElUb2tlbiB7XG4gICAgICAgIHN0YXJ0SW5kZXg6IG51bWJlcjtcbiAgICAgICAgc2NvcGVzOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHJlc3VsdCBvZiBhIGxpbmUgdG9rZW5pemF0aW9uLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUxpbmVUb2tlbnMge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGxpc3Qgb2YgdG9rZW5zIG9uIHRoZSBsaW5lLlxuICAgICAgICAgKi9cbiAgICAgICAgdG9rZW5zOiBJVG9rZW5bXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB0b2tlbml6YXRpb24gZW5kIHN0YXRlLlxuICAgICAgICAgKiBBIHBvaW50ZXIgd2lsbCBiZSBoZWxkIHRvIHRoaXMgYW5kIHRoZSBvYmplY3Qgc2hvdWxkIG5vdCBiZSBtb2RpZmllZCBieSB0aGUgdG9rZW5pemVyIGFmdGVyIHRoZSBwb2ludGVyIGlzIHJldHVybmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgZW5kU3RhdGU6IElTdGF0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmVzdWx0IG9mIGEgbGluZSB0b2tlbml6YXRpb24uXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJRW5jb2RlZExpbmVUb2tlbnMge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHRva2VucyBvbiB0aGUgbGluZSBpbiBhIGJpbmFyeSwgZW5jb2RlZCBmb3JtYXQuIEVhY2ggdG9rZW4gb2NjdXBpZXMgdHdvIGFycmF5IGluZGljZXMuIEZvciB0b2tlbiBpOlxuICAgICAgICAgKiAgLSBhdCBvZmZzZXQgMippID0+IHN0YXJ0SW5kZXhcbiAgICAgICAgICogIC0gYXQgb2Zmc2V0IDIqaSArIDEgPT4gbWV0YWRhdGFcbiAgICAgICAgICogTWV0YSBkYXRhIGlzIGluIGJpbmFyeSBmb3JtYXQ6XG4gICAgICAgICAqIC0gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgKiAgICAgMzMyMiAyMjIyIDIyMjIgMTExMSAxMTExIDExMDAgMDAwMCAwMDAwXG4gICAgICAgICAqICAgICAxMDk4IDc2NTQgMzIxMCA5ODc2IDU0MzIgMTA5OCA3NjU0IDMyMTBcbiAgICAgICAgICogLSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAqICAgICBiYmJiIGJiYmIgYmZmZiBmZmZmIGZmRkYgRlRUVCBMTExMIExMTExcbiAgICAgICAgICogLSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAqICAtIEwgPSBFbmNvZGVkTGFuZ3VhZ2VJZCAoOCBiaXRzKTogVXNlIGBnZXRFbmNvZGVkTGFuZ3VhZ2VJZGAgdG8gZ2V0IHRoZSBlbmNvZGVkIElEIG9mIGEgbGFuZ3VhZ2UuXG4gICAgICAgICAqICAtIFQgPSBTdGFuZGFyZFRva2VuVHlwZSAoMyBiaXRzKTogT3RoZXIgPSAwLCBDb21tZW50ID0gMSwgU3RyaW5nID0gMiwgUmVnRXggPSA0LlxuICAgICAgICAgKiAgLSBGID0gRm9udFN0eWxlICgzIGJpdHMpOiBOb25lID0gMCwgSXRhbGljID0gMSwgQm9sZCA9IDIsIFVuZGVybGluZSA9IDQuXG4gICAgICAgICAqICAtIGYgPSBmb3JlZ3JvdW5kIENvbG9ySWQgKDkgYml0cylcbiAgICAgICAgICogIC0gYiA9IGJhY2tncm91bmQgQ29sb3JJZCAoOSBiaXRzKVxuICAgICAgICAgKiAgLSBUaGUgY29sb3IgdmFsdWUgZm9yIGVhY2ggY29sb3JJZCBpcyBkZWZpbmVkIGluIElTdGFuZGFsb25lVGhlbWVEYXRhLmN1c3RvbVRva2VuQ29sb3JzOlxuICAgICAgICAgKiBlLmcuIGNvbG9ySWQgPSAxIGlzIHN0b3JlZCBpbiBJU3RhbmRhbG9uZVRoZW1lRGF0YS5jdXN0b21Ub2tlbkNvbG9yc1sxXS4gQ29sb3IgaWQgPSAwIG1lYW5zIG5vIGNvbG9yLFxuICAgICAgICAgKiBpZCA9IDEgaXMgZm9yIHRoZSBkZWZhdWx0IGZvcmVncm91bmQgY29sb3IsIGlkID0gMiBmb3IgdGhlIGRlZmF1bHQgYmFja2dyb3VuZC5cbiAgICAgICAgICovXG4gICAgICAgIHRva2VuczogVWludDMyQXJyYXk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdG9rZW5pemF0aW9uIGVuZCBzdGF0ZS5cbiAgICAgICAgICogQSBwb2ludGVyIHdpbGwgYmUgaGVsZCB0byB0aGlzIGFuZCB0aGUgb2JqZWN0IHNob3VsZCBub3QgYmUgbW9kaWZpZWQgYnkgdGhlIHRva2VuaXplciBhZnRlciB0aGUgcG9pbnRlciBpcyByZXR1cm5lZC5cbiAgICAgICAgICovXG4gICAgICAgIGVuZFN0YXRlOiBJU3RhdGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBcIm1hbnVhbFwiIHByb3ZpZGVyIG9mIHRva2Vucy5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIFRva2Vuc1Byb3ZpZGVyIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBpbml0aWFsIHN0YXRlIG9mIGEgbGFuZ3VhZ2UuIFdpbGwgYmUgdGhlIHN0YXRlIHBhc3NlZCBpbiB0byB0b2tlbml6ZSB0aGUgZmlyc3QgbGluZS5cbiAgICAgICAgICovXG4gICAgICAgIGdldEluaXRpYWxTdGF0ZSgpOiBJU3RhdGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUb2tlbml6ZSBhIGxpbmUgZ2l2ZW4gdGhlIHN0YXRlIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpbmUuXG4gICAgICAgICAqL1xuICAgICAgICB0b2tlbml6ZShsaW5lOiBzdHJpbmcsIHN0YXRlOiBJU3RhdGUpOiBJTGluZVRva2VucztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIFwibWFudWFsXCIgcHJvdmlkZXIgb2YgdG9rZW5zLCByZXR1cm5pbmcgdG9rZW5zIGluIGEgYmluYXJ5IGZvcm0uXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBFbmNvZGVkVG9rZW5zUHJvdmlkZXIge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGluaXRpYWwgc3RhdGUgb2YgYSBsYW5ndWFnZS4gV2lsbCBiZSB0aGUgc3RhdGUgcGFzc2VkIGluIHRvIHRva2VuaXplIHRoZSBmaXJzdCBsaW5lLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0SW5pdGlhbFN0YXRlKCk6IElTdGF0ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRva2VuaXplIGEgbGluZSBnaXZlbiB0aGUgc3RhdGUgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgbGluZS5cbiAgICAgICAgICovXG4gICAgICAgIHRva2VuaXplRW5jb2RlZChsaW5lOiBzdHJpbmcsIHN0YXRlOiBJU3RhdGUpOiBJRW5jb2RlZExpbmVUb2tlbnM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUb2tlbml6ZSBhIGxpbmUgZ2l2ZW4gdGhlIHN0YXRlIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpbmUuXG4gICAgICAgICAqL1xuICAgICAgICB0b2tlbml6ZT8obGluZTogc3RyaW5nLCBzdGF0ZTogSVN0YXRlKTogSUxpbmVUb2tlbnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHRoZSBjb2xvciBtYXAgdGhhdCBpcyB1c2VkIGZvciB0b2tlbiBjb2xvcnMuXG4gICAgICogU3VwcG9ydGVkIGZvcm1hdHMgKGhleCk6ICNSUkdHQkIsICRSUkdHQkJBQSwgI1JHQiwgI1JHQkFcbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gc2V0Q29sb3JNYXAoY29sb3JNYXA6IHN0cmluZ1tdIHwgbnVsbCk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHRva2VucyBwcm92aWRlciBmb3IgYSBsYW5ndWFnZSAobWFudWFsIGltcGxlbWVudGF0aW9uKS5cbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gc2V0VG9rZW5zUHJvdmlkZXIobGFuZ3VhZ2VJZDogc3RyaW5nLCBwcm92aWRlcjogVG9rZW5zUHJvdmlkZXIgfCBFbmNvZGVkVG9rZW5zUHJvdmlkZXIgfCBUaGVuYWJsZTxUb2tlbnNQcm92aWRlciB8IEVuY29kZWRUb2tlbnNQcm92aWRlcj4pOiBJRGlzcG9zYWJsZTtcblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgdG9rZW5zIHByb3ZpZGVyIGZvciBhIGxhbmd1YWdlIChtb25hcmNoIGltcGxlbWVudGF0aW9uKS5cbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gc2V0TW9uYXJjaFRva2Vuc1Byb3ZpZGVyKGxhbmd1YWdlSWQ6IHN0cmluZywgbGFuZ3VhZ2VEZWY6IElNb25hcmNoTGFuZ3VhZ2UgfCBUaGVuYWJsZTxJTW9uYXJjaExhbmd1YWdlPik6IElEaXNwb3NhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSByZWZlcmVuY2UgcHJvdmlkZXIgKHVzZWQgYnkgZS5nLiByZWZlcmVuY2Ugc2VhcmNoKS5cbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJSZWZlcmVuY2VQcm92aWRlcihsYW5ndWFnZUlkOiBzdHJpbmcsIHByb3ZpZGVyOiBSZWZlcmVuY2VQcm92aWRlcik6IElEaXNwb3NhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSByZW5hbWUgcHJvdmlkZXIgKHVzZWQgYnkgZS5nLiByZW5hbWUgc3ltYm9sKS5cbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJSZW5hbWVQcm92aWRlcihsYW5ndWFnZUlkOiBzdHJpbmcsIHByb3ZpZGVyOiBSZW5hbWVQcm92aWRlcik6IElEaXNwb3NhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBzaWduYXR1cmUgaGVscCBwcm92aWRlciAodXNlZCBieSBlLmcuIHBhcmFtZXRlciBoaW50cykuXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyU2lnbmF0dXJlSGVscFByb3ZpZGVyKGxhbmd1YWdlSWQ6IHN0cmluZywgcHJvdmlkZXI6IFNpZ25hdHVyZUhlbHBQcm92aWRlcik6IElEaXNwb3NhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBob3ZlciBwcm92aWRlciAodXNlZCBieSBlLmcuIGVkaXRvciBob3ZlcikuXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVySG92ZXJQcm92aWRlcihsYW5ndWFnZUlkOiBzdHJpbmcsIHByb3ZpZGVyOiBIb3ZlclByb3ZpZGVyKTogSURpc3Bvc2FibGU7XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIGRvY3VtZW50IHN5bWJvbCBwcm92aWRlciAodXNlZCBieSBlLmcuIG91dGxpbmUpLlxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRvY3VtZW50U3ltYm9sUHJvdmlkZXIobGFuZ3VhZ2VJZDogc3RyaW5nLCBwcm92aWRlcjogRG9jdW1lbnRTeW1ib2xQcm92aWRlcik6IElEaXNwb3NhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBkb2N1bWVudCBoaWdobGlnaHQgcHJvdmlkZXIgKHVzZWQgYnkgZS5nLiBoaWdobGlnaHQgb2NjdXJyZW5jZXMpLlxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRvY3VtZW50SGlnaGxpZ2h0UHJvdmlkZXIobGFuZ3VhZ2VJZDogc3RyaW5nLCBwcm92aWRlcjogRG9jdW1lbnRIaWdobGlnaHRQcm92aWRlcik6IElEaXNwb3NhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYW4gbGlua2VkIGVkaXRpbmcgcmFuZ2UgcHJvdmlkZXIuXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyTGlua2VkRWRpdGluZ1JhbmdlUHJvdmlkZXIobGFuZ3VhZ2VJZDogc3RyaW5nLCBwcm92aWRlcjogTGlua2VkRWRpdGluZ1JhbmdlUHJvdmlkZXIpOiBJRGlzcG9zYWJsZTtcblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgZGVmaW5pdGlvbiBwcm92aWRlciAodXNlZCBieSBlLmcuIGdvIHRvIGRlZmluaXRpb24pLlxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRlZmluaXRpb25Qcm92aWRlcihsYW5ndWFnZUlkOiBzdHJpbmcsIHByb3ZpZGVyOiBEZWZpbml0aW9uUHJvdmlkZXIpOiBJRGlzcG9zYWJsZTtcblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgaW1wbGVtZW50YXRpb24gcHJvdmlkZXIgKHVzZWQgYnkgZS5nLiBnbyB0byBpbXBsZW1lbnRhdGlvbikuXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVySW1wbGVtZW50YXRpb25Qcm92aWRlcihsYW5ndWFnZUlkOiBzdHJpbmcsIHByb3ZpZGVyOiBJbXBsZW1lbnRhdGlvblByb3ZpZGVyKTogSURpc3Bvc2FibGU7XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIHR5cGUgZGVmaW5pdGlvbiBwcm92aWRlciAodXNlZCBieSBlLmcuIGdvIHRvIHR5cGUgZGVmaW5pdGlvbikuXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyVHlwZURlZmluaXRpb25Qcm92aWRlcihsYW5ndWFnZUlkOiBzdHJpbmcsIHByb3ZpZGVyOiBUeXBlRGVmaW5pdGlvblByb3ZpZGVyKTogSURpc3Bvc2FibGU7XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIGNvZGUgbGVucyBwcm92aWRlciAodXNlZCBieSBlLmcuIGlubGluZSBjb2RlIGxlbnNlcykuXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyQ29kZUxlbnNQcm92aWRlcihsYW5ndWFnZUlkOiBzdHJpbmcsIHByb3ZpZGVyOiBDb2RlTGVuc1Byb3ZpZGVyKTogSURpc3Bvc2FibGU7XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIGNvZGUgYWN0aW9uIHByb3ZpZGVyICh1c2VkIGJ5IGUuZy4gcXVpY2sgZml4KS5cbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJDb2RlQWN0aW9uUHJvdmlkZXIobGFuZ3VhZ2VJZDogc3RyaW5nLCBwcm92aWRlcjogQ29kZUFjdGlvblByb3ZpZGVyLCBtZXRhZGF0YT86IENvZGVBY3Rpb25Qcm92aWRlck1ldGFkYXRhKTogSURpc3Bvc2FibGU7XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIGZvcm1hdHRlciB0aGF0IGNhbiBoYW5kbGUgb25seSBlbnRpcmUgbW9kZWxzLlxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRvY3VtZW50Rm9ybWF0dGluZ0VkaXRQcm92aWRlcihsYW5ndWFnZUlkOiBzdHJpbmcsIHByb3ZpZGVyOiBEb2N1bWVudEZvcm1hdHRpbmdFZGl0UHJvdmlkZXIpOiBJRGlzcG9zYWJsZTtcblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgZm9ybWF0dGVyIHRoYXQgY2FuIGhhbmRsZSBhIHJhbmdlIGluc2lkZSBhIG1vZGVsLlxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdFByb3ZpZGVyKGxhbmd1YWdlSWQ6IHN0cmluZywgcHJvdmlkZXI6IERvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdFByb3ZpZGVyKTogSURpc3Bvc2FibGU7XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIGZvcm1hdHRlciB0aGFuIGNhbiBkbyBmb3JtYXR0aW5nIGFzIHRoZSB1c2VyIHR5cGVzLlxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlck9uVHlwZUZvcm1hdHRpbmdFZGl0UHJvdmlkZXIobGFuZ3VhZ2VJZDogc3RyaW5nLCBwcm92aWRlcjogT25UeXBlRm9ybWF0dGluZ0VkaXRQcm92aWRlcik6IElEaXNwb3NhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBsaW5rIHByb3ZpZGVyIHRoYXQgY2FuIGZpbmQgbGlua3MgaW4gdGV4dC5cbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJMaW5rUHJvdmlkZXIobGFuZ3VhZ2VJZDogc3RyaW5nLCBwcm92aWRlcjogTGlua1Byb3ZpZGVyKTogSURpc3Bvc2FibGU7XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIGNvbXBsZXRpb24gaXRlbSBwcm92aWRlciAodXNlIGJ5IGUuZy4gc3VnZ2VzdGlvbnMpLlxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckNvbXBsZXRpb25JdGVtUHJvdmlkZXIobGFuZ3VhZ2VJZDogc3RyaW5nLCBwcm92aWRlcjogQ29tcGxldGlvbkl0ZW1Qcm92aWRlcik6IElEaXNwb3NhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBkb2N1bWVudCBjb2xvciBwcm92aWRlciAodXNlZCBieSBDb2xvciBQaWNrZXIsIENvbG9yIERlY29yYXRvcikuXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyQ29sb3JQcm92aWRlcihsYW5ndWFnZUlkOiBzdHJpbmcsIHByb3ZpZGVyOiBEb2N1bWVudENvbG9yUHJvdmlkZXIpOiBJRGlzcG9zYWJsZTtcblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgZm9sZGluZyByYW5nZSBwcm92aWRlclxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckZvbGRpbmdSYW5nZVByb3ZpZGVyKGxhbmd1YWdlSWQ6IHN0cmluZywgcHJvdmlkZXI6IEZvbGRpbmdSYW5nZVByb3ZpZGVyKTogSURpc3Bvc2FibGU7XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIGRlY2xhcmF0aW9uIHByb3ZpZGVyXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRGVjbGFyYXRpb25Qcm92aWRlcihsYW5ndWFnZUlkOiBzdHJpbmcsIHByb3ZpZGVyOiBEZWNsYXJhdGlvblByb3ZpZGVyKTogSURpc3Bvc2FibGU7XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIHNlbGVjdGlvbiByYW5nZSBwcm92aWRlclxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclNlbGVjdGlvblJhbmdlUHJvdmlkZXIobGFuZ3VhZ2VJZDogc3RyaW5nLCBwcm92aWRlcjogU2VsZWN0aW9uUmFuZ2VQcm92aWRlcik6IElEaXNwb3NhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBkb2N1bWVudCBzZW1hbnRpYyB0b2tlbnMgcHJvdmlkZXJcbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEb2N1bWVudFNlbWFudGljVG9rZW5zUHJvdmlkZXIobGFuZ3VhZ2VJZDogc3RyaW5nLCBwcm92aWRlcjogRG9jdW1lbnRTZW1hbnRpY1Rva2Vuc1Byb3ZpZGVyKTogSURpc3Bvc2FibGU7XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIGRvY3VtZW50IHJhbmdlIHNlbWFudGljIHRva2VucyBwcm92aWRlclxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRvY3VtZW50UmFuZ2VTZW1hbnRpY1Rva2Vuc1Byb3ZpZGVyKGxhbmd1YWdlSWQ6IHN0cmluZywgcHJvdmlkZXI6IERvY3VtZW50UmFuZ2VTZW1hbnRpY1Rva2Vuc1Byb3ZpZGVyKTogSURpc3Bvc2FibGU7XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhbiBpbmxpbmUgY29tcGxldGlvbnMgcHJvdmlkZXIuXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVySW5saW5lQ29tcGxldGlvbnNQcm92aWRlcihsYW5ndWFnZUlkOiBzdHJpbmcsIHByb3ZpZGVyOiBJbmxpbmVDb21wbGV0aW9uc1Byb3ZpZGVyKTogSURpc3Bvc2FibGU7XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhbiBpbmxheSBoaW50cyBwcm92aWRlci5cbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJJbmxheUhpbnRzUHJvdmlkZXIobGFuZ3VhZ2VJZDogc3RyaW5nLCBwcm92aWRlcjogSW5sYXlIaW50c1Byb3ZpZGVyKTogSURpc3Bvc2FibGU7XG5cbiAgICAvKipcbiAgICAgKiBDb250YWlucyBhZGRpdGlvbmFsIGRpYWdub3N0aWMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbnRleHQgaW4gd2hpY2hcbiAgICAgKiBhIFtjb2RlIGFjdGlvbl0oI0NvZGVBY3Rpb25Qcm92aWRlci5wcm92aWRlQ29kZUFjdGlvbnMpIGlzIHJ1bi5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIENvZGVBY3Rpb25Db250ZXh0IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGFycmF5IG9mIGRpYWdub3N0aWNzLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgbWFya2VyczogZWRpdG9yLklNYXJrZXJEYXRhW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXF1ZXN0ZWQga2luZCBvZiBhY3Rpb25zIHRvIHJldHVybi5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IG9ubHk/OiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGNvZGUgYWN0aW9uIGludGVyZmFjZSBkZWZpbmVzIHRoZSBjb250cmFjdCBiZXR3ZWVuIGV4dGVuc2lvbnMgYW5kXG4gICAgICogdGhlIFtsaWdodCBidWxiXShodHRwczovL2NvZGUudmlzdWFsc3R1ZGlvLmNvbS9kb2NzL2VkaXRvci9lZGl0aW5nZXZvbHZlZCNfY29kZS1hY3Rpb24pIGZlYXR1cmUuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBDb2RlQWN0aW9uUHJvdmlkZXIge1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvdmlkZSBjb21tYW5kcyBmb3IgdGhlIGdpdmVuIGRvY3VtZW50IGFuZCByYW5nZS5cbiAgICAgICAgICovXG4gICAgICAgIHByb3ZpZGVDb2RlQWN0aW9ucyhtb2RlbDogZWRpdG9yLklUZXh0TW9kZWwsIHJhbmdlOiBSYW5nZSwgY29udGV4dDogQ29kZUFjdGlvbkNvbnRleHQsIHRva2VuOiBDYW5jZWxsYXRpb25Ub2tlbik6IFByb3ZpZGVyUmVzdWx0PENvZGVBY3Rpb25MaXN0PjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdpdmVuIGEgY29kZSBhY3Rpb24gZmlsbCBpbiB0aGUgZWRpdC4gV2lsbCBvbmx5IGludm9rZWQgd2hlbiBtaXNzaW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVzb2x2ZUNvZGVBY3Rpb24/KGNvZGVBY3Rpb246IENvZGVBY3Rpb24sIHRva2VuOiBDYW5jZWxsYXRpb25Ub2tlbik6IFByb3ZpZGVyUmVzdWx0PENvZGVBY3Rpb24+O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldGFkYXRhIGFib3V0IHRoZSB0eXBlIG9mIGNvZGUgYWN0aW9ucyB0aGF0IGEge0BsaW5rIENvZGVBY3Rpb25Qcm92aWRlcn0gcHJvdmlkZXMuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBDb2RlQWN0aW9uUHJvdmlkZXJNZXRhZGF0YSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMaXN0IG9mIGNvZGUgYWN0aW9uIGtpbmRzIHRoYXQgYSB7QGxpbmsgQ29kZUFjdGlvblByb3ZpZGVyfSBtYXkgcmV0dXJuLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIGxpc3QgaXMgdXNlZCB0byBkZXRlcm1pbmUgaWYgYSBnaXZlbiBgQ29kZUFjdGlvblByb3ZpZGVyYCBzaG91bGQgYmUgaW52b2tlZCBvciBub3QuXG4gICAgICAgICAqIFRvIGF2b2lkIHVubmVjZXNzYXJ5IGNvbXB1dGF0aW9uLCBldmVyeSBgQ29kZUFjdGlvblByb3ZpZGVyYCBzaG91bGQgbGlzdCB1c2UgYHByb3ZpZGVkQ29kZUFjdGlvbktpbmRzYC4gVGhlXG4gICAgICAgICAqIGxpc3Qgb2Yga2luZHMgbWF5IGVpdGhlciBiZSBnZW5lcmljLCBzdWNoIGFzIGBbXCJxdWlja2ZpeFwiLCBcInJlZmFjdG9yXCIsIFwic291cmNlXCJdYCwgb3IgbGlzdCBvdXQgZXZlcnkga2luZCBwcm92aWRlZCxcbiAgICAgICAgICogc3VjaCBhcyBgW1wicXVpY2tmaXgucmVtb3ZlTGluZVwiLCBcInNvdXJjZS5maXhBbGxcIiAuLi5dYC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHByb3ZpZGVkQ29kZUFjdGlvbktpbmRzPzogcmVhZG9ubHkgc3RyaW5nW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzY3JpYmVzIGhvdyBjb21tZW50cyBmb3IgYSBsYW5ndWFnZSB3b3JrLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29tbWVudFJ1bGUge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGxpbmUgY29tbWVudCB0b2tlbiwgbGlrZSBgLy8gdGhpcyBpcyBhIGNvbW1lbnRgXG4gICAgICAgICAqL1xuICAgICAgICBsaW5lQ29tbWVudD86IHN0cmluZyB8IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYmxvY2sgY29tbWVudCBjaGFyYWN0ZXIgcGFpciwgbGlrZSBgLyogYmxvY2sgY29tbWVudCAqJiM0NztgXG4gICAgICAgICAqL1xuICAgICAgICBibG9ja0NvbW1lbnQ/OiBDaGFyYWN0ZXJQYWlyIHwgbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGFuZ3VhZ2UgY29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZGVmaW5lcyB0aGUgY29udHJhY3QgYmV0d2VlbiBleHRlbnNpb25zIGFuZFxuICAgICAqIHZhcmlvdXMgZWRpdG9yIGZlYXR1cmVzLCBsaWtlIGF1dG9tYXRpYyBicmFja2V0IGluc2VydGlvbiwgYXV0b21hdGljIGluZGVudGF0aW9uIGV0Yy5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIExhbmd1YWdlQ29uZmlndXJhdGlvbiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbGFuZ3VhZ2UncyBjb21tZW50IHNldHRpbmdzLlxuICAgICAgICAgKi9cbiAgICAgICAgY29tbWVudHM/OiBDb21tZW50UnVsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBsYW5ndWFnZSdzIGJyYWNrZXRzLlxuICAgICAgICAgKiBUaGlzIGNvbmZpZ3VyYXRpb24gaW1wbGljaXRseSBhZmZlY3RzIHByZXNzaW5nIEVudGVyIGFyb3VuZCB0aGVzZSBicmFja2V0cy5cbiAgICAgICAgICovXG4gICAgICAgIGJyYWNrZXRzPzogQ2hhcmFjdGVyUGFpcltdO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGxhbmd1YWdlJ3Mgd29yZCBkZWZpbml0aW9uLlxuICAgICAgICAgKiBJZiB0aGUgbGFuZ3VhZ2Ugc3VwcG9ydHMgVW5pY29kZSBpZGVudGlmaWVycyAoZS5nLiBKYXZhU2NyaXB0KSwgaXQgaXMgcHJlZmVyYWJsZVxuICAgICAgICAgKiB0byBwcm92aWRlIGEgd29yZCBkZWZpbml0aW9uIHRoYXQgdXNlcyBleGNsdXNpb24gb2Yga25vd24gc2VwYXJhdG9ycy5cbiAgICAgICAgICogZS5nLjogQSByZWdleCB0aGF0IG1hdGNoZXMgYW55dGhpbmcgZXhjZXB0IGtub3duIHNlcGFyYXRvcnMgKGFuZCBkb3QgaXMgYWxsb3dlZCB0byBvY2N1ciBpbiBhIGZsb2F0aW5nIHBvaW50IG51bWJlcik6XG4gICAgICAgICAqICAgLygtP1xcZCpcXC5cXGRcXHcqKXwoW15cXGBcXH5cXCFcXEBcXCNcXCVcXF5cXCZcXCpcXChcXClcXC1cXD1cXCtcXFtcXHtcXF1cXH1cXFxcXFx8XFw7XFw6XFwnXFxcIlxcLFxcLlxcPFxcPlxcL1xcP1xcc10rKS9nXG4gICAgICAgICAqL1xuICAgICAgICB3b3JkUGF0dGVybj86IFJlZ0V4cDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBsYW5ndWFnZSdzIGluZGVudGF0aW9uIHNldHRpbmdzLlxuICAgICAgICAgKi9cbiAgICAgICAgaW5kZW50YXRpb25SdWxlcz86IEluZGVudGF0aW9uUnVsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBsYW5ndWFnZSdzIHJ1bGVzIHRvIGJlIGV2YWx1YXRlZCB3aGVuIHByZXNzaW5nIEVudGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgb25FbnRlclJ1bGVzPzogT25FbnRlclJ1bGVbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBsYW5ndWFnZSdzIGF1dG8gY2xvc2luZyBwYWlycy4gVGhlICdjbG9zZScgY2hhcmFjdGVyIGlzIGF1dG9tYXRpY2FsbHkgaW5zZXJ0ZWQgd2l0aCB0aGVcbiAgICAgICAgICogJ29wZW4nIGNoYXJhY3RlciBpcyB0eXBlZC4gSWYgbm90IHNldCwgdGhlIGNvbmZpZ3VyZWQgYnJhY2tldHMgd2lsbCBiZSB1c2VkLlxuICAgICAgICAgKi9cbiAgICAgICAgYXV0b0Nsb3NpbmdQYWlycz86IElBdXRvQ2xvc2luZ1BhaXJDb25kaXRpb25hbFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGxhbmd1YWdlJ3Mgc3Vycm91bmRpbmcgcGFpcnMuIFdoZW4gdGhlICdvcGVuJyBjaGFyYWN0ZXIgaXMgdHlwZWQgb24gYSBzZWxlY3Rpb24sIHRoZVxuICAgICAgICAgKiBzZWxlY3RlZCBzdHJpbmcgaXMgc3Vycm91bmRlZCBieSB0aGUgb3BlbiBhbmQgY2xvc2UgY2hhcmFjdGVycy4gSWYgbm90IHNldCwgdGhlIGF1dG9jbG9zaW5nIHBhaXJzXG4gICAgICAgICAqIHNldHRpbmdzIHdpbGwgYmUgdXNlZC5cbiAgICAgICAgICovXG4gICAgICAgIHN1cnJvdW5kaW5nUGFpcnM/OiBJQXV0b0Nsb3NpbmdQYWlyW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIGEgbGlzdCBvZiBicmFja2V0IHBhaXJzIHRoYXQgYXJlIGNvbG9yaXplZCBkZXBlbmRpbmcgb24gdGhlaXIgbmVzdGluZyBsZXZlbC5cbiAgICAgICAgICogSWYgbm90IHNldCwgdGhlIGNvbmZpZ3VyZWQgYnJhY2tldHMgd2lsbCBiZSB1c2VkLlxuICAgICAgICAqL1xuICAgICAgICBjb2xvcml6ZWRCcmFja2V0UGFpcnM/OiBDaGFyYWN0ZXJQYWlyW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIHdoYXQgY2hhcmFjdGVycyBtdXN0IGJlIGFmdGVyIHRoZSBjdXJzb3IgZm9yIGJyYWNrZXQgb3IgcXVvdGUgYXV0b2Nsb3NpbmcgdG8gb2NjdXIgd2hlbiB1c2luZyB0aGUgXFwnbGFuZ3VhZ2VEZWZpbmVkXFwnIGF1dG9jbG9zaW5nIHNldHRpbmcuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgaXMgdHlwaWNhbGx5IHRoZSBzZXQgb2YgY2hhcmFjdGVycyB3aGljaCBjYW4gbm90IHN0YXJ0IGFuIGV4cHJlc3Npb24sIHN1Y2ggYXMgd2hpdGVzcGFjZSwgY2xvc2luZyBicmFja2V0cywgbm9uLXVuYXJ5IG9wZXJhdG9ycywgZXRjLlxuICAgICAgICAgKi9cbiAgICAgICAgYXV0b0Nsb3NlQmVmb3JlPzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGxhbmd1YWdlJ3MgZm9sZGluZyBydWxlcy5cbiAgICAgICAgICovXG4gICAgICAgIGZvbGRpbmc/OiBGb2xkaW5nUnVsZXM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiAqKkRlcHJlY2F0ZWQqKiBEbyBub3QgdXNlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlcGxhY2VkIGJ5IGEgYmV0dGVyIEFQSSBzb29uLlxuICAgICAgICAgKi9cbiAgICAgICAgX19lbGVjdHJpY0NoYXJhY3RlclN1cHBvcnQ/OiB7XG4gICAgICAgICAgICBkb2NDb21tZW50PzogSURvY0NvbW1lbnQ7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzY3JpYmVzIGluZGVudGF0aW9uIHJ1bGVzIGZvciBhIGxhbmd1YWdlLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSW5kZW50YXRpb25SdWxlIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGEgbGluZSBtYXRjaGVzIHRoaXMgcGF0dGVybiwgdGhlbiBhbGwgdGhlIGxpbmVzIGFmdGVyIGl0IHNob3VsZCBiZSB1bmluZGVudGVkIG9uY2UgKHVudGlsIGFub3RoZXIgcnVsZSBtYXRjaGVzKS5cbiAgICAgICAgICovXG4gICAgICAgIGRlY3JlYXNlSW5kZW50UGF0dGVybjogUmVnRXhwO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgYSBsaW5lIG1hdGNoZXMgdGhpcyBwYXR0ZXJuLCB0aGVuIGFsbCB0aGUgbGluZXMgYWZ0ZXIgaXQgc2hvdWxkIGJlIGluZGVudGVkIG9uY2UgKHVudGlsIGFub3RoZXIgcnVsZSBtYXRjaGVzKS5cbiAgICAgICAgICovXG4gICAgICAgIGluY3JlYXNlSW5kZW50UGF0dGVybjogUmVnRXhwO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgYSBsaW5lIG1hdGNoZXMgdGhpcyBwYXR0ZXJuLCB0aGVuICoqb25seSB0aGUgbmV4dCBsaW5lKiogYWZ0ZXIgaXQgc2hvdWxkIGJlIGluZGVudGVkIG9uY2UuXG4gICAgICAgICAqL1xuICAgICAgICBpbmRlbnROZXh0TGluZVBhdHRlcm4/OiBSZWdFeHAgfCBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgYSBsaW5lIG1hdGNoZXMgdGhpcyBwYXR0ZXJuLCB0aGVuIGl0cyBpbmRlbnRhdGlvbiBzaG91bGQgbm90IGJlIGNoYW5nZWQgYW5kIGl0IHNob3VsZCBub3QgYmUgZXZhbHVhdGVkIGFnYWluc3QgdGhlIG90aGVyIHJ1bGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgdW5JbmRlbnRlZExpbmVQYXR0ZXJuPzogUmVnRXhwIHwgbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmliZXMgbGFuZ3VhZ2Ugc3BlY2lmaWMgZm9sZGluZyBtYXJrZXJzIHN1Y2ggYXMgJyNyZWdpb24nIGFuZCAnI2VuZHJlZ2lvbicuXG4gICAgICogVGhlIHN0YXJ0IGFuZCBlbmQgcmVnZXhlcyB3aWxsIGJlIHRlc3RlZCBhZ2FpbnN0IHRoZSBjb250ZW50cyBvZiBhbGwgbGluZXMgYW5kIG11c3QgYmUgZGVzaWduZWQgZWZmaWNpZW50bHk6XG4gICAgICogLSB0aGUgcmVnZXggc2hvdWxkIHN0YXJ0IHdpdGggJ14nXG4gICAgICogLSByZWdleHAgZmxhZ3MgKGksIGcpIGFyZSBpZ25vcmVkXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBGb2xkaW5nTWFya2VycyB7XG4gICAgICAgIHN0YXJ0OiBSZWdFeHA7XG4gICAgICAgIGVuZDogUmVnRXhwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc2NyaWJlcyBmb2xkaW5nIHJ1bGVzIGZvciBhIGxhbmd1YWdlLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgRm9sZGluZ1J1bGVzIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVzZWQgYnkgdGhlIGluZGVudGF0aW9uIGJhc2VkIHN0cmF0ZWd5IHRvIGRlY2lkZSB3aGV0aGVyIGVtcHR5IGxpbmVzIGJlbG9uZyB0byB0aGUgcHJldmlvdXMgb3IgdGhlIG5leHQgYmxvY2suXG4gICAgICAgICAqIEEgbGFuZ3VhZ2UgYWRoZXJlcyB0byB0aGUgb2ZmLXNpZGUgcnVsZSBpZiBibG9ja3MgaW4gdGhhdCBsYW5ndWFnZSBhcmUgZXhwcmVzc2VkIGJ5IHRoZWlyIGluZGVudGF0aW9uLlxuICAgICAgICAgKiBTZWUgW3dpa2lwZWRpYV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvT2ZmLXNpZGVfcnVsZSkgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICAgICAqIElmIG5vdCBzZXQsIGBmYWxzZWAgaXMgdXNlZCBhbmQgZW1wdHkgbGluZXMgYmVsb25nIHRvIHRoZSBwcmV2aW91cyBibG9jay5cbiAgICAgICAgICovXG4gICAgICAgIG9mZlNpZGU/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVnaW9uIG1hcmtlcnMgdXNlZCBieSB0aGUgbGFuZ3VhZ2UuXG4gICAgICAgICAqL1xuICAgICAgICBtYXJrZXJzPzogRm9sZGluZ01hcmtlcnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzY3JpYmVzIGEgcnVsZSB0byBiZSBldmFsdWF0ZWQgd2hlbiBwcmVzc2luZyBFbnRlci5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIE9uRW50ZXJSdWxlIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgcnVsZSB3aWxsIG9ubHkgZXhlY3V0ZSBpZiB0aGUgdGV4dCBiZWZvcmUgdGhlIGN1cnNvciBtYXRjaGVzIHRoaXMgcmVndWxhciBleHByZXNzaW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgYmVmb3JlVGV4dDogUmVnRXhwO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBydWxlIHdpbGwgb25seSBleGVjdXRlIGlmIHRoZSB0ZXh0IGFmdGVyIHRoZSBjdXJzb3IgbWF0Y2hlcyB0aGlzIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAgICAgICAgICovXG4gICAgICAgIGFmdGVyVGV4dD86IFJlZ0V4cDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgcnVsZSB3aWxsIG9ubHkgZXhlY3V0ZSBpZiB0aGUgdGV4dCBhYm92ZSB0aGUgdGhpcyBsaW5lIG1hdGNoZXMgdGhpcyByZWd1bGFyIGV4cHJlc3Npb24uXG4gICAgICAgICAqL1xuICAgICAgICBwcmV2aW91c0xpbmVUZXh0PzogUmVnRXhwO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGFjdGlvbiB0byBleGVjdXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgYWN0aW9uOiBFbnRlckFjdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZpbml0aW9uIG9mIGRvY3VtZW50YXRpb24gY29tbWVudHMgKGUuZy4gSmF2YWRvYy9KU2RvYylcbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElEb2NDb21tZW50IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzdHJpbmcgdGhhdCBzdGFydHMgYSBkb2MgY29tbWVudCAoZS5nLiAnLyoqJylcbiAgICAgICAgICovXG4gICAgICAgIG9wZW46IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzdHJpbmcgdGhhdCBhcHBlYXJzIG9uIHRoZSBsYXN0IGxpbmUgYW5kIGNsb3NlcyB0aGUgZG9jIGNvbW1lbnQgKGUuZy4gJyAqIC8nKS5cbiAgICAgICAgICovXG4gICAgICAgIGNsb3NlPzogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgdHVwbGUgb2YgdHdvIGNoYXJhY3RlcnMsIGxpa2UgYSBwYWlyIG9mXG4gICAgICogb3BlbmluZyBhbmQgY2xvc2luZyBicmFja2V0cy5cbiAgICAgKi9cbiAgICBleHBvcnQgdHlwZSBDaGFyYWN0ZXJQYWlyID0gW3N0cmluZywgc3RyaW5nXTtcblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUF1dG9DbG9zaW5nUGFpciB7XG4gICAgICAgIG9wZW46IHN0cmluZztcbiAgICAgICAgY2xvc2U6IHN0cmluZztcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElBdXRvQ2xvc2luZ1BhaXJDb25kaXRpb25hbCBleHRlbmRzIElBdXRvQ2xvc2luZ1BhaXIge1xuICAgICAgICBub3RJbj86IHN0cmluZ1tdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc2NyaWJlcyB3aGF0IHRvIGRvIHdpdGggdGhlIGluZGVudGF0aW9uIHdoZW4gcHJlc3NpbmcgRW50ZXIuXG4gICAgICovXG4gICAgZXhwb3J0IGVudW0gSW5kZW50QWN0aW9uIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluc2VydCBuZXcgbGluZSBhbmQgY29weSB0aGUgcHJldmlvdXMgbGluZSdzIGluZGVudGF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgTm9uZSA9IDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnNlcnQgbmV3IGxpbmUgYW5kIGluZGVudCBvbmNlIChyZWxhdGl2ZSB0byB0aGUgcHJldmlvdXMgbGluZSdzIGluZGVudGF0aW9uKS5cbiAgICAgICAgICovXG4gICAgICAgIEluZGVudCA9IDEsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnNlcnQgdHdvIG5ldyBsaW5lczpcbiAgICAgICAgICogIC0gdGhlIGZpcnN0IG9uZSBpbmRlbnRlZCB3aGljaCB3aWxsIGhvbGQgdGhlIGN1cnNvclxuICAgICAgICAgKiAgLSB0aGUgc2Vjb25kIG9uZSBhdCB0aGUgc2FtZSBpbmRlbnRhdGlvbiBsZXZlbFxuICAgICAgICAgKi9cbiAgICAgICAgSW5kZW50T3V0ZGVudCA9IDIsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnNlcnQgbmV3IGxpbmUgYW5kIG91dGRlbnQgb25jZSAocmVsYXRpdmUgdG8gdGhlIHByZXZpb3VzIGxpbmUncyBpbmRlbnRhdGlvbikuXG4gICAgICAgICAqL1xuICAgICAgICBPdXRkZW50ID0gM1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc2NyaWJlcyB3aGF0IHRvIGRvIHdoZW4gcHJlc3NpbmcgRW50ZXIuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBFbnRlckFjdGlvbiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXNjcmliZSB3aGF0IHRvIGRvIHdpdGggdGhlIGluZGVudGF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgaW5kZW50QWN0aW9uOiBJbmRlbnRBY3Rpb247XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXNjcmliZXMgdGV4dCB0byBiZSBhcHBlbmRlZCBhZnRlciB0aGUgbmV3IGxpbmUgYW5kIGFmdGVyIHRoZSBpbmRlbnRhdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGFwcGVuZFRleHQ/OiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXNjcmliZXMgdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRvIHJlbW92ZSBmcm9tIHRoZSBuZXcgbGluZSdzIGluZGVudGF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlVGV4dD86IG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc3RhdGUgb2YgdGhlIHRva2VuaXplciBiZXR3ZWVuIHR3byBsaW5lcy5cbiAgICAgKiBJdCBpcyB1c2VmdWwgdG8gc3RvcmUgZmxhZ3Mgc3VjaCBhcyBpbiBtdWx0aWxpbmUgY29tbWVudCwgZXRjLlxuICAgICAqIFRoZSBtb2RlbCB3aWxsIGNsb25lIHRoZSBwcmV2aW91cyBsaW5lJ3Mgc3RhdGUgYW5kIHBhc3MgaXQgaW4gdG8gdG9rZW5pemUgdGhlIG5leHQgbGluZS5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgICAgIGNsb25lKCk6IElTdGF0ZTtcbiAgICAgICAgZXF1YWxzKG90aGVyOiBJU3RhdGUpOiBib29sZWFuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgcHJvdmlkZXIgcmVzdWx0IHJlcHJlc2VudHMgdGhlIHZhbHVlcyBhIHByb3ZpZGVyLCBsaWtlIHRoZSB7QGxpbmsgSG92ZXJQcm92aWRlcn0sXG4gICAgICogbWF5IHJldHVybi4gRm9yIG9uY2UgdGhpcyBpcyB0aGUgYWN0dWFsIHJlc3VsdCB0eXBlIGBUYCwgbGlrZSBgSG92ZXJgLCBvciBhIHRoZW5hYmxlIHRoYXQgcmVzb2x2ZXNcbiAgICAgKiB0byB0aGF0IHR5cGUgYFRgLiBJbiBhZGRpdGlvbiwgYG51bGxgIGFuZCBgdW5kZWZpbmVkYCBjYW4gYmUgcmV0dXJuZWQgLSBlaXRoZXIgZGlyZWN0bHkgb3IgZnJvbSBhXG4gICAgICogdGhlbmFibGUuXG4gICAgICovXG4gICAgZXhwb3J0IHR5cGUgUHJvdmlkZXJSZXN1bHQ8VD4gPSBUIHwgdW5kZWZpbmVkIHwgbnVsbCB8IFRoZW5hYmxlPFQgfCB1bmRlZmluZWQgfCBudWxsPjtcblxuICAgIC8qKlxuICAgICAqIEEgaG92ZXIgcmVwcmVzZW50cyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGZvciBhIHN5bWJvbCBvciB3b3JkLiBIb3ZlcnMgYXJlXG4gICAgICogcmVuZGVyZWQgaW4gYSB0b29sdGlwLWxpa2Ugd2lkZ2V0LlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSG92ZXIge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNvbnRlbnRzIG9mIHRoaXMgaG92ZXIuXG4gICAgICAgICAqL1xuICAgICAgICBjb250ZW50czogSU1hcmtkb3duU3RyaW5nW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcmFuZ2UgdG8gd2hpY2ggdGhpcyBob3ZlciBhcHBsaWVzLiBXaGVuIG1pc3NpbmcsIHRoZVxuICAgICAgICAgKiBlZGl0b3Igd2lsbCB1c2UgdGhlIHJhbmdlIGF0IHRoZSBjdXJyZW50IHBvc2l0aW9uIG9yIHRoZVxuICAgICAgICAgKiBjdXJyZW50IHBvc2l0aW9uIGl0c2VsZi5cbiAgICAgICAgICovXG4gICAgICAgIHJhbmdlPzogSVJhbmdlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBob3ZlciBwcm92aWRlciBpbnRlcmZhY2UgZGVmaW5lcyB0aGUgY29udHJhY3QgYmV0d2VlbiBleHRlbnNpb25zIGFuZFxuICAgICAqIHRoZSBbaG92ZXJdKGh0dHBzOi8vY29kZS52aXN1YWxzdHVkaW8uY29tL2RvY3MvZWRpdG9yL2ludGVsbGlzZW5zZSktZmVhdHVyZS5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIEhvdmVyUHJvdmlkZXIge1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvdmlkZSBhIGhvdmVyIGZvciB0aGUgZ2l2ZW4gcG9zaXRpb24gYW5kIGRvY3VtZW50LiBNdWx0aXBsZSBob3ZlcnMgYXQgdGhlIHNhbWVcbiAgICAgICAgICogcG9zaXRpb24gd2lsbCBiZSBtZXJnZWQgYnkgdGhlIGVkaXRvci4gQSBob3ZlciBjYW4gaGF2ZSBhIHJhbmdlIHdoaWNoIGRlZmF1bHRzXG4gICAgICAgICAqIHRvIHRoZSB3b3JkIHJhbmdlIGF0IHRoZSBwb3NpdGlvbiB3aGVuIG9taXR0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICBwcm92aWRlSG92ZXIobW9kZWw6IGVkaXRvci5JVGV4dE1vZGVsLCBwb3NpdGlvbjogUG9zaXRpb24sIHRva2VuOiBDYW5jZWxsYXRpb25Ub2tlbik6IFByb3ZpZGVyUmVzdWx0PEhvdmVyPjtcbiAgICB9XG5cbiAgICBleHBvcnQgZW51bSBDb21wbGV0aW9uSXRlbUtpbmQge1xuICAgICAgICBNZXRob2QgPSAwLFxuICAgICAgICBGdW5jdGlvbiA9IDEsXG4gICAgICAgIENvbnN0cnVjdG9yID0gMixcbiAgICAgICAgRmllbGQgPSAzLFxuICAgICAgICBWYXJpYWJsZSA9IDQsXG4gICAgICAgIENsYXNzID0gNSxcbiAgICAgICAgU3RydWN0ID0gNixcbiAgICAgICAgSW50ZXJmYWNlID0gNyxcbiAgICAgICAgTW9kdWxlID0gOCxcbiAgICAgICAgUHJvcGVydHkgPSA5LFxuICAgICAgICBFdmVudCA9IDEwLFxuICAgICAgICBPcGVyYXRvciA9IDExLFxuICAgICAgICBVbml0ID0gMTIsXG4gICAgICAgIFZhbHVlID0gMTMsXG4gICAgICAgIENvbnN0YW50ID0gMTQsXG4gICAgICAgIEVudW0gPSAxNSxcbiAgICAgICAgRW51bU1lbWJlciA9IDE2LFxuICAgICAgICBLZXl3b3JkID0gMTcsXG4gICAgICAgIFRleHQgPSAxOCxcbiAgICAgICAgQ29sb3IgPSAxOSxcbiAgICAgICAgRmlsZSA9IDIwLFxuICAgICAgICBSZWZlcmVuY2UgPSAyMSxcbiAgICAgICAgQ3VzdG9tY29sb3IgPSAyMixcbiAgICAgICAgRm9sZGVyID0gMjMsXG4gICAgICAgIFR5cGVQYXJhbWV0ZXIgPSAyNCxcbiAgICAgICAgVXNlciA9IDI1LFxuICAgICAgICBJc3N1ZSA9IDI2LFxuICAgICAgICBTbmlwcGV0ID0gMjdcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIENvbXBsZXRpb25JdGVtTGFiZWwge1xuICAgICAgICBsYWJlbDogc3RyaW5nO1xuICAgICAgICBkZXRhaWw/OiBzdHJpbmc7XG4gICAgICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAgIH1cblxuICAgIGV4cG9ydCBlbnVtIENvbXBsZXRpb25JdGVtVGFnIHtcbiAgICAgICAgRGVwcmVjYXRlZCA9IDFcbiAgICB9XG5cbiAgICBleHBvcnQgZW51bSBDb21wbGV0aW9uSXRlbUluc2VydFRleHRSdWxlIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkanVzdCB3aGl0ZXNwYWNlL2luZGVudGF0aW9uIG9mIG11bHRpbGluZSBpbnNlcnQgdGV4dHMgdG9cbiAgICAgICAgICogbWF0Y2ggdGhlIGN1cnJlbnQgbGluZSBpbmRlbnRhdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIEtlZXBXaGl0ZXNwYWNlID0gMSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGBpbnNlcnRUZXh0YCBpcyBhIHNuaXBwZXQuXG4gICAgICAgICAqL1xuICAgICAgICBJbnNlcnRBc1NuaXBwZXQgPSA0XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBDb21wbGV0aW9uSXRlbVJhbmdlcyB7XG4gICAgICAgIGluc2VydDogSVJhbmdlO1xuICAgICAgICByZXBsYWNlOiBJUmFuZ2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBjb21wbGV0aW9uIGl0ZW0gcmVwcmVzZW50cyBhIHRleHQgc25pcHBldCB0aGF0IGlzXG4gICAgICogcHJvcG9zZWQgdG8gY29tcGxldGUgdGV4dCB0aGF0IGlzIGJlaW5nIHR5cGVkLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29tcGxldGlvbkl0ZW0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGxhYmVsIG9mIHRoaXMgY29tcGxldGlvbiBpdGVtLiBCeSBkZWZhdWx0XG4gICAgICAgICAqIHRoaXMgaXMgYWxzbyB0aGUgdGV4dCB0aGF0IGlzIGluc2VydGVkIHdoZW4gc2VsZWN0aW5nXG4gICAgICAgICAqIHRoaXMgY29tcGxldGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGxhYmVsOiBzdHJpbmcgfCBDb21wbGV0aW9uSXRlbUxhYmVsO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGtpbmQgb2YgdGhpcyBjb21wbGV0aW9uIGl0ZW0uIEJhc2VkIG9uIHRoZSBraW5kXG4gICAgICAgICAqIGFuIGljb24gaXMgY2hvc2VuIGJ5IHRoZSBlZGl0b3IuXG4gICAgICAgICAqL1xuICAgICAgICBraW5kOiBDb21wbGV0aW9uSXRlbUtpbmQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIG1vZGlmaWVyIHRvIHRoZSBga2luZGAgd2hpY2ggYWZmZWN0IGhvdyB0aGUgaXRlbVxuICAgICAgICAgKiBpcyByZW5kZXJlZCwgZS5nLiBEZXByZWNhdGVkIGlzIHJlbmRlcmVkIHdpdGggYSBzdHJpa2VvdXRcbiAgICAgICAgICovXG4gICAgICAgIHRhZ3M/OiBSZWFkb25seUFycmF5PENvbXBsZXRpb25JdGVtVGFnPjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgaHVtYW4tcmVhZGFibGUgc3RyaW5nIHdpdGggYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICAgICAgICAgKiBhYm91dCB0aGlzIGl0ZW0sIGxpa2UgdHlwZSBvciBzeW1ib2wgaW5mb3JtYXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICBkZXRhaWw/OiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGh1bWFuLXJlYWRhYmxlIHN0cmluZyB0aGF0IHJlcHJlc2VudHMgYSBkb2MtY29tbWVudC5cbiAgICAgICAgICovXG4gICAgICAgIGRvY3VtZW50YXRpb24/OiBzdHJpbmcgfCBJTWFya2Rvd25TdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHN0cmluZyB0aGF0IHNob3VsZCBiZSB1c2VkIHdoZW4gY29tcGFyaW5nIHRoaXMgaXRlbVxuICAgICAgICAgKiB3aXRoIG90aGVyIGl0ZW1zLiBXaGVuIGBmYWxzeWAgdGhlIHtAbGluayBDb21wbGV0aW9uSXRlbS5sYWJlbCBsYWJlbH1cbiAgICAgICAgICogaXMgdXNlZC5cbiAgICAgICAgICovXG4gICAgICAgIHNvcnRUZXh0Pzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBzdHJpbmcgdGhhdCBzaG91bGQgYmUgdXNlZCB3aGVuIGZpbHRlcmluZyBhIHNldCBvZlxuICAgICAgICAgKiBjb21wbGV0aW9uIGl0ZW1zLiBXaGVuIGBmYWxzeWAgdGhlIHtAbGluayBDb21wbGV0aW9uSXRlbS5sYWJlbCBsYWJlbH1cbiAgICAgICAgICogaXMgdXNlZC5cbiAgICAgICAgICovXG4gICAgICAgIGZpbHRlclRleHQ/OiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZWxlY3QgdGhpcyBpdGVtIHdoZW4gc2hvd2luZy4gKk5vdGUqIHRoYXQgb25seSBvbmUgY29tcGxldGlvbiBpdGVtIGNhbiBiZSBzZWxlY3RlZCBhbmRcbiAgICAgICAgICogdGhhdCB0aGUgZWRpdG9yIGRlY2lkZXMgd2hpY2ggaXRlbSB0aGF0IGlzLiBUaGUgcnVsZSBpcyB0aGF0IHRoZSAqZmlyc3QqIGl0ZW0gb2YgdGhvc2VcbiAgICAgICAgICogdGhhdCBtYXRjaCBiZXN0IGlzIHNlbGVjdGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcHJlc2VsZWN0PzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgc3RyaW5nIG9yIHNuaXBwZXQgdGhhdCBzaG91bGQgYmUgaW5zZXJ0ZWQgaW4gYSBkb2N1bWVudCB3aGVuIHNlbGVjdGluZ1xuICAgICAgICAgKiB0aGlzIGNvbXBsZXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICBpbnNlcnRUZXh0OiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGRpdGlvbmFsIHJ1bGVzIChhcyBiaXRtYXNrKSB0aGF0IHNob3VsZCBiZSBhcHBsaWVkIHdoZW4gaW5zZXJ0aW5nXG4gICAgICAgICAqIHRoaXMgY29tcGxldGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGluc2VydFRleHRSdWxlcz86IENvbXBsZXRpb25JdGVtSW5zZXJ0VGV4dFJ1bGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJhbmdlIG9mIHRleHQgdGhhdCBzaG91bGQgYmUgcmVwbGFjZWQgYnkgdGhpcyBjb21wbGV0aW9uIGl0ZW0uXG4gICAgICAgICAqXG4gICAgICAgICAqIERlZmF1bHRzIHRvIGEgcmFuZ2UgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIHtAbGluayBUZXh0RG9jdW1lbnQuZ2V0V29yZFJhbmdlQXRQb3NpdGlvbiBjdXJyZW50IHdvcmR9IHRvIHRoZVxuICAgICAgICAgKiBjdXJyZW50IHBvc2l0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiAqTm90ZToqIFRoZSByYW5nZSBtdXN0IGJlIGEge0BsaW5rIFJhbmdlLmlzU2luZ2xlTGluZSBzaW5nbGUgbGluZX0gYW5kIGl0IG11c3RcbiAgICAgICAgICoge0BsaW5rIFJhbmdlLmNvbnRhaW5zIGNvbnRhaW59IHRoZSBwb3NpdGlvbiBhdCB3aGljaCBjb21wbGV0aW9uIGhhcyBiZWVuIHtAbGluayBDb21wbGV0aW9uSXRlbVByb3ZpZGVyLnByb3ZpZGVDb21wbGV0aW9uSXRlbXMgcmVxdWVzdGVkfS5cbiAgICAgICAgICovXG4gICAgICAgIHJhbmdlOiBJUmFuZ2UgfCBDb21wbGV0aW9uSXRlbVJhbmdlcztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIG9wdGlvbmFsIHNldCBvZiBjaGFyYWN0ZXJzIHRoYXQgd2hlbiBwcmVzc2VkIHdoaWxlIHRoaXMgY29tcGxldGlvbiBpcyBhY3RpdmUgd2lsbCBhY2NlcHQgaXQgZmlyc3QgYW5kXG4gICAgICAgICAqIHRoZW4gdHlwZSB0aGF0IGNoYXJhY3Rlci4gKk5vdGUqIHRoYXQgYWxsIGNvbW1pdCBjaGFyYWN0ZXJzIHNob3VsZCBoYXZlIGBsZW5ndGg9MWAgYW5kIHRoYXQgc3VwZXJmbHVvdXNcbiAgICAgICAgICogY2hhcmFjdGVycyB3aWxsIGJlIGlnbm9yZWQuXG4gICAgICAgICAqL1xuICAgICAgICBjb21taXRDaGFyYWN0ZXJzPzogc3RyaW5nW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBvcHRpb25hbCBhcnJheSBvZiBhZGRpdGlvbmFsIHRleHQgZWRpdHMgdGhhdCBhcmUgYXBwbGllZCB3aGVuXG4gICAgICAgICAqIHNlbGVjdGluZyB0aGlzIGNvbXBsZXRpb24uIEVkaXRzIG11c3Qgbm90IG92ZXJsYXAgd2l0aCB0aGUgbWFpbiBlZGl0XG4gICAgICAgICAqIG5vciB3aXRoIHRoZW1zZWx2ZXMuXG4gICAgICAgICAqL1xuICAgICAgICBhZGRpdGlvbmFsVGV4dEVkaXRzPzogZWRpdG9yLklTaW5nbGVFZGl0T3BlcmF0aW9uW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGNvbW1hbmQgdGhhdCBzaG91bGQgYmUgcnVuIHVwb24gYWNjZXB0YW5jZSBvZiB0aGlzIGl0ZW0uXG4gICAgICAgICAqL1xuICAgICAgICBjb21tYW5kPzogQ29tbWFuZDtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIENvbXBsZXRpb25MaXN0IHtcbiAgICAgICAgc3VnZ2VzdGlvbnM6IENvbXBsZXRpb25JdGVtW107XG4gICAgICAgIGluY29tcGxldGU/OiBib29sZWFuO1xuICAgICAgICBkaXNwb3NlPygpOiB2b2lkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhvdyBhIHN1Z2dlc3QgcHJvdmlkZXIgd2FzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBleHBvcnQgZW51bSBDb21wbGV0aW9uVHJpZ2dlcktpbmQge1xuICAgICAgICBJbnZva2UgPSAwLFxuICAgICAgICBUcmlnZ2VyQ2hhcmFjdGVyID0gMSxcbiAgICAgICAgVHJpZ2dlckZvckluY29tcGxldGVDb21wbGV0aW9ucyA9IDJcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb250YWlucyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjb250ZXh0IGluIHdoaWNoXG4gICAgICoge0BsaW5rIENvbXBsZXRpb25JdGVtUHJvdmlkZXIucHJvdmlkZUNvbXBsZXRpb25JdGVtcyBjb21wbGV0aW9uIHByb3ZpZGVyfSBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBDb21wbGV0aW9uQ29udGV4dCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIb3cgdGhlIGNvbXBsZXRpb24gd2FzIHRyaWdnZXJlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRyaWdnZXJLaW5kOiBDb21wbGV0aW9uVHJpZ2dlcktpbmQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGFyYWN0ZXIgdGhhdCB0cmlnZ2VyZWQgdGhlIGNvbXBsZXRpb24gaXRlbSBwcm92aWRlci5cbiAgICAgICAgICpcbiAgICAgICAgICogYHVuZGVmaW5lZGAgaWYgcHJvdmlkZXIgd2FzIG5vdCB0cmlnZ2VyZWQgYnkgYSBjaGFyYWN0ZXIuXG4gICAgICAgICAqL1xuICAgICAgICB0cmlnZ2VyQ2hhcmFjdGVyPzogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBjb21wbGV0aW9uIGl0ZW0gcHJvdmlkZXIgaW50ZXJmYWNlIGRlZmluZXMgdGhlIGNvbnRyYWN0IGJldHdlZW4gZXh0ZW5zaW9ucyBhbmRcbiAgICAgKiB0aGUgW0ludGVsbGlTZW5zZV0oaHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG9jcy9lZGl0b3IvaW50ZWxsaXNlbnNlKS5cbiAgICAgKlxuICAgICAqIFdoZW4gY29tcHV0aW5nICpjb21wbGV0ZSogY29tcGxldGlvbiBpdGVtcyBpcyBleHBlbnNpdmUsIHByb3ZpZGVycyBjYW4gb3B0aW9uYWxseSBpbXBsZW1lbnRcbiAgICAgKiB0aGUgYHJlc29sdmVDb21wbGV0aW9uSXRlbWAtZnVuY3Rpb24uIEluIHRoYXQgY2FzZSBpdCBpcyBlbm91Z2ggdG8gcmV0dXJuIGNvbXBsZXRpb25cbiAgICAgKiBpdGVtcyB3aXRoIGEge0BsaW5rIENvbXBsZXRpb25JdGVtLmxhYmVsIGxhYmVsfSBmcm9tIHRoZVxuICAgICAqIHtAbGluayBDb21wbGV0aW9uSXRlbVByb3ZpZGVyLnByb3ZpZGVDb21wbGV0aW9uSXRlbXMgcHJvdmlkZUNvbXBsZXRpb25JdGVtc30tZnVuY3Rpb24uIFN1YnNlcXVlbnRseSxcbiAgICAgKiB3aGVuIGEgY29tcGxldGlvbiBpdGVtIGlzIHNob3duIGluIHRoZSBVSSBhbmQgZ2FpbnMgZm9jdXMgdGhpcyBwcm92aWRlciBpcyBhc2tlZCB0byByZXNvbHZlXG4gICAgICogdGhlIGl0ZW0sIGxpa2UgYWRkaW5nIHtAbGluayBDb21wbGV0aW9uSXRlbS5kb2N1bWVudGF0aW9uIGRvYy1jb21tZW50fSBvciB7QGxpbmsgQ29tcGxldGlvbkl0ZW0uZGV0YWlsIGRldGFpbHN9LlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29tcGxldGlvbkl0ZW1Qcm92aWRlciB7XG4gICAgICAgIHRyaWdnZXJDaGFyYWN0ZXJzPzogc3RyaW5nW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm92aWRlIGNvbXBsZXRpb24gaXRlbXMgZm9yIHRoZSBnaXZlbiBwb3NpdGlvbiBhbmQgZG9jdW1lbnQuXG4gICAgICAgICAqL1xuICAgICAgICBwcm92aWRlQ29tcGxldGlvbkl0ZW1zKG1vZGVsOiBlZGl0b3IuSVRleHRNb2RlbCwgcG9zaXRpb246IFBvc2l0aW9uLCBjb250ZXh0OiBDb21wbGV0aW9uQ29udGV4dCwgdG9rZW46IENhbmNlbGxhdGlvblRva2VuKTogUHJvdmlkZXJSZXN1bHQ8Q29tcGxldGlvbkxpc3Q+O1xuICAgICAgICAvKipcbiAgICAgICAgICogR2l2ZW4gYSBjb21wbGV0aW9uIGl0ZW0gZmlsbCBpbiBtb3JlIGRhdGEsIGxpa2Uge0BsaW5rIENvbXBsZXRpb25JdGVtLmRvY3VtZW50YXRpb24gZG9jLWNvbW1lbnR9XG4gICAgICAgICAqIG9yIHtAbGluayBDb21wbGV0aW9uSXRlbS5kZXRhaWwgZGV0YWlsc30uXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoZSBlZGl0b3Igd2lsbCBvbmx5IHJlc29sdmUgYSBjb21wbGV0aW9uIGl0ZW0gb25jZS5cbiAgICAgICAgICovXG4gICAgICAgIHJlc29sdmVDb21wbGV0aW9uSXRlbT8oaXRlbTogQ29tcGxldGlvbkl0ZW0sIHRva2VuOiBDYW5jZWxsYXRpb25Ub2tlbik6IFByb3ZpZGVyUmVzdWx0PENvbXBsZXRpb25JdGVtPjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIb3cgYW4ge0BsaW5rIElubGluZUNvbXBsZXRpb25zUHJvdmlkZXIgaW5saW5lIGNvbXBsZXRpb24gcHJvdmlkZXJ9IHdhcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgZXhwb3J0IGVudW0gSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbXBsZXRpb24gd2FzIHRyaWdnZXJlZCBhdXRvbWF0aWNhbGx5IHdoaWxlIGVkaXRpbmcuXG4gICAgICAgICAqIEl0IGlzIHN1ZmZpY2llbnQgdG8gcmV0dXJuIGEgc2luZ2xlIGNvbXBsZXRpb24gaXRlbSBpbiB0aGlzIGNhc2UuXG4gICAgICAgICAqL1xuICAgICAgICBBdXRvbWF0aWMgPSAwLFxuICAgICAgICAvKipcbiAgICAgICAgICogQ29tcGxldGlvbiB3YXMgdHJpZ2dlcmVkIGV4cGxpY2l0bHkgYnkgYSB1c2VyIGdlc3R1cmUuXG4gICAgICAgICAqIFJldHVybiBtdWx0aXBsZSBjb21wbGV0aW9uIGl0ZW1zIHRvIGVuYWJsZSBjeWNsaW5nIHRocm91Z2ggdGhlbS5cbiAgICAgICAgICovXG4gICAgICAgIEV4cGxpY2l0ID0gMVxuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSW5saW5lQ29tcGxldGlvbkNvbnRleHQge1xuICAgICAgICAvKipcbiAgICAgICAgICogSG93IHRoZSBjb21wbGV0aW9uIHdhcyB0cmlnZ2VyZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSB0cmlnZ2VyS2luZDogSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kO1xuICAgICAgICByZWFkb25seSBzZWxlY3RlZFN1Z2dlc3Rpb25JbmZvOiBTZWxlY3RlZFN1Z2dlc3Rpb25JbmZvIHwgdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0ZWRTdWdnZXN0aW9uSW5mbyB7XG4gICAgICAgIHJhbmdlOiBJUmFuZ2U7XG4gICAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgICAgaXNTbmlwcGV0VGV4dDogYm9vbGVhbjtcbiAgICAgICAgY29tcGxldGlvbktpbmQ6IENvbXBsZXRpb25JdGVtS2luZDtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElubGluZUNvbXBsZXRpb24ge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHRleHQgdG8gaW5zZXJ0LlxuICAgICAgICAgKiBJZiB0aGUgdGV4dCBjb250YWlucyBhIGxpbmUgYnJlYWssIHRoZSByYW5nZSBtdXN0IGVuZCBhdCB0aGUgZW5kIG9mIGEgbGluZS5cbiAgICAgICAgICogSWYgZXhpc3RpbmcgdGV4dCBzaG91bGQgYmUgcmVwbGFjZWQsIHRoZSBleGlzdGluZyB0ZXh0IG11c3QgYmUgYSBwcmVmaXggb2YgdGhlIHRleHQgdG8gaW5zZXJ0LlxuICAgICAgICAqL1xuICAgICAgICByZWFkb25seSB0ZXh0OiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcmFuZ2UgdG8gcmVwbGFjZS5cbiAgICAgICAgICogTXVzdCBiZWdpbiBhbmQgZW5kIG9uIHRoZSBzYW1lIGxpbmUuXG4gICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHJhbmdlPzogSVJhbmdlO1xuICAgICAgICByZWFkb25seSBjb21tYW5kPzogQ29tbWFuZDtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElubGluZUNvbXBsZXRpb25zPFRJdGVtIGV4dGVuZHMgSW5saW5lQ29tcGxldGlvbiA9IElubGluZUNvbXBsZXRpb24+IHtcbiAgICAgICAgcmVhZG9ubHkgaXRlbXM6IHJlYWRvbmx5IFRJdGVtW107XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBJbmxpbmVDb21wbGV0aW9uc1Byb3ZpZGVyPFQgZXh0ZW5kcyBJbmxpbmVDb21wbGV0aW9ucyA9IElubGluZUNvbXBsZXRpb25zPiB7XG4gICAgICAgIHByb3ZpZGVJbmxpbmVDb21wbGV0aW9ucyhtb2RlbDogZWRpdG9yLklUZXh0TW9kZWwsIHBvc2l0aW9uOiBQb3NpdGlvbiwgY29udGV4dDogSW5saW5lQ29tcGxldGlvbkNvbnRleHQsIHRva2VuOiBDYW5jZWxsYXRpb25Ub2tlbik6IFByb3ZpZGVyUmVzdWx0PFQ+O1xuICAgICAgICAvKipcbiAgICAgICAgICogV2lsbCBiZSBjYWxsZWQgd2hlbiBhbiBpdGVtIGlzIHNob3duLlxuICAgICAgICAqL1xuICAgICAgICBoYW5kbGVJdGVtRGlkU2hvdz8oY29tcGxldGlvbnM6IFQsIGl0ZW06IFRbJ2l0ZW1zJ11bbnVtYmVyXSk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgY29tcGxldGlvbnMgbGlzdCBpcyBubyBsb25nZXIgaW4gdXNlIGFuZCBjYW4gYmUgZ2FyYmFnZS1jb2xsZWN0ZWQuXG4gICAgICAgICovXG4gICAgICAgIGZyZWVJbmxpbmVDb21wbGV0aW9ucyhjb21wbGV0aW9uczogVCk6IHZvaWQ7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBDb2RlQWN0aW9uIHtcbiAgICAgICAgdGl0bGU6IHN0cmluZztcbiAgICAgICAgY29tbWFuZD86IENvbW1hbmQ7XG4gICAgICAgIGVkaXQ/OiBXb3Jrc3BhY2VFZGl0O1xuICAgICAgICBkaWFnbm9zdGljcz86IGVkaXRvci5JTWFya2VyRGF0YVtdO1xuICAgICAgICBraW5kPzogc3RyaW5nO1xuICAgICAgICBpc1ByZWZlcnJlZD86IGJvb2xlYW47XG4gICAgICAgIGRpc2FibGVkPzogc3RyaW5nO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29kZUFjdGlvbkxpc3QgZXh0ZW5kcyBJRGlzcG9zYWJsZSB7XG4gICAgICAgIHJlYWRvbmx5IGFjdGlvbnM6IFJlYWRvbmx5QXJyYXk8Q29kZUFjdGlvbj47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhIHBhcmFtZXRlciBvZiBhIGNhbGxhYmxlLXNpZ25hdHVyZS4gQSBwYXJhbWV0ZXIgY2FuXG4gICAgICogaGF2ZSBhIGxhYmVsIGFuZCBhIGRvYy1jb21tZW50LlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgUGFyYW1ldGVySW5mb3JtYXRpb24ge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGxhYmVsIG9mIHRoaXMgc2lnbmF0dXJlLiBXaWxsIGJlIHNob3duIGluXG4gICAgICAgICAqIHRoZSBVSS5cbiAgICAgICAgICovXG4gICAgICAgIGxhYmVsOiBzdHJpbmcgfCBbbnVtYmVyLCBudW1iZXJdO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGh1bWFuLXJlYWRhYmxlIGRvYy1jb21tZW50IG9mIHRoaXMgc2lnbmF0dXJlLiBXaWxsIGJlIHNob3duXG4gICAgICAgICAqIGluIHRoZSBVSSBidXQgY2FuIGJlIG9taXR0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICBkb2N1bWVudGF0aW9uPzogc3RyaW5nIHwgSU1hcmtkb3duU3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgdGhlIHNpZ25hdHVyZSBvZiBzb21ldGhpbmcgY2FsbGFibGUuIEEgc2lnbmF0dXJlXG4gICAgICogY2FuIGhhdmUgYSBsYWJlbCwgbGlrZSBhIGZ1bmN0aW9uLW5hbWUsIGEgZG9jLWNvbW1lbnQsIGFuZFxuICAgICAqIGEgc2V0IG9mIHBhcmFtZXRlcnMuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBTaWduYXR1cmVJbmZvcm1hdGlvbiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbGFiZWwgb2YgdGhpcyBzaWduYXR1cmUuIFdpbGwgYmUgc2hvd24gaW5cbiAgICAgICAgICogdGhlIFVJLlxuICAgICAgICAgKi9cbiAgICAgICAgbGFiZWw6IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBodW1hbi1yZWFkYWJsZSBkb2MtY29tbWVudCBvZiB0aGlzIHNpZ25hdHVyZS4gV2lsbCBiZSBzaG93blxuICAgICAgICAgKiBpbiB0aGUgVUkgYnV0IGNhbiBiZSBvbWl0dGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgZG9jdW1lbnRhdGlvbj86IHN0cmluZyB8IElNYXJrZG93blN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBwYXJhbWV0ZXJzIG9mIHRoaXMgc2lnbmF0dXJlLlxuICAgICAgICAgKi9cbiAgICAgICAgcGFyYW1ldGVyczogUGFyYW1ldGVySW5mb3JtYXRpb25bXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluZGV4IG9mIHRoZSBhY3RpdmUgcGFyYW1ldGVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBJZiBwcm92aWRlZCwgdGhpcyBpcyB1c2VkIGluIHBsYWNlIG9mIGBTaWduYXR1cmVIZWxwLmFjdGl2ZVNpZ25hdHVyZWAuXG4gICAgICAgICAqL1xuICAgICAgICBhY3RpdmVQYXJhbWV0ZXI/OiBudW1iZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2lnbmF0dXJlIGhlbHAgcmVwcmVzZW50cyB0aGUgc2lnbmF0dXJlIG9mIHNvbWV0aGluZ1xuICAgICAqIGNhbGxhYmxlLiBUaGVyZSBjYW4gYmUgbXVsdGlwbGUgc2lnbmF0dXJlcyBidXQgb25seSBvbmVcbiAgICAgKiBhY3RpdmUgYW5kIG9ubHkgb25lIGFjdGl2ZSBwYXJhbWV0ZXIuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBTaWduYXR1cmVIZWxwIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9uZSBvciBtb3JlIHNpZ25hdHVyZXMuXG4gICAgICAgICAqL1xuICAgICAgICBzaWduYXR1cmVzOiBTaWduYXR1cmVJbmZvcm1hdGlvbltdO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGFjdGl2ZSBzaWduYXR1cmUuXG4gICAgICAgICAqL1xuICAgICAgICBhY3RpdmVTaWduYXR1cmU6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBhY3RpdmUgcGFyYW1ldGVyIG9mIHRoZSBhY3RpdmUgc2lnbmF0dXJlLlxuICAgICAgICAgKi9cbiAgICAgICAgYWN0aXZlUGFyYW1ldGVyOiBudW1iZXI7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBTaWduYXR1cmVIZWxwUmVzdWx0IGV4dGVuZHMgSURpc3Bvc2FibGUge1xuICAgICAgICB2YWx1ZTogU2lnbmF0dXJlSGVscDtcbiAgICB9XG5cbiAgICBleHBvcnQgZW51bSBTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQge1xuICAgICAgICBJbnZva2UgPSAxLFxuICAgICAgICBUcmlnZ2VyQ2hhcmFjdGVyID0gMixcbiAgICAgICAgQ29udGVudENoYW5nZSA9IDNcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFNpZ25hdHVyZUhlbHBDb250ZXh0IHtcbiAgICAgICAgcmVhZG9ubHkgdHJpZ2dlcktpbmQ6IFNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZDtcbiAgICAgICAgcmVhZG9ubHkgdHJpZ2dlckNoYXJhY3Rlcj86IHN0cmluZztcbiAgICAgICAgcmVhZG9ubHkgaXNSZXRyaWdnZXI6IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IGFjdGl2ZVNpZ25hdHVyZUhlbHA/OiBTaWduYXR1cmVIZWxwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBzaWduYXR1cmUgaGVscCBwcm92aWRlciBpbnRlcmZhY2UgZGVmaW5lcyB0aGUgY29udHJhY3QgYmV0d2VlbiBleHRlbnNpb25zIGFuZFxuICAgICAqIHRoZSBbcGFyYW1ldGVyIGhpbnRzXShodHRwczovL2NvZGUudmlzdWFsc3R1ZGlvLmNvbS9kb2NzL2VkaXRvci9pbnRlbGxpc2Vuc2UpLWZlYXR1cmUuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBTaWduYXR1cmVIZWxwUHJvdmlkZXIge1xuICAgICAgICByZWFkb25seSBzaWduYXR1cmVIZWxwVHJpZ2dlckNoYXJhY3RlcnM/OiBSZWFkb25seUFycmF5PHN0cmluZz47XG4gICAgICAgIHJlYWRvbmx5IHNpZ25hdHVyZUhlbHBSZXRyaWdnZXJDaGFyYWN0ZXJzPzogUmVhZG9ubHlBcnJheTxzdHJpbmc+O1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvdmlkZSBoZWxwIGZvciB0aGUgc2lnbmF0dXJlIGF0IHRoZSBnaXZlbiBwb3NpdGlvbiBhbmQgZG9jdW1lbnQuXG4gICAgICAgICAqL1xuICAgICAgICBwcm92aWRlU2lnbmF0dXJlSGVscChtb2RlbDogZWRpdG9yLklUZXh0TW9kZWwsIHBvc2l0aW9uOiBQb3NpdGlvbiwgdG9rZW46IENhbmNlbGxhdGlvblRva2VuLCBjb250ZXh0OiBTaWduYXR1cmVIZWxwQ29udGV4dCk6IFByb3ZpZGVyUmVzdWx0PFNpZ25hdHVyZUhlbHBSZXN1bHQ+O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgZG9jdW1lbnQgaGlnaGxpZ2h0IGtpbmQuXG4gICAgICovXG4gICAgZXhwb3J0IGVudW0gRG9jdW1lbnRIaWdobGlnaHRLaW5kIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgdGV4dHVhbCBvY2N1cnJlbmNlLlxuICAgICAgICAgKi9cbiAgICAgICAgVGV4dCA9IDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZWFkLWFjY2VzcyBvZiBhIHN5bWJvbCwgbGlrZSByZWFkaW5nIGEgdmFyaWFibGUuXG4gICAgICAgICAqL1xuICAgICAgICBSZWFkID0gMSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdyaXRlLWFjY2VzcyBvZiBhIHN5bWJvbCwgbGlrZSB3cml0aW5nIHRvIGEgdmFyaWFibGUuXG4gICAgICAgICAqL1xuICAgICAgICBXcml0ZSA9IDJcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGRvY3VtZW50IGhpZ2hsaWdodCBpcyBhIHJhbmdlIGluc2lkZSBhIHRleHQgZG9jdW1lbnQgd2hpY2ggZGVzZXJ2ZXNcbiAgICAgKiBzcGVjaWFsIGF0dGVudGlvbi4gVXN1YWxseSBhIGRvY3VtZW50IGhpZ2hsaWdodCBpcyB2aXN1YWxpemVkIGJ5IGNoYW5naW5nXG4gICAgICogdGhlIGJhY2tncm91bmQgY29sb3Igb2YgaXRzIHJhbmdlLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgRG9jdW1lbnRIaWdobGlnaHQge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHJhbmdlIHRoaXMgaGlnaGxpZ2h0IGFwcGxpZXMgdG8uXG4gICAgICAgICAqL1xuICAgICAgICByYW5nZTogSVJhbmdlO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGhpZ2hsaWdodCBraW5kLCBkZWZhdWx0IGlzIHtAbGluayBEb2N1bWVudEhpZ2hsaWdodEtpbmQuVGV4dCB0ZXh0fS5cbiAgICAgICAgICovXG4gICAgICAgIGtpbmQ/OiBEb2N1bWVudEhpZ2hsaWdodEtpbmQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGRvY3VtZW50IGhpZ2hsaWdodCBwcm92aWRlciBpbnRlcmZhY2UgZGVmaW5lcyB0aGUgY29udHJhY3QgYmV0d2VlbiBleHRlbnNpb25zIGFuZFxuICAgICAqIHRoZSB3b3JkLWhpZ2hsaWdodC1mZWF0dXJlLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgRG9jdW1lbnRIaWdobGlnaHRQcm92aWRlciB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm92aWRlIGEgc2V0IG9mIGRvY3VtZW50IGhpZ2hsaWdodHMsIGxpa2UgYWxsIG9jY3VycmVuY2VzIG9mIGEgdmFyaWFibGUgb3JcbiAgICAgICAgICogYWxsIGV4aXQtcG9pbnRzIG9mIGEgZnVuY3Rpb24uXG4gICAgICAgICAqL1xuICAgICAgICBwcm92aWRlRG9jdW1lbnRIaWdobGlnaHRzKG1vZGVsOiBlZGl0b3IuSVRleHRNb2RlbCwgcG9zaXRpb246IFBvc2l0aW9uLCB0b2tlbjogQ2FuY2VsbGF0aW9uVG9rZW4pOiBQcm92aWRlclJlc3VsdDxEb2N1bWVudEhpZ2hsaWdodFtdPjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGlua2VkIGVkaXRpbmcgcmFuZ2UgcHJvdmlkZXIgaW50ZXJmYWNlIGRlZmluZXMgdGhlIGNvbnRyYWN0IGJldHdlZW4gZXh0ZW5zaW9ucyBhbmRcbiAgICAgKiB0aGUgbGlua2VkIGVkaXRpbmcgZmVhdHVyZS5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIExpbmtlZEVkaXRpbmdSYW5nZVByb3ZpZGVyIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3ZpZGUgYSBsaXN0IG9mIHJhbmdlcyB0aGF0IGNhbiBiZSBlZGl0ZWQgdG9nZXRoZXIuXG4gICAgICAgICAqL1xuICAgICAgICBwcm92aWRlTGlua2VkRWRpdGluZ1Jhbmdlcyhtb2RlbDogZWRpdG9yLklUZXh0TW9kZWwsIHBvc2l0aW9uOiBQb3NpdGlvbiwgdG9rZW46IENhbmNlbGxhdGlvblRva2VuKTogUHJvdmlkZXJSZXN1bHQ8TGlua2VkRWRpdGluZ1Jhbmdlcz47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhIGxpc3Qgb2YgcmFuZ2VzIHRoYXQgY2FuIGJlIGVkaXRlZCB0b2dldGhlciBhbG9uZyB3aXRoIGEgd29yZCBwYXR0ZXJuIHRvIGRlc2NyaWJlIHZhbGlkIGNvbnRlbnRzLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgTGlua2VkRWRpdGluZ1JhbmdlcyB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGxpc3Qgb2YgcmFuZ2VzIHRoYXQgY2FuIGJlIGVkaXRlZCB0b2dldGhlci4gVGhlIHJhbmdlcyBtdXN0IGhhdmVcbiAgICAgICAgICogaWRlbnRpY2FsIGxlbmd0aCBhbmQgdGV4dCBjb250ZW50LiBUaGUgcmFuZ2VzIGNhbm5vdCBvdmVybGFwXG4gICAgICAgICAqL1xuICAgICAgICByYW5nZXM6IElSYW5nZVtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gb3B0aW9uYWwgd29yZCBwYXR0ZXJuIHRoYXQgZGVzY3JpYmVzIHZhbGlkIGNvbnRlbnRzIGZvciB0aGUgZ2l2ZW4gcmFuZ2VzLlxuICAgICAgICAgKiBJZiBubyBwYXR0ZXJuIGlzIHByb3ZpZGVkLCB0aGUgbGFuZ3VhZ2UgY29uZmlndXJhdGlvbidzIHdvcmQgcGF0dGVybiB3aWxsIGJlIHVzZWQuXG4gICAgICAgICAqL1xuICAgICAgICB3b3JkUGF0dGVybj86IFJlZ0V4cDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZS1vYmplY3QgdGhhdCBjb250YWlucyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHdoZW5cbiAgICAgKiByZXF1ZXN0aW5nIHJlZmVyZW5jZXMuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBSZWZlcmVuY2VDb250ZXh0IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluY2x1ZGUgdGhlIGRlY2xhcmF0aW9uIG9mIHRoZSBjdXJyZW50IHN5bWJvbC5cbiAgICAgICAgICovXG4gICAgICAgIGluY2x1ZGVEZWNsYXJhdGlvbjogYm9vbGVhbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmVmZXJlbmNlIHByb3ZpZGVyIGludGVyZmFjZSBkZWZpbmVzIHRoZSBjb250cmFjdCBiZXR3ZWVuIGV4dGVuc2lvbnMgYW5kXG4gICAgICogdGhlIFtmaW5kIHJlZmVyZW5jZXNdKGh0dHBzOi8vY29kZS52aXN1YWxzdHVkaW8uY29tL2RvY3MvZWRpdG9yL2VkaXRpbmdldm9sdmVkI19wZWVrKS1mZWF0dXJlLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgUmVmZXJlbmNlUHJvdmlkZXIge1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvdmlkZSBhIHNldCBvZiBwcm9qZWN0LXdpZGUgcmVmZXJlbmNlcyBmb3IgdGhlIGdpdmVuIHBvc2l0aW9uIGFuZCBkb2N1bWVudC5cbiAgICAgICAgICovXG4gICAgICAgIHByb3ZpZGVSZWZlcmVuY2VzKG1vZGVsOiBlZGl0b3IuSVRleHRNb2RlbCwgcG9zaXRpb246IFBvc2l0aW9uLCBjb250ZXh0OiBSZWZlcmVuY2VDb250ZXh0LCB0b2tlbjogQ2FuY2VsbGF0aW9uVG9rZW4pOiBQcm92aWRlclJlc3VsdDxMb2NhdGlvbltdPjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGEgbG9jYXRpb24gaW5zaWRlIGEgcmVzb3VyY2UsIHN1Y2ggYXMgYSBsaW5lXG4gICAgICogaW5zaWRlIGEgdGV4dCBmaWxlLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgTG9jYXRpb24ge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHJlc291cmNlIGlkZW50aWZpZXIgb2YgdGhpcyBsb2NhdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHVyaTogVXJpO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGRvY3VtZW50IHJhbmdlIG9mIHRoaXMgbG9jYXRpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgcmFuZ2U6IElSYW5nZTtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIExvY2F0aW9uTGluayB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJhbmdlIHRvIHNlbGVjdCB3aGVyZSB0aGlzIGxpbmsgb3JpZ2luYXRlcyBmcm9tLlxuICAgICAgICAgKi9cbiAgICAgICAgb3JpZ2luU2VsZWN0aW9uUmFuZ2U/OiBJUmFuZ2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdGFyZ2V0IHVyaSB0aGlzIGxpbmsgcG9pbnRzIHRvLlxuICAgICAgICAgKi9cbiAgICAgICAgdXJpOiBVcmk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZnVsbCByYW5nZSB0aGlzIGxpbmsgcG9pbnRzIHRvLlxuICAgICAgICAgKi9cbiAgICAgICAgcmFuZ2U6IElSYW5nZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmFuZ2UgdG8gc2VsZWN0IHRoaXMgbGluayBwb2ludHMgdG8uIE11c3QgYmUgY29udGFpbmVkXG4gICAgICAgICAqIGluIGBMb2NhdGlvbkxpbmsucmFuZ2VgLlxuICAgICAgICAgKi9cbiAgICAgICAgdGFyZ2V0U2VsZWN0aW9uUmFuZ2U/OiBJUmFuZ2U7XG4gICAgfVxuXG4gICAgZXhwb3J0IHR5cGUgRGVmaW5pdGlvbiA9IExvY2F0aW9uIHwgTG9jYXRpb25bXSB8IExvY2F0aW9uTGlua1tdO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGRlZmluaXRpb24gcHJvdmlkZXIgaW50ZXJmYWNlIGRlZmluZXMgdGhlIGNvbnRyYWN0IGJldHdlZW4gZXh0ZW5zaW9ucyBhbmRcbiAgICAgKiB0aGUgW2dvIHRvIGRlZmluaXRpb25dKGh0dHBzOi8vY29kZS52aXN1YWxzdHVkaW8uY29tL2RvY3MvZWRpdG9yL2VkaXRpbmdldm9sdmVkI19nby10by1kZWZpbml0aW9uKVxuICAgICAqIGFuZCBwZWVrIGRlZmluaXRpb24gZmVhdHVyZXMuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBEZWZpbml0aW9uUHJvdmlkZXIge1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvdmlkZSB0aGUgZGVmaW5pdGlvbiBvZiB0aGUgc3ltYm9sIGF0IHRoZSBnaXZlbiBwb3NpdGlvbiBhbmQgZG9jdW1lbnQuXG4gICAgICAgICAqL1xuICAgICAgICBwcm92aWRlRGVmaW5pdGlvbihtb2RlbDogZWRpdG9yLklUZXh0TW9kZWwsIHBvc2l0aW9uOiBQb3NpdGlvbiwgdG9rZW46IENhbmNlbGxhdGlvblRva2VuKTogUHJvdmlkZXJSZXN1bHQ8RGVmaW5pdGlvbiB8IExvY2F0aW9uTGlua1tdPjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGVmaW5pdGlvbiBwcm92aWRlciBpbnRlcmZhY2UgZGVmaW5lcyB0aGUgY29udHJhY3QgYmV0d2VlbiBleHRlbnNpb25zIGFuZFxuICAgICAqIHRoZSBbZ28gdG8gZGVmaW5pdGlvbl0oaHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG9jcy9lZGl0b3IvZWRpdGluZ2V2b2x2ZWQjX2dvLXRvLWRlZmluaXRpb24pXG4gICAgICogYW5kIHBlZWsgZGVmaW5pdGlvbiBmZWF0dXJlcy5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIERlY2xhcmF0aW9uUHJvdmlkZXIge1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvdmlkZSB0aGUgZGVjbGFyYXRpb24gb2YgdGhlIHN5bWJvbCBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24gYW5kIGRvY3VtZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgcHJvdmlkZURlY2xhcmF0aW9uKG1vZGVsOiBlZGl0b3IuSVRleHRNb2RlbCwgcG9zaXRpb246IFBvc2l0aW9uLCB0b2tlbjogQ2FuY2VsbGF0aW9uVG9rZW4pOiBQcm92aWRlclJlc3VsdDxEZWZpbml0aW9uIHwgTG9jYXRpb25MaW5rW10+O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbXBsZW1lbnRhdGlvbiBwcm92aWRlciBpbnRlcmZhY2UgZGVmaW5lcyB0aGUgY29udHJhY3QgYmV0d2VlbiBleHRlbnNpb25zIGFuZFxuICAgICAqIHRoZSBnbyB0byBpbXBsZW1lbnRhdGlvbiBmZWF0dXJlLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSW1wbGVtZW50YXRpb25Qcm92aWRlciB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm92aWRlIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgc3ltYm9sIGF0IHRoZSBnaXZlbiBwb3NpdGlvbiBhbmQgZG9jdW1lbnQuXG4gICAgICAgICAqL1xuICAgICAgICBwcm92aWRlSW1wbGVtZW50YXRpb24obW9kZWw6IGVkaXRvci5JVGV4dE1vZGVsLCBwb3NpdGlvbjogUG9zaXRpb24sIHRva2VuOiBDYW5jZWxsYXRpb25Ub2tlbik6IFByb3ZpZGVyUmVzdWx0PERlZmluaXRpb24gfCBMb2NhdGlvbkxpbmtbXT47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgZGVmaW5pdGlvbiBwcm92aWRlciBpbnRlcmZhY2UgZGVmaW5lcyB0aGUgY29udHJhY3QgYmV0d2VlbiBleHRlbnNpb25zIGFuZFxuICAgICAqIHRoZSBnbyB0byB0eXBlIGRlZmluaXRpb24gZmVhdHVyZS5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIFR5cGVEZWZpbml0aW9uUHJvdmlkZXIge1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvdmlkZSB0aGUgdHlwZSBkZWZpbml0aW9uIG9mIHRoZSBzeW1ib2wgYXQgdGhlIGdpdmVuIHBvc2l0aW9uIGFuZCBkb2N1bWVudC5cbiAgICAgICAgICovXG4gICAgICAgIHByb3ZpZGVUeXBlRGVmaW5pdGlvbihtb2RlbDogZWRpdG9yLklUZXh0TW9kZWwsIHBvc2l0aW9uOiBQb3NpdGlvbiwgdG9rZW46IENhbmNlbGxhdGlvblRva2VuKTogUHJvdmlkZXJSZXN1bHQ8RGVmaW5pdGlvbiB8IExvY2F0aW9uTGlua1tdPjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHN5bWJvbCBraW5kLlxuICAgICAqL1xuICAgIGV4cG9ydCBlbnVtIFN5bWJvbEtpbmQge1xuICAgICAgICBGaWxlID0gMCxcbiAgICAgICAgTW9kdWxlID0gMSxcbiAgICAgICAgTmFtZXNwYWNlID0gMixcbiAgICAgICAgUGFja2FnZSA9IDMsXG4gICAgICAgIENsYXNzID0gNCxcbiAgICAgICAgTWV0aG9kID0gNSxcbiAgICAgICAgUHJvcGVydHkgPSA2LFxuICAgICAgICBGaWVsZCA9IDcsXG4gICAgICAgIENvbnN0cnVjdG9yID0gOCxcbiAgICAgICAgRW51bSA9IDksXG4gICAgICAgIEludGVyZmFjZSA9IDEwLFxuICAgICAgICBGdW5jdGlvbiA9IDExLFxuICAgICAgICBWYXJpYWJsZSA9IDEyLFxuICAgICAgICBDb25zdGFudCA9IDEzLFxuICAgICAgICBTdHJpbmcgPSAxNCxcbiAgICAgICAgTnVtYmVyID0gMTUsXG4gICAgICAgIEJvb2xlYW4gPSAxNixcbiAgICAgICAgQXJyYXkgPSAxNyxcbiAgICAgICAgT2JqZWN0ID0gMTgsXG4gICAgICAgIEtleSA9IDE5LFxuICAgICAgICBOdWxsID0gMjAsXG4gICAgICAgIEVudW1NZW1iZXIgPSAyMSxcbiAgICAgICAgU3RydWN0ID0gMjIsXG4gICAgICAgIEV2ZW50ID0gMjMsXG4gICAgICAgIE9wZXJhdG9yID0gMjQsXG4gICAgICAgIFR5cGVQYXJhbWV0ZXIgPSAyNVxuICAgIH1cblxuICAgIGV4cG9ydCBlbnVtIFN5bWJvbFRhZyB7XG4gICAgICAgIERlcHJlY2F0ZWQgPSAxXG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBEb2N1bWVudFN5bWJvbCB7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgZGV0YWlsOiBzdHJpbmc7XG4gICAgICAgIGtpbmQ6IFN5bWJvbEtpbmQ7XG4gICAgICAgIHRhZ3M6IFJlYWRvbmx5QXJyYXk8U3ltYm9sVGFnPjtcbiAgICAgICAgY29udGFpbmVyTmFtZT86IHN0cmluZztcbiAgICAgICAgcmFuZ2U6IElSYW5nZTtcbiAgICAgICAgc2VsZWN0aW9uUmFuZ2U6IElSYW5nZTtcbiAgICAgICAgY2hpbGRyZW4/OiBEb2N1bWVudFN5bWJvbFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBkb2N1bWVudCBzeW1ib2wgcHJvdmlkZXIgaW50ZXJmYWNlIGRlZmluZXMgdGhlIGNvbnRyYWN0IGJldHdlZW4gZXh0ZW5zaW9ucyBhbmRcbiAgICAgKiB0aGUgW2dvIHRvIHN5bWJvbF0oaHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG9jcy9lZGl0b3IvZWRpdGluZ2V2b2x2ZWQjX2dvLXRvLXN5bWJvbCktZmVhdHVyZS5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIERvY3VtZW50U3ltYm9sUHJvdmlkZXIge1xuICAgICAgICBkaXNwbGF5TmFtZT86IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3ZpZGUgc3ltYm9sIGluZm9ybWF0aW9uIGZvciB0aGUgZ2l2ZW4gZG9jdW1lbnQuXG4gICAgICAgICAqL1xuICAgICAgICBwcm92aWRlRG9jdW1lbnRTeW1ib2xzKG1vZGVsOiBlZGl0b3IuSVRleHRNb2RlbCwgdG9rZW46IENhbmNlbGxhdGlvblRva2VuKTogUHJvdmlkZXJSZXN1bHQ8RG9jdW1lbnRTeW1ib2xbXT47XG4gICAgfVxuXG4gICAgZXhwb3J0IHR5cGUgVGV4dEVkaXQgPSB7XG4gICAgICAgIHJhbmdlOiBJUmFuZ2U7XG4gICAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgICAgZW9sPzogZWRpdG9yLkVuZE9mTGluZVNlcXVlbmNlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcmZhY2UgdXNlZCB0byBmb3JtYXQgYSBtb2RlbFxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgRm9ybWF0dGluZ09wdGlvbnMge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2l6ZSBvZiBhIHRhYiBpbiBzcGFjZXMuXG4gICAgICAgICAqL1xuICAgICAgICB0YWJTaXplOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcmVmZXIgc3BhY2VzIG92ZXIgdGFicy5cbiAgICAgICAgICovXG4gICAgICAgIGluc2VydFNwYWNlczogYm9vbGVhbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZG9jdW1lbnQgZm9ybWF0dGluZyBwcm92aWRlciBpbnRlcmZhY2UgZGVmaW5lcyB0aGUgY29udHJhY3QgYmV0d2VlbiBleHRlbnNpb25zIGFuZFxuICAgICAqIHRoZSBmb3JtYXR0aW5nLWZlYXR1cmUuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBEb2N1bWVudEZvcm1hdHRpbmdFZGl0UHJvdmlkZXIge1xuICAgICAgICByZWFkb25seSBkaXNwbGF5TmFtZT86IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3ZpZGUgZm9ybWF0dGluZyBlZGl0cyBmb3IgYSB3aG9sZSBkb2N1bWVudC5cbiAgICAgICAgICovXG4gICAgICAgIHByb3ZpZGVEb2N1bWVudEZvcm1hdHRpbmdFZGl0cyhtb2RlbDogZWRpdG9yLklUZXh0TW9kZWwsIG9wdGlvbnM6IEZvcm1hdHRpbmdPcHRpb25zLCB0b2tlbjogQ2FuY2VsbGF0aW9uVG9rZW4pOiBQcm92aWRlclJlc3VsdDxUZXh0RWRpdFtdPjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZG9jdW1lbnQgZm9ybWF0dGluZyBwcm92aWRlciBpbnRlcmZhY2UgZGVmaW5lcyB0aGUgY29udHJhY3QgYmV0d2VlbiBleHRlbnNpb25zIGFuZFxuICAgICAqIHRoZSBmb3JtYXR0aW5nLWZlYXR1cmUuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBEb2N1bWVudFJhbmdlRm9ybWF0dGluZ0VkaXRQcm92aWRlciB7XG4gICAgICAgIHJlYWRvbmx5IGRpc3BsYXlOYW1lPzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvdmlkZSBmb3JtYXR0aW5nIGVkaXRzIGZvciBhIHJhbmdlIGluIGEgZG9jdW1lbnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoZSBnaXZlbiByYW5nZSBpcyBhIGhpbnQgYW5kIHByb3ZpZGVycyBjYW4gZGVjaWRlIHRvIGZvcm1hdCBhIHNtYWxsZXJcbiAgICAgICAgICogb3IgbGFyZ2VyIHJhbmdlLiBPZnRlbiB0aGlzIGlzIGRvbmUgYnkgYWRqdXN0aW5nIHRoZSBzdGFydCBhbmQgZW5kXG4gICAgICAgICAqIG9mIHRoZSByYW5nZSB0byBmdWxsIHN5bnRheCBub2Rlcy5cbiAgICAgICAgICovXG4gICAgICAgIHByb3ZpZGVEb2N1bWVudFJhbmdlRm9ybWF0dGluZ0VkaXRzKG1vZGVsOiBlZGl0b3IuSVRleHRNb2RlbCwgcmFuZ2U6IFJhbmdlLCBvcHRpb25zOiBGb3JtYXR0aW5nT3B0aW9ucywgdG9rZW46IENhbmNlbGxhdGlvblRva2VuKTogUHJvdmlkZXJSZXN1bHQ8VGV4dEVkaXRbXT47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGRvY3VtZW50IGZvcm1hdHRpbmcgcHJvdmlkZXIgaW50ZXJmYWNlIGRlZmluZXMgdGhlIGNvbnRyYWN0IGJldHdlZW4gZXh0ZW5zaW9ucyBhbmRcbiAgICAgKiB0aGUgZm9ybWF0dGluZy1mZWF0dXJlLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgT25UeXBlRm9ybWF0dGluZ0VkaXRQcm92aWRlciB7XG4gICAgICAgIGF1dG9Gb3JtYXRUcmlnZ2VyQ2hhcmFjdGVyczogc3RyaW5nW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm92aWRlIGZvcm1hdHRpbmcgZWRpdHMgYWZ0ZXIgYSBjaGFyYWN0ZXIgaGFzIGJlZW4gdHlwZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoZSBnaXZlbiBwb3NpdGlvbiBhbmQgY2hhcmFjdGVyIHNob3VsZCBoaW50IHRvIHRoZSBwcm92aWRlclxuICAgICAgICAgKiB3aGF0IHJhbmdlIHRoZSBwb3NpdGlvbiB0byBleHBhbmQgdG8sIGxpa2UgZmluZCB0aGUgbWF0Y2hpbmcgYHtgXG4gICAgICAgICAqIHdoZW4gYH1gIGhhcyBiZWVuIGVudGVyZWQuXG4gICAgICAgICAqL1xuICAgICAgICBwcm92aWRlT25UeXBlRm9ybWF0dGluZ0VkaXRzKG1vZGVsOiBlZGl0b3IuSVRleHRNb2RlbCwgcG9zaXRpb246IFBvc2l0aW9uLCBjaDogc3RyaW5nLCBvcHRpb25zOiBGb3JtYXR0aW5nT3B0aW9ucywgdG9rZW46IENhbmNlbGxhdGlvblRva2VuKTogUHJvdmlkZXJSZXN1bHQ8VGV4dEVkaXRbXT47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBsaW5rIGluc2lkZSB0aGUgZWRpdG9yLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUxpbmsge1xuICAgICAgICByYW5nZTogSVJhbmdlO1xuICAgICAgICB1cmw/OiBVcmkgfCBzdHJpbmc7XG4gICAgICAgIHRvb2x0aXA/OiBzdHJpbmc7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBJTGlua3NMaXN0IHtcbiAgICAgICAgbGlua3M6IElMaW5rW107XG4gICAgICAgIGRpc3Bvc2U/KCk6IHZvaWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBwcm92aWRlciBvZiBsaW5rcy5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIExpbmtQcm92aWRlciB7XG4gICAgICAgIHByb3ZpZGVMaW5rcyhtb2RlbDogZWRpdG9yLklUZXh0TW9kZWwsIHRva2VuOiBDYW5jZWxsYXRpb25Ub2tlbik6IFByb3ZpZGVyUmVzdWx0PElMaW5rc0xpc3Q+O1xuICAgICAgICByZXNvbHZlTGluaz86IChsaW5rOiBJTGluaywgdG9rZW46IENhbmNlbGxhdGlvblRva2VuKSA9PiBQcm92aWRlclJlc3VsdDxJTGluaz47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBjb2xvciBpbiBSR0JBIGZvcm1hdC5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElDb2xvciB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcmVkIGNvbXBvbmVudCBpbiB0aGUgcmFuZ2UgWzAtMV0uXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSByZWQ6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBncmVlbiBjb21wb25lbnQgaW4gdGhlIHJhbmdlIFswLTFdLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZ3JlZW46IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBibHVlIGNvbXBvbmVudCBpbiB0aGUgcmFuZ2UgWzAtMV0uXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBibHVlOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYWxwaGEgY29tcG9uZW50IGluIHRoZSByYW5nZSBbMC0xXS5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGFscGhhOiBudW1iZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RyaW5nIHJlcHJlc2VudGF0aW9ucyBmb3IgYSBjb2xvclxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUNvbG9yUHJlc2VudGF0aW9uIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBsYWJlbCBvZiB0aGlzIGNvbG9yIHByZXNlbnRhdGlvbi4gSXQgd2lsbCBiZSBzaG93biBvbiB0aGUgY29sb3JcbiAgICAgICAgICogcGlja2VyIGhlYWRlci4gQnkgZGVmYXVsdCB0aGlzIGlzIGFsc28gdGhlIHRleHQgdGhhdCBpcyBpbnNlcnRlZCB3aGVuIHNlbGVjdGluZ1xuICAgICAgICAgKiB0aGlzIGNvbG9yIHByZXNlbnRhdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiB7QGxpbmsgVGV4dEVkaXQgZWRpdH0gd2hpY2ggaXMgYXBwbGllZCB0byBhIGRvY3VtZW50IHdoZW4gc2VsZWN0aW5nXG4gICAgICAgICAqIHRoaXMgcHJlc2VudGF0aW9uIGZvciB0aGUgY29sb3IuXG4gICAgICAgICAqL1xuICAgICAgICB0ZXh0RWRpdD86IFRleHRFZGl0O1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gb3B0aW9uYWwgYXJyYXkgb2YgYWRkaXRpb25hbCB7QGxpbmsgVGV4dEVkaXQgdGV4dCBlZGl0c30gdGhhdCBhcmUgYXBwbGllZCB3aGVuXG4gICAgICAgICAqIHNlbGVjdGluZyB0aGlzIGNvbG9yIHByZXNlbnRhdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGFkZGl0aW9uYWxUZXh0RWRpdHM/OiBUZXh0RWRpdFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgY29sb3IgcmFuZ2UgaXMgYSByYW5nZSBpbiBhIHRleHQgbW9kZWwgd2hpY2ggcmVwcmVzZW50cyBhIGNvbG9yLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUNvbG9ySW5mb3JtYXRpb24ge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHJhbmdlIHdpdGhpbiB0aGUgbW9kZWwuXG4gICAgICAgICAqL1xuICAgICAgICByYW5nZTogSVJhbmdlO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNvbG9yIHJlcHJlc2VudGVkIGluIHRoaXMgcmFuZ2UuXG4gICAgICAgICAqL1xuICAgICAgICBjb2xvcjogSUNvbG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgcHJvdmlkZXIgb2YgY29sb3JzIGZvciBlZGl0b3IgbW9kZWxzLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgRG9jdW1lbnRDb2xvclByb3ZpZGVyIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3ZpZGVzIHRoZSBjb2xvciByYW5nZXMgZm9yIGEgc3BlY2lmaWMgbW9kZWwuXG4gICAgICAgICAqL1xuICAgICAgICBwcm92aWRlRG9jdW1lbnRDb2xvcnMobW9kZWw6IGVkaXRvci5JVGV4dE1vZGVsLCB0b2tlbjogQ2FuY2VsbGF0aW9uVG9rZW4pOiBQcm92aWRlclJlc3VsdDxJQ29sb3JJbmZvcm1hdGlvbltdPjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3ZpZGUgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbnMgZm9yIGEgY29sb3IuXG4gICAgICAgICAqL1xuICAgICAgICBwcm92aWRlQ29sb3JQcmVzZW50YXRpb25zKG1vZGVsOiBlZGl0b3IuSVRleHRNb2RlbCwgY29sb3JJbmZvOiBJQ29sb3JJbmZvcm1hdGlvbiwgdG9rZW46IENhbmNlbGxhdGlvblRva2VuKTogUHJvdmlkZXJSZXN1bHQ8SUNvbG9yUHJlc2VudGF0aW9uW10+O1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0aW9uUmFuZ2Uge1xuICAgICAgICByYW5nZTogSVJhbmdlO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0aW9uUmFuZ2VQcm92aWRlciB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm92aWRlIHJhbmdlcyB0aGF0IHNob3VsZCBiZSBzZWxlY3RlZCBmcm9tIHRoZSBnaXZlbiBwb3NpdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHByb3ZpZGVTZWxlY3Rpb25SYW5nZXMobW9kZWw6IGVkaXRvci5JVGV4dE1vZGVsLCBwb3NpdGlvbnM6IFBvc2l0aW9uW10sIHRva2VuOiBDYW5jZWxsYXRpb25Ub2tlbik6IFByb3ZpZGVyUmVzdWx0PFNlbGVjdGlvblJhbmdlW11bXT47XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBGb2xkaW5nQ29udGV4dCB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBwcm92aWRlciBvZiBmb2xkaW5nIHJhbmdlcyBmb3IgZWRpdG9yIG1vZGVscy5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIEZvbGRpbmdSYW5nZVByb3ZpZGVyIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIG9wdGlvbmFsIGV2ZW50IHRvIHNpZ25hbCB0aGF0IHRoZSBmb2xkaW5nIHJhbmdlcyBmcm9tIHRoaXMgcHJvdmlkZXIgaGF2ZSBjaGFuZ2VkLlxuICAgICAgICAgKi9cbiAgICAgICAgb25EaWRDaGFuZ2U/OiBJRXZlbnQ8dGhpcz47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm92aWRlcyB0aGUgZm9sZGluZyByYW5nZXMgZm9yIGEgc3BlY2lmaWMgbW9kZWwuXG4gICAgICAgICAqL1xuICAgICAgICBwcm92aWRlRm9sZGluZ1Jhbmdlcyhtb2RlbDogZWRpdG9yLklUZXh0TW9kZWwsIGNvbnRleHQ6IEZvbGRpbmdDb250ZXh0LCB0b2tlbjogQ2FuY2VsbGF0aW9uVG9rZW4pOiBQcm92aWRlclJlc3VsdDxGb2xkaW5nUmFuZ2VbXT47XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBGb2xkaW5nUmFuZ2Uge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG9uZS1iYXNlZCBzdGFydCBsaW5lIG9mIHRoZSByYW5nZSB0byBmb2xkLiBUaGUgZm9sZGVkIGFyZWEgc3RhcnRzIGFmdGVyIHRoZSBsaW5lJ3MgbGFzdCBjaGFyYWN0ZXIuXG4gICAgICAgICAqL1xuICAgICAgICBzdGFydDogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG9uZS1iYXNlZCBlbmQgbGluZSBvZiB0aGUgcmFuZ2UgdG8gZm9sZC4gVGhlIGZvbGRlZCBhcmVhIGVuZHMgd2l0aCB0aGUgbGluZSdzIGxhc3QgY2hhcmFjdGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgZW5kOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXNjcmliZXMgdGhlIHtAbGluayBGb2xkaW5nUmFuZ2VLaW5kIEtpbmR9IG9mIHRoZSBmb2xkaW5nIHJhbmdlIHN1Y2ggYXMge0BsaW5rIEZvbGRpbmdSYW5nZUtpbmQuQ29tbWVudCBDb21tZW50fSBvclxuICAgICAgICAgKiB7QGxpbmsgRm9sZGluZ1JhbmdlS2luZC5SZWdpb24gUmVnaW9ufS4gVGhlIGtpbmQgaXMgdXNlZCB0byBjYXRlZ29yaXplIGZvbGRpbmcgcmFuZ2VzIGFuZCB1c2VkIGJ5IGNvbW1hbmRzXG4gICAgICAgICAqIGxpa2UgJ0ZvbGQgYWxsIGNvbW1lbnRzJy4gU2VlXG4gICAgICAgICAqIHtAbGluayBGb2xkaW5nUmFuZ2VLaW5kfSBmb3IgYW4gZW51bWVyYXRpb24gb2Ygc3RhbmRhcmRpemVkIGtpbmRzLlxuICAgICAgICAgKi9cbiAgICAgICAga2luZD86IEZvbGRpbmdSYW5nZUtpbmQ7XG4gICAgfVxuXG4gICAgZXhwb3J0IGNsYXNzIEZvbGRpbmdSYW5nZUtpbmQge1xuICAgICAgICB2YWx1ZTogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogS2luZCBmb3IgZm9sZGluZyByYW5nZSByZXByZXNlbnRpbmcgYSBjb21tZW50LiBUaGUgdmFsdWUgb2YgdGhlIGtpbmQgaXMgJ2NvbW1lbnQnLlxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIHJlYWRvbmx5IENvbW1lbnQ6IEZvbGRpbmdSYW5nZUtpbmQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBLaW5kIGZvciBmb2xkaW5nIHJhbmdlIHJlcHJlc2VudGluZyBhIGltcG9ydC4gVGhlIHZhbHVlIG9mIHRoZSBraW5kIGlzICdpbXBvcnRzJy5cbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyByZWFkb25seSBJbXBvcnRzOiBGb2xkaW5nUmFuZ2VLaW5kO1xuICAgICAgICAvKipcbiAgICAgICAgICogS2luZCBmb3IgZm9sZGluZyByYW5nZSByZXByZXNlbnRpbmcgcmVnaW9ucyAoZm9yIGV4YW1wbGUgbWFya2VkIGJ5IGAjcmVnaW9uYCwgYCNlbmRyZWdpb25gKS5cbiAgICAgICAgICogVGhlIHZhbHVlIG9mIHRoZSBraW5kIGlzICdyZWdpb24nLlxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIHJlYWRvbmx5IFJlZ2lvbjogRm9sZGluZ1JhbmdlS2luZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBuZXcge0BsaW5rIEZvbGRpbmdSYW5nZUtpbmR9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdmFsdWUgb2YgdGhlIGtpbmQuXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdHJ1Y3Rvcih2YWx1ZTogc3RyaW5nKTtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFdvcmtzcGFjZUVkaXRNZXRhZGF0YSB7XG4gICAgICAgIG5lZWRzQ29uZmlybWF0aW9uOiBib29sZWFuO1xuICAgICAgICBsYWJlbDogc3RyaW5nO1xuICAgICAgICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFdvcmtzcGFjZUZpbGVFZGl0T3B0aW9ucyB7XG4gICAgICAgIG92ZXJ3cml0ZT86IGJvb2xlYW47XG4gICAgICAgIGlnbm9yZUlmTm90RXhpc3RzPzogYm9vbGVhbjtcbiAgICAgICAgaWdub3JlSWZFeGlzdHM/OiBib29sZWFuO1xuICAgICAgICByZWN1cnNpdmU/OiBib29sZWFuO1xuICAgICAgICBjb3B5PzogYm9vbGVhbjtcbiAgICAgICAgZm9sZGVyPzogYm9vbGVhbjtcbiAgICAgICAgc2tpcFRyYXNoQmluPzogYm9vbGVhbjtcbiAgICAgICAgbWF4U2l6ZT86IG51bWJlcjtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFdvcmtzcGFjZUZpbGVFZGl0IHtcbiAgICAgICAgb2xkVXJpPzogVXJpO1xuICAgICAgICBuZXdVcmk/OiBVcmk7XG4gICAgICAgIG9wdGlvbnM/OiBXb3Jrc3BhY2VGaWxlRWRpdE9wdGlvbnM7XG4gICAgICAgIG1ldGFkYXRhPzogV29ya3NwYWNlRWRpdE1ldGFkYXRhO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgV29ya3NwYWNlVGV4dEVkaXQge1xuICAgICAgICByZXNvdXJjZTogVXJpO1xuICAgICAgICBlZGl0OiBUZXh0RWRpdDtcbiAgICAgICAgbW9kZWxWZXJzaW9uSWQ/OiBudW1iZXI7XG4gICAgICAgIG1ldGFkYXRhPzogV29ya3NwYWNlRWRpdE1ldGFkYXRhO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgV29ya3NwYWNlRWRpdCB7XG4gICAgICAgIGVkaXRzOiBBcnJheTxXb3Jrc3BhY2VUZXh0RWRpdCB8IFdvcmtzcGFjZUZpbGVFZGl0PjtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFJlamVjdGlvbiB7XG4gICAgICAgIHJlamVjdFJlYXNvbj86IHN0cmluZztcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFJlbmFtZUxvY2F0aW9uIHtcbiAgICAgICAgcmFuZ2U6IElSYW5nZTtcbiAgICAgICAgdGV4dDogc3RyaW5nO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgUmVuYW1lUHJvdmlkZXIge1xuICAgICAgICBwcm92aWRlUmVuYW1lRWRpdHMobW9kZWw6IGVkaXRvci5JVGV4dE1vZGVsLCBwb3NpdGlvbjogUG9zaXRpb24sIG5ld05hbWU6IHN0cmluZywgdG9rZW46IENhbmNlbGxhdGlvblRva2VuKTogUHJvdmlkZXJSZXN1bHQ8V29ya3NwYWNlRWRpdCAmIFJlamVjdGlvbj47XG4gICAgICAgIHJlc29sdmVSZW5hbWVMb2NhdGlvbj8obW9kZWw6IGVkaXRvci5JVGV4dE1vZGVsLCBwb3NpdGlvbjogUG9zaXRpb24sIHRva2VuOiBDYW5jZWxsYXRpb25Ub2tlbik6IFByb3ZpZGVyUmVzdWx0PFJlbmFtZUxvY2F0aW9uICYgUmVqZWN0aW9uPjtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIENvbW1hbmQge1xuICAgICAgICBpZDogc3RyaW5nO1xuICAgICAgICB0aXRsZTogc3RyaW5nO1xuICAgICAgICB0b29sdGlwPzogc3RyaW5nO1xuICAgICAgICBhcmd1bWVudHM/OiBhbnlbXTtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIENvZGVMZW5zIHtcbiAgICAgICAgcmFuZ2U6IElSYW5nZTtcbiAgICAgICAgaWQ/OiBzdHJpbmc7XG4gICAgICAgIGNvbW1hbmQ/OiBDb21tYW5kO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29kZUxlbnNMaXN0IHtcbiAgICAgICAgbGVuc2VzOiBDb2RlTGVuc1tdO1xuICAgICAgICBkaXNwb3NlKCk6IHZvaWQ7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBDb2RlTGVuc1Byb3ZpZGVyIHtcbiAgICAgICAgb25EaWRDaGFuZ2U/OiBJRXZlbnQ8dGhpcz47XG4gICAgICAgIHByb3ZpZGVDb2RlTGVuc2VzKG1vZGVsOiBlZGl0b3IuSVRleHRNb2RlbCwgdG9rZW46IENhbmNlbGxhdGlvblRva2VuKTogUHJvdmlkZXJSZXN1bHQ8Q29kZUxlbnNMaXN0PjtcbiAgICAgICAgcmVzb2x2ZUNvZGVMZW5zPyhtb2RlbDogZWRpdG9yLklUZXh0TW9kZWwsIGNvZGVMZW5zOiBDb2RlTGVucywgdG9rZW46IENhbmNlbGxhdGlvblRva2VuKTogUHJvdmlkZXJSZXN1bHQ8Q29kZUxlbnM+O1xuICAgIH1cblxuICAgIGV4cG9ydCBlbnVtIElubGF5SGludEtpbmQge1xuICAgICAgICBPdGhlciA9IDAsXG4gICAgICAgIFR5cGUgPSAxLFxuICAgICAgICBQYXJhbWV0ZXIgPSAyXG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBJbmxheUhpbnQge1xuICAgICAgICB0ZXh0OiBzdHJpbmc7XG4gICAgICAgIHBvc2l0aW9uOiBJUG9zaXRpb247XG4gICAgICAgIGtpbmQ6IElubGF5SGludEtpbmQ7XG4gICAgICAgIHdoaXRlc3BhY2VCZWZvcmU/OiBib29sZWFuO1xuICAgICAgICB3aGl0ZXNwYWNlQWZ0ZXI/OiBib29sZWFuO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSW5sYXlIaW50c1Byb3ZpZGVyIHtcbiAgICAgICAgb25EaWRDaGFuZ2VJbmxheUhpbnRzPzogSUV2ZW50PHZvaWQ+O1xuICAgICAgICBwcm92aWRlSW5sYXlIaW50cyhtb2RlbDogZWRpdG9yLklUZXh0TW9kZWwsIHJhbmdlOiBSYW5nZSwgdG9rZW46IENhbmNlbGxhdGlvblRva2VuKTogUHJvdmlkZXJSZXN1bHQ8SW5sYXlIaW50W10+O1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgU2VtYW50aWNUb2tlbnNMZWdlbmQge1xuICAgICAgICByZWFkb25seSB0b2tlblR5cGVzOiBzdHJpbmdbXTtcbiAgICAgICAgcmVhZG9ubHkgdG9rZW5Nb2RpZmllcnM6IHN0cmluZ1tdO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgU2VtYW50aWNUb2tlbnMge1xuICAgICAgICByZWFkb25seSByZXN1bHRJZD86IHN0cmluZztcbiAgICAgICAgcmVhZG9ubHkgZGF0YTogVWludDMyQXJyYXk7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBTZW1hbnRpY1Rva2Vuc0VkaXQge1xuICAgICAgICByZWFkb25seSBzdGFydDogbnVtYmVyO1xuICAgICAgICByZWFkb25seSBkZWxldGVDb3VudDogbnVtYmVyO1xuICAgICAgICByZWFkb25seSBkYXRhPzogVWludDMyQXJyYXk7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBTZW1hbnRpY1Rva2Vuc0VkaXRzIHtcbiAgICAgICAgcmVhZG9ubHkgcmVzdWx0SWQ/OiBzdHJpbmc7XG4gICAgICAgIHJlYWRvbmx5IGVkaXRzOiBTZW1hbnRpY1Rva2Vuc0VkaXRbXTtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIERvY3VtZW50U2VtYW50aWNUb2tlbnNQcm92aWRlciB7XG4gICAgICAgIG9uRGlkQ2hhbmdlPzogSUV2ZW50PHZvaWQ+O1xuICAgICAgICBnZXRMZWdlbmQoKTogU2VtYW50aWNUb2tlbnNMZWdlbmQ7XG4gICAgICAgIHByb3ZpZGVEb2N1bWVudFNlbWFudGljVG9rZW5zKG1vZGVsOiBlZGl0b3IuSVRleHRNb2RlbCwgbGFzdFJlc3VsdElkOiBzdHJpbmcgfCBudWxsLCB0b2tlbjogQ2FuY2VsbGF0aW9uVG9rZW4pOiBQcm92aWRlclJlc3VsdDxTZW1hbnRpY1Rva2VucyB8IFNlbWFudGljVG9rZW5zRWRpdHM+O1xuICAgICAgICByZWxlYXNlRG9jdW1lbnRTZW1hbnRpY1Rva2VucyhyZXN1bHRJZDogc3RyaW5nIHwgdW5kZWZpbmVkKTogdm9pZDtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIERvY3VtZW50UmFuZ2VTZW1hbnRpY1Rva2Vuc1Byb3ZpZGVyIHtcbiAgICAgICAgZ2V0TGVnZW5kKCk6IFNlbWFudGljVG9rZW5zTGVnZW5kO1xuICAgICAgICBwcm92aWRlRG9jdW1lbnRSYW5nZVNlbWFudGljVG9rZW5zKG1vZGVsOiBlZGl0b3IuSVRleHRNb2RlbCwgcmFuZ2U6IFJhbmdlLCB0b2tlbjogQ2FuY2VsbGF0aW9uVG9rZW4pOiBQcm92aWRlclJlc3VsdDxTZW1hbnRpY1Rva2Vucz47XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBJTGFuZ3VhZ2VFeHRlbnNpb25Qb2ludCB7XG4gICAgICAgIGlkOiBzdHJpbmc7XG4gICAgICAgIGV4dGVuc2lvbnM/OiBzdHJpbmdbXTtcbiAgICAgICAgZmlsZW5hbWVzPzogc3RyaW5nW107XG4gICAgICAgIGZpbGVuYW1lUGF0dGVybnM/OiBzdHJpbmdbXTtcbiAgICAgICAgZmlyc3RMaW5lPzogc3RyaW5nO1xuICAgICAgICBhbGlhc2VzPzogc3RyaW5nW107XG4gICAgICAgIG1pbWV0eXBlcz86IHN0cmluZ1tdO1xuICAgICAgICBjb25maWd1cmF0aW9uPzogVXJpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIE1vbmFyY2ggbGFuZ3VhZ2UgZGVmaW5pdGlvblxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU1vbmFyY2hMYW5ndWFnZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBtYXAgZnJvbSBzdHJpbmcgdG8gSUxhbmd1YWdlUnVsZVtdXG4gICAgICAgICAqL1xuICAgICAgICB0b2tlbml6ZXI6IHtcbiAgICAgICAgICAgIFtuYW1lOiBzdHJpbmddOiBJTW9uYXJjaExhbmd1YWdlUnVsZVtdO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogaXMgdGhlIGxhbmd1YWdlIGNhc2UgaW5zZW5zaXRpdmU/XG4gICAgICAgICAqL1xuICAgICAgICBpZ25vcmVDYXNlPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGlzIHRoZSBsYW5ndWFnZSB1bmljb2RlLWF3YXJlPyAoaS5lLiwgL1xcdXsxRDMwNn0vKVxuICAgICAgICAgKi9cbiAgICAgICAgdW5pY29kZT86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBpZiBubyBtYXRjaCBpbiB0aGUgdG9rZW5pemVyIGFzc2lnbiB0aGlzIHRva2VuIGNsYXNzIChkZWZhdWx0ICdzb3VyY2UnKVxuICAgICAgICAgKi9cbiAgICAgICAgZGVmYXVsdFRva2VuPzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogZm9yIGV4YW1wbGUgW1sneycsJ30nLCdkZWxpbWl0ZXIuY3VybHknXV1cbiAgICAgICAgICovXG4gICAgICAgIGJyYWNrZXRzPzogSU1vbmFyY2hMYW5ndWFnZUJyYWNrZXRbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHN0YXJ0IHN5bWJvbCBpbiB0aGUgdG9rZW5pemVyIChieSBkZWZhdWx0IHRoZSBmaXJzdCBlbnRyeSBpcyB1c2VkKVxuICAgICAgICAgKi9cbiAgICAgICAgc3RhcnQ/OiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhdHRhY2ggdGhpcyB0byBldmVyeSB0b2tlbiBjbGFzcyAoYnkgZGVmYXVsdCAnLicgKyBuYW1lKVxuICAgICAgICAgKi9cbiAgICAgICAgdG9rZW5Qb3N0Zml4Pzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogaW5jbHVkZSBsaW5lIGZlZWRzIChpbiB0aGUgZm9ybSBvZiBhIFxcbiBjaGFyYWN0ZXIpIGF0IHRoZSBlbmQgb2YgbGluZXNcbiAgICAgICAgICogRGVmYXVsdHMgdG8gZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIGluY2x1ZGVMRj86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPdGhlciBrZXlzIHRoYXQgY2FuIGJlIHJlZmVycmVkIHRvIGJ5IHRoZSB0b2tlbml6ZXIuXG4gICAgICAgICAqL1xuICAgICAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBydWxlIGlzIGVpdGhlciBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQgYW4gYWN0aW9uXG4gICAgICogXHRcdHNob3J0aGFuZHM6IFtyZWcsYWN0XSA9PSB7IHJlZ2V4OiByZWcsIGFjdGlvbjogYWN0fVxuICAgICAqXHRcdGFuZCAgICAgICA6IFtyZWcsYWN0LG54dF0gPT0geyByZWdleDogcmVnLCBhY3Rpb246IGFjdHsgbmV4dDogbnh0IH19XG4gICAgICovXG4gICAgZXhwb3J0IHR5cGUgSVNob3J0TW9uYXJjaExhbmd1YWdlUnVsZTEgPSBbc3RyaW5nIHwgUmVnRXhwLCBJTW9uYXJjaExhbmd1YWdlQWN0aW9uXTtcblxuICAgIGV4cG9ydCB0eXBlIElTaG9ydE1vbmFyY2hMYW5ndWFnZVJ1bGUyID0gW3N0cmluZyB8IFJlZ0V4cCwgSU1vbmFyY2hMYW5ndWFnZUFjdGlvbiwgc3RyaW5nXTtcblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUV4cGFuZGVkTW9uYXJjaExhbmd1YWdlUnVsZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBtYXRjaCB0b2tlbnNcbiAgICAgICAgICovXG4gICAgICAgIHJlZ2V4Pzogc3RyaW5nIHwgUmVnRXhwO1xuICAgICAgICAvKipcbiAgICAgICAgICogYWN0aW9uIHRvIHRha2Ugb24gbWF0Y2hcbiAgICAgICAgICovXG4gICAgICAgIGFjdGlvbj86IElNb25hcmNoTGFuZ3VhZ2VBY3Rpb247XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBvciBhbiBpbmNsdWRlIHJ1bGUuIGluY2x1ZGUgYWxsIHJ1bGVzIGZyb20gdGhlIGluY2x1ZGVkIHN0YXRlXG4gICAgICAgICAqL1xuICAgICAgICBpbmNsdWRlPzogc3RyaW5nO1xuICAgIH1cblxuICAgIGV4cG9ydCB0eXBlIElNb25hcmNoTGFuZ3VhZ2VSdWxlID0gSVNob3J0TW9uYXJjaExhbmd1YWdlUnVsZTEgfCBJU2hvcnRNb25hcmNoTGFuZ3VhZ2VSdWxlMiB8IElFeHBhbmRlZE1vbmFyY2hMYW5ndWFnZVJ1bGU7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhY3Rpb24gaXMgZWl0aGVyIGFuIGFycmF5IG9mIGFjdGlvbnMuLi5cbiAgICAgKiAuLi4gb3IgYSBjYXNlIHN0YXRlbWVudCB3aXRoIGd1YXJkcy4uLlxuICAgICAqIC4uLiBvciBhIGJhc2ljIGFjdGlvbiB3aXRoIGEgdG9rZW4gdmFsdWUuXG4gICAgICovXG4gICAgZXhwb3J0IHR5cGUgSVNob3J0TW9uYXJjaExhbmd1YWdlQWN0aW9uID0gc3RyaW5nO1xuXG4gICAgZXhwb3J0IGludGVyZmFjZSBJRXhwYW5kZWRNb25hcmNoTGFuZ3VhZ2VBY3Rpb24ge1xuICAgICAgICAvKipcbiAgICAgICAgICogYXJyYXkgb2YgYWN0aW9ucyBmb3IgZWFjaCBwYXJlbnRoZXNpemVkIG1hdGNoIGdyb3VwXG4gICAgICAgICAqL1xuICAgICAgICBncm91cD86IElNb25hcmNoTGFuZ3VhZ2VBY3Rpb25bXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIG1hcCBmcm9tIHN0cmluZyB0byBJTGFuZ3VhZ2VBY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgIGNhc2VzPzogT2JqZWN0O1xuICAgICAgICAvKipcbiAgICAgICAgICogdG9rZW4gY2xhc3MgKGllLiBjc3MgY2xhc3MpIChvciBcIkBicmFja2V0c1wiIG9yIFwiQHJlbWF0Y2hcIilcbiAgICAgICAgICovXG4gICAgICAgIHRva2VuPzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIG5leHQgc3RhdGUgdG8gcHVzaCwgb3IgXCJAcHVzaFwiLCBcIkBwb3BcIiwgXCJAcG9wYWxsXCJcbiAgICAgICAgICovXG4gICAgICAgIG5leHQ/OiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzd2l0Y2ggdG8gdGhpcyBzdGF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgc3dpdGNoVG8/OiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnbyBiYWNrIG4gY2hhcmFjdGVycyBpbiB0aGUgc3RyZWFtXG4gICAgICAgICAqL1xuICAgICAgICBnb0JhY2s/OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAb3BlbiBvciBAY2xvc2VcbiAgICAgICAgICovXG4gICAgICAgIGJyYWNrZXQ/OiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzd2l0Y2ggdG8gZW1iZWRkZWQgbGFuZ3VhZ2UgKHVzaW5nIHRoZSBtaW1ldHlwZSkgb3IgZ2V0IG91dCB1c2luZyBcIkBwb3BcIlxuICAgICAgICAgKi9cbiAgICAgICAgbmV4dEVtYmVkZGVkPzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogbG9nIGEgbWVzc2FnZSB0byB0aGUgYnJvd3NlciBjb25zb2xlIHdpbmRvd1xuICAgICAgICAgKi9cbiAgICAgICAgbG9nPzogc3RyaW5nO1xuICAgIH1cblxuICAgIGV4cG9ydCB0eXBlIElNb25hcmNoTGFuZ3VhZ2VBY3Rpb24gPSBJU2hvcnRNb25hcmNoTGFuZ3VhZ2VBY3Rpb24gfCBJRXhwYW5kZWRNb25hcmNoTGFuZ3VhZ2VBY3Rpb24gfCBJU2hvcnRNb25hcmNoTGFuZ3VhZ2VBY3Rpb25bXSB8IElFeHBhbmRlZE1vbmFyY2hMYW5ndWFnZUFjdGlvbltdO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBpbnRlcmZhY2UgY2FuIGJlIHNob3J0ZW5lZCBhcyBhbiBhcnJheSwgaWUuIFsneycsJ30nLCdkZWxpbWl0ZXIuY3VybHknXVxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU1vbmFyY2hMYW5ndWFnZUJyYWNrZXQge1xuICAgICAgICAvKipcbiAgICAgICAgICogb3BlbiBicmFja2V0XG4gICAgICAgICAqL1xuICAgICAgICBvcGVuOiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjbG9zaW5nIGJyYWNrZXRcbiAgICAgICAgICovXG4gICAgICAgIGNsb3NlOiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0b2tlbiBjbGFzc1xuICAgICAgICAgKi9cbiAgICAgICAgdG9rZW46IHN0cmluZztcbiAgICB9XG5cbn1cblxuZGVjbGFyZSBuYW1lc3BhY2UgbW9uYWNvLndvcmtlciB7XG5cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU1pcnJvclRleHRNb2RlbCB7XG4gICAgICAgIHJlYWRvbmx5IHZlcnNpb246IG51bWJlcjtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElNaXJyb3JNb2RlbCBleHRlbmRzIElNaXJyb3JUZXh0TW9kZWwge1xuICAgICAgICByZWFkb25seSB1cmk6IFVyaTtcbiAgICAgICAgcmVhZG9ubHkgdmVyc2lvbjogbnVtYmVyO1xuICAgICAgICBnZXRWYWx1ZSgpOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBJV29ya2VyQ29udGV4dDxIID0gdW5kZWZpbmVkPiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHByb3h5IHRvIHRoZSBtYWluIHRocmVhZCBob3N0IG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIGhvc3Q6IEg7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgYWxsIGF2YWlsYWJsZSBtaXJyb3IgbW9kZWxzIGluIHRoaXMgd29ya2VyLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0TWlycm9yTW9kZWxzKCk6IElNaXJyb3JNb2RlbFtdO1xuICAgIH1cblxufVxuXG4vL2R0c3Y9M1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuZGVjbGFyZSBuYW1lc3BhY2UgbW9uYWNvLmxhbmd1YWdlcy50eXBlc2NyaXB0IHtcbiAgICBleHBvcnQgZW51bSBNb2R1bGVLaW5kIHtcbiAgICAgICAgTm9uZSA9IDAsXG4gICAgICAgIENvbW1vbkpTID0gMSxcbiAgICAgICAgQU1EID0gMixcbiAgICAgICAgVU1EID0gMyxcbiAgICAgICAgU3lzdGVtID0gNCxcbiAgICAgICAgRVMyMDE1ID0gNSxcbiAgICAgICAgRVNOZXh0ID0gOTlcbiAgICB9XG4gICAgZXhwb3J0IGVudW0gSnN4RW1pdCB7XG4gICAgICAgIE5vbmUgPSAwLFxuICAgICAgICBQcmVzZXJ2ZSA9IDEsXG4gICAgICAgIFJlYWN0ID0gMixcbiAgICAgICAgUmVhY3ROYXRpdmUgPSAzLFxuICAgICAgICBSZWFjdEpTWCA9IDQsXG4gICAgICAgIFJlYWN0SlNYRGV2ID0gNVxuICAgIH1cbiAgICBleHBvcnQgZW51bSBOZXdMaW5lS2luZCB7XG4gICAgICAgIENhcnJpYWdlUmV0dXJuTGluZUZlZWQgPSAwLFxuICAgICAgICBMaW5lRmVlZCA9IDFcbiAgICB9XG4gICAgZXhwb3J0IGVudW0gU2NyaXB0VGFyZ2V0IHtcbiAgICAgICAgRVMzID0gMCxcbiAgICAgICAgRVM1ID0gMSxcbiAgICAgICAgRVMyMDE1ID0gMixcbiAgICAgICAgRVMyMDE2ID0gMyxcbiAgICAgICAgRVMyMDE3ID0gNCxcbiAgICAgICAgRVMyMDE4ID0gNSxcbiAgICAgICAgRVMyMDE5ID0gNixcbiAgICAgICAgRVMyMDIwID0gNyxcbiAgICAgICAgRVNOZXh0ID0gOTksXG4gICAgICAgIEpTT04gPSAxMDAsXG4gICAgICAgIExhdGVzdCA9IDk5XG4gICAgfVxuICAgIGV4cG9ydCBlbnVtIE1vZHVsZVJlc29sdXRpb25LaW5kIHtcbiAgICAgICAgQ2xhc3NpYyA9IDEsXG4gICAgICAgIE5vZGVKcyA9IDJcbiAgICB9XG4gICAgaW50ZXJmYWNlIE1hcExpa2U8VD4ge1xuICAgICAgICBbaW5kZXg6IHN0cmluZ106IFQ7XG4gICAgfVxuICAgIHR5cGUgQ29tcGlsZXJPcHRpb25zVmFsdWUgPSBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgKHN0cmluZyB8IG51bWJlcilbXSB8IHN0cmluZ1tdIHwgTWFwTGlrZTxzdHJpbmdbXT4gfCBudWxsIHwgdW5kZWZpbmVkO1xuICAgIGludGVyZmFjZSBDb21waWxlck9wdGlvbnMge1xuICAgICAgICBhbGxvd0pzPzogYm9vbGVhbjtcbiAgICAgICAgYWxsb3dTeW50aGV0aWNEZWZhdWx0SW1wb3J0cz86IGJvb2xlYW47XG4gICAgICAgIGFsbG93VW1kR2xvYmFsQWNjZXNzPzogYm9vbGVhbjtcbiAgICAgICAgYWxsb3dVbnJlYWNoYWJsZUNvZGU/OiBib29sZWFuO1xuICAgICAgICBhbGxvd1VudXNlZExhYmVscz86IGJvb2xlYW47XG4gICAgICAgIGFsd2F5c1N0cmljdD86IGJvb2xlYW47XG4gICAgICAgIGJhc2VVcmw/OiBzdHJpbmc7XG4gICAgICAgIGNoYXJzZXQ/OiBzdHJpbmc7XG4gICAgICAgIGNoZWNrSnM/OiBib29sZWFuO1xuICAgICAgICBkZWNsYXJhdGlvbj86IGJvb2xlYW47XG4gICAgICAgIGRlY2xhcmF0aW9uTWFwPzogYm9vbGVhbjtcbiAgICAgICAgZW1pdERlY2xhcmF0aW9uT25seT86IGJvb2xlYW47XG4gICAgICAgIGRlY2xhcmF0aW9uRGlyPzogc3RyaW5nO1xuICAgICAgICBkaXNhYmxlU2l6ZUxpbWl0PzogYm9vbGVhbjtcbiAgICAgICAgZGlzYWJsZVNvdXJjZU9mUHJvamVjdFJlZmVyZW5jZVJlZGlyZWN0PzogYm9vbGVhbjtcbiAgICAgICAgZG93bmxldmVsSXRlcmF0aW9uPzogYm9vbGVhbjtcbiAgICAgICAgZW1pdEJPTT86IGJvb2xlYW47XG4gICAgICAgIGVtaXREZWNvcmF0b3JNZXRhZGF0YT86IGJvb2xlYW47XG4gICAgICAgIGV4cGVyaW1lbnRhbERlY29yYXRvcnM/OiBib29sZWFuO1xuICAgICAgICBmb3JjZUNvbnNpc3RlbnRDYXNpbmdJbkZpbGVOYW1lcz86IGJvb2xlYW47XG4gICAgICAgIGltcG9ydEhlbHBlcnM/OiBib29sZWFuO1xuICAgICAgICBpbmxpbmVTb3VyY2VNYXA/OiBib29sZWFuO1xuICAgICAgICBpbmxpbmVTb3VyY2VzPzogYm9vbGVhbjtcbiAgICAgICAgaXNvbGF0ZWRNb2R1bGVzPzogYm9vbGVhbjtcbiAgICAgICAganN4PzogSnN4RW1pdDtcbiAgICAgICAga2V5b2ZTdHJpbmdzT25seT86IGJvb2xlYW47XG4gICAgICAgIGxpYj86IHN0cmluZ1tdO1xuICAgICAgICBsb2NhbGU/OiBzdHJpbmc7XG4gICAgICAgIG1hcFJvb3Q/OiBzdHJpbmc7XG4gICAgICAgIG1heE5vZGVNb2R1bGVKc0RlcHRoPzogbnVtYmVyO1xuICAgICAgICBtb2R1bGU/OiBNb2R1bGVLaW5kO1xuICAgICAgICBtb2R1bGVSZXNvbHV0aW9uPzogTW9kdWxlUmVzb2x1dGlvbktpbmQ7XG4gICAgICAgIG5ld0xpbmU/OiBOZXdMaW5lS2luZDtcbiAgICAgICAgbm9FbWl0PzogYm9vbGVhbjtcbiAgICAgICAgbm9FbWl0SGVscGVycz86IGJvb2xlYW47XG4gICAgICAgIG5vRW1pdE9uRXJyb3I/OiBib29sZWFuO1xuICAgICAgICBub0Vycm9yVHJ1bmNhdGlvbj86IGJvb2xlYW47XG4gICAgICAgIG5vRmFsbHRocm91Z2hDYXNlc0luU3dpdGNoPzogYm9vbGVhbjtcbiAgICAgICAgbm9JbXBsaWNpdEFueT86IGJvb2xlYW47XG4gICAgICAgIG5vSW1wbGljaXRSZXR1cm5zPzogYm9vbGVhbjtcbiAgICAgICAgbm9JbXBsaWNpdFRoaXM/OiBib29sZWFuO1xuICAgICAgICBub1N0cmljdEdlbmVyaWNDaGVja3M/OiBib29sZWFuO1xuICAgICAgICBub1VudXNlZExvY2Fscz86IGJvb2xlYW47XG4gICAgICAgIG5vVW51c2VkUGFyYW1ldGVycz86IGJvb2xlYW47XG4gICAgICAgIG5vSW1wbGljaXRVc2VTdHJpY3Q/OiBib29sZWFuO1xuICAgICAgICBub0xpYj86IGJvb2xlYW47XG4gICAgICAgIG5vUmVzb2x2ZT86IGJvb2xlYW47XG4gICAgICAgIG91dD86IHN0cmluZztcbiAgICAgICAgb3V0RGlyPzogc3RyaW5nO1xuICAgICAgICBvdXRGaWxlPzogc3RyaW5nO1xuICAgICAgICBwYXRocz86IE1hcExpa2U8c3RyaW5nW10+O1xuICAgICAgICBwcmVzZXJ2ZUNvbnN0RW51bXM/OiBib29sZWFuO1xuICAgICAgICBwcmVzZXJ2ZVN5bWxpbmtzPzogYm9vbGVhbjtcbiAgICAgICAgcHJvamVjdD86IHN0cmluZztcbiAgICAgICAgcmVhY3ROYW1lc3BhY2U/OiBzdHJpbmc7XG4gICAgICAgIGpzeEZhY3Rvcnk/OiBzdHJpbmc7XG4gICAgICAgIGNvbXBvc2l0ZT86IGJvb2xlYW47XG4gICAgICAgIHJlbW92ZUNvbW1lbnRzPzogYm9vbGVhbjtcbiAgICAgICAgcm9vdERpcj86IHN0cmluZztcbiAgICAgICAgcm9vdERpcnM/OiBzdHJpbmdbXTtcbiAgICAgICAgc2tpcExpYkNoZWNrPzogYm9vbGVhbjtcbiAgICAgICAgc2tpcERlZmF1bHRMaWJDaGVjaz86IGJvb2xlYW47XG4gICAgICAgIHNvdXJjZU1hcD86IGJvb2xlYW47XG4gICAgICAgIHNvdXJjZVJvb3Q/OiBzdHJpbmc7XG4gICAgICAgIHN0cmljdD86IGJvb2xlYW47XG4gICAgICAgIHN0cmljdEZ1bmN0aW9uVHlwZXM/OiBib29sZWFuO1xuICAgICAgICBzdHJpY3RCaW5kQ2FsbEFwcGx5PzogYm9vbGVhbjtcbiAgICAgICAgc3RyaWN0TnVsbENoZWNrcz86IGJvb2xlYW47XG4gICAgICAgIHN0cmljdFByb3BlcnR5SW5pdGlhbGl6YXRpb24/OiBib29sZWFuO1xuICAgICAgICBzdHJpcEludGVybmFsPzogYm9vbGVhbjtcbiAgICAgICAgc3VwcHJlc3NFeGNlc3NQcm9wZXJ0eUVycm9ycz86IGJvb2xlYW47XG4gICAgICAgIHN1cHByZXNzSW1wbGljaXRBbnlJbmRleEVycm9ycz86IGJvb2xlYW47XG4gICAgICAgIHRhcmdldD86IFNjcmlwdFRhcmdldDtcbiAgICAgICAgdHJhY2VSZXNvbHV0aW9uPzogYm9vbGVhbjtcbiAgICAgICAgcmVzb2x2ZUpzb25Nb2R1bGU/OiBib29sZWFuO1xuICAgICAgICB0eXBlcz86IHN0cmluZ1tdO1xuICAgICAgICAvKiogUGF0aHMgdXNlZCB0byBjb21wdXRlIHByaW1hcnkgdHlwZXMgc2VhcmNoIGxvY2F0aW9ucyAqL1xuICAgICAgICB0eXBlUm9vdHM/OiBzdHJpbmdbXTtcbiAgICAgICAgZXNNb2R1bGVJbnRlcm9wPzogYm9vbGVhbjtcbiAgICAgICAgdXNlRGVmaW5lRm9yQ2xhc3NGaWVsZHM/OiBib29sZWFuO1xuICAgICAgICBbb3B0aW9uOiBzdHJpbmddOiBDb21waWxlck9wdGlvbnNWYWx1ZSB8IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZXhwb3J0IGludGVyZmFjZSBEaWFnbm9zdGljc09wdGlvbnMge1xuICAgICAgICBub1NlbWFudGljVmFsaWRhdGlvbj86IGJvb2xlYW47XG4gICAgICAgIG5vU3ludGF4VmFsaWRhdGlvbj86IGJvb2xlYW47XG4gICAgICAgIG5vU3VnZ2VzdGlvbkRpYWdub3N0aWNzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIExpbWl0IGRpYWdub3N0aWMgY29tcHV0YXRpb24gdG8gb25seSB2aXNpYmxlIGZpbGVzLlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIG9ubHlWaXNpYmxlPzogYm9vbGVhbjtcbiAgICAgICAgZGlhZ25vc3RpY0NvZGVzVG9JZ25vcmU/OiBudW1iZXJbXTtcbiAgICB9XG4gICAgZXhwb3J0IGludGVyZmFjZSBXb3JrZXJPcHRpb25zIHtcbiAgICAgICAgLyoqIEEgZnVsbCBIVFRQIHBhdGggdG8gYSBKYXZhU2NyaXB0IGZpbGUgd2hpY2ggYWRkcyBhIGZ1bmN0aW9uIGBjdXN0b21UU1dvcmtlckZhY3RvcnlgIHRvIHRoZSBzZWxmIGluc2lkZSBhIHdlYi13b3JrZXIgKi9cbiAgICAgICAgY3VzdG9tV29ya2VyUGF0aD86IHN0cmluZztcbiAgICB9XG4gICAgaW50ZXJmYWNlIElubGF5SGludHNPcHRpb25zIHtcbiAgICAgICAgcmVhZG9ubHkgaW5jbHVkZUlubGF5UGFyYW1ldGVyTmFtZUhpbnRzPzogJ25vbmUnIHwgJ2xpdGVyYWxzJyB8ICdhbGwnO1xuICAgICAgICByZWFkb25seSBpbmNsdWRlSW5sYXlQYXJhbWV0ZXJOYW1lSGludHNXaGVuQXJndW1lbnRNYXRjaGVzTmFtZT86IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IGluY2x1ZGVJbmxheUZ1bmN0aW9uUGFyYW1ldGVyVHlwZUhpbnRzPzogYm9vbGVhbjtcbiAgICAgICAgcmVhZG9ubHkgaW5jbHVkZUlubGF5VmFyaWFibGVUeXBlSGludHM/OiBib29sZWFuO1xuICAgICAgICByZWFkb25seSBpbmNsdWRlSW5sYXlQcm9wZXJ0eURlY2xhcmF0aW9uVHlwZUhpbnRzPzogYm9vbGVhbjtcbiAgICAgICAgcmVhZG9ubHkgaW5jbHVkZUlubGF5RnVuY3Rpb25MaWtlUmV0dXJuVHlwZUhpbnRzPzogYm9vbGVhbjtcbiAgICAgICAgcmVhZG9ubHkgaW5jbHVkZUlubGF5RW51bU1lbWJlclZhbHVlSGludHM/OiBib29sZWFuO1xuICAgIH1cbiAgICBpbnRlcmZhY2UgSUV4dHJhTGliIHtcbiAgICAgICAgY29udGVudDogc3RyaW5nO1xuICAgICAgICB2ZXJzaW9uOiBudW1iZXI7XG4gICAgfVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUV4dHJhTGlicyB7XG4gICAgICAgIFtwYXRoOiBzdHJpbmddOiBJRXh0cmFMaWI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgbGlua2VkIGxpc3Qgb2YgZm9ybWF0dGVkIGRpYWdub3N0aWMgbWVzc2FnZXMgdG8gYmUgdXNlZCBhcyBwYXJ0IG9mIGEgbXVsdGlsaW5lIG1lc3NhZ2UuXG4gICAgICogSXQgaXMgYnVpbHQgZnJvbSB0aGUgYm90dG9tIHVwLCBsZWF2aW5nIHRoZSBoZWFkIHRvIGJlIHRoZSBcIm1haW5cIiBkaWFnbm9zdGljLlxuICAgICAqL1xuICAgIGludGVyZmFjZSBEaWFnbm9zdGljTWVzc2FnZUNoYWluIHtcbiAgICAgICAgbWVzc2FnZVRleHQ6IHN0cmluZztcbiAgICAgICAgLyoqIERpYWdub3N0aWMgY2F0ZWdvcnk6IHdhcm5pbmcgPSAwLCBlcnJvciA9IDEsIHN1Z2dlc3Rpb24gPSAyLCBtZXNzYWdlID0gMyAqL1xuICAgICAgICBjYXRlZ29yeTogMCB8IDEgfCAyIHwgMztcbiAgICAgICAgY29kZTogbnVtYmVyO1xuICAgICAgICBuZXh0PzogRGlhZ25vc3RpY01lc3NhZ2VDaGFpbltdO1xuICAgIH1cbiAgICBleHBvcnQgaW50ZXJmYWNlIERpYWdub3N0aWMgZXh0ZW5kcyBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uIHtcbiAgICAgICAgLyoqIE1heSBzdG9yZSBtb3JlIGluIGZ1dHVyZS4gRm9yIG5vdywgdGhpcyB3aWxsIHNpbXBseSBiZSBgdHJ1ZWAgdG8gaW5kaWNhdGUgd2hlbiBhIGRpYWdub3N0aWMgaXMgYW4gdW51c2VkLWlkZW50aWZpZXIgZGlhZ25vc3RpYy4gKi9cbiAgICAgICAgcmVwb3J0c1VubmVjZXNzYXJ5Pzoge307XG4gICAgICAgIHJlcG9ydHNEZXByZWNhdGVkPzoge307XG4gICAgICAgIHNvdXJjZT86IHN0cmluZztcbiAgICAgICAgcmVsYXRlZEluZm9ybWF0aW9uPzogRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbltdO1xuICAgIH1cbiAgICBleHBvcnQgaW50ZXJmYWNlIERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24ge1xuICAgICAgICAvKiogRGlhZ25vc3RpYyBjYXRlZ29yeTogd2FybmluZyA9IDAsIGVycm9yID0gMSwgc3VnZ2VzdGlvbiA9IDIsIG1lc3NhZ2UgPSAzICovXG4gICAgICAgIGNhdGVnb3J5OiAwIHwgMSB8IDIgfCAzO1xuICAgICAgICBjb2RlOiBudW1iZXI7XG4gICAgICAgIC8qKiBUeXBlU2NyaXB0V29ya2VyIHJlbW92ZXMgYWxsIGJ1dCB0aGUgYGZpbGVOYW1lYCBwcm9wZXJ0eSB0byBhdm9pZCBzZXJpYWxpemluZyBjaXJjdWxhciBKU09OIHN0cnVjdHVyZXMuICovXG4gICAgICAgIGZpbGU6IHtcbiAgICAgICAgICAgIGZpbGVOYW1lOiBzdHJpbmc7XG4gICAgICAgIH0gfCB1bmRlZmluZWQ7XG4gICAgICAgIHN0YXJ0OiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgICAgIGxlbmd0aDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlVGV4dDogc3RyaW5nIHwgRGlhZ25vc3RpY01lc3NhZ2VDaGFpbjtcbiAgICB9XG4gICAgaW50ZXJmYWNlIEVtaXRPdXRwdXQge1xuICAgICAgICBvdXRwdXRGaWxlczogT3V0cHV0RmlsZVtdO1xuICAgICAgICBlbWl0U2tpcHBlZDogYm9vbGVhbjtcbiAgICB9XG4gICAgaW50ZXJmYWNlIE91dHB1dEZpbGUge1xuICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICAgIHdyaXRlQnl0ZU9yZGVyTWFyazogYm9vbGVhbjtcbiAgICAgICAgdGV4dDogc3RyaW5nO1xuICAgIH1cbiAgICBleHBvcnQgaW50ZXJmYWNlIExhbmd1YWdlU2VydmljZURlZmF1bHRzIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEV2ZW50IGZpcmVkIHdoZW4gY29tcGlsZXIgb3B0aW9ucyBvciBkaWFnbm9zdGljcyBvcHRpb25zIGFyZSBjaGFuZ2VkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgb25EaWRDaGFuZ2U6IElFdmVudDx2b2lkPjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEV2ZW50IGZpcmVkIHdoZW4gZXh0cmEgbGlicmFyaWVzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgbGFuZ3VhZ2Ugc2VydmljZSBjaGFuZ2UuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBvbkRpZEV4dHJhTGlic0NoYW5nZTogSUV2ZW50PHZvaWQ+O1xuICAgICAgICByZWFkb25seSB3b3JrZXJPcHRpb25zOiBXb3JrZXJPcHRpb25zO1xuICAgICAgICByZWFkb25seSBpbmxheUhpbnRzT3B0aW9uczogSW5sYXlIaW50c09wdGlvbnM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdGhlIGN1cnJlbnQgZXh0cmEgbGlicyByZWdpc3RlcmVkIHdpdGggdGhlIGxhbmd1YWdlIHNlcnZpY2UuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRFeHRyYUxpYnMoKTogSUV4dHJhTGlicztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZCBhbiBhZGRpdGlvbmFsIHNvdXJjZSBmaWxlIHRvIHRoZSBsYW5ndWFnZSBzZXJ2aWNlLiBVc2UgdGhpc1xuICAgICAgICAgKiBmb3IgdHlwZXNjcmlwdCAoZGVmaW5pdGlvbikgZmlsZXMgdGhhdCB3b24ndCBiZSBsb2FkZWQgYXMgZWRpdG9yXG4gICAgICAgICAqIGRvY3VtZW50cywgbGlrZSBganF1ZXJ5LmQudHNgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gY29udGVudCBUaGUgZmlsZSBjb250ZW50XG4gICAgICAgICAqIEBwYXJhbSBmaWxlUGF0aCBBbiBvcHRpb25hbCBmaWxlIHBhdGhcbiAgICAgICAgICogQHJldHVybnMgQSBkaXNwb3NhYmxlIHdoaWNoIHdpbGwgcmVtb3ZlIHRoZSBmaWxlIGZyb20gdGhlXG4gICAgICAgICAqIGxhbmd1YWdlIHNlcnZpY2UgdXBvbiBkaXNwb3NhbC5cbiAgICAgICAgICovXG4gICAgICAgIGFkZEV4dHJhTGliKGNvbnRlbnQ6IHN0cmluZywgZmlsZVBhdGg/OiBzdHJpbmcpOiBJRGlzcG9zYWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW92ZSBhbGwgZXhpc3RpbmcgZXh0cmEgbGlicyBhbmQgc2V0IHRoZSBhZGRpdGlvbmFsIHNvdXJjZVxuICAgICAgICAgKiBmaWxlcyB0byB0aGUgbGFuZ3VhZ2Ugc2VydmljZS4gVXNlIHRoaXMgZm9yIHR5cGVzY3JpcHQgZGVmaW5pdGlvblxuICAgICAgICAgKiBmaWxlcyB0aGF0IHdvbid0IGJlIGxvYWRlZCBhcyBlZGl0b3IgZG9jdW1lbnRzLCBsaWtlIGBqcXVlcnkuZC50c2AuXG4gICAgICAgICAqIEBwYXJhbSBsaWJzIEFuIGFycmF5IG9mIGVudHJpZXMgdG8gcmVnaXN0ZXIuXG4gICAgICAgICAqL1xuICAgICAgICBzZXRFeHRyYUxpYnMobGliczoge1xuICAgICAgICAgICAgY29udGVudDogc3RyaW5nO1xuICAgICAgICAgICAgZmlsZVBhdGg/OiBzdHJpbmc7XG4gICAgICAgIH1bXSk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgY3VycmVudCBUeXBlU2NyaXB0IGNvbXBpbGVyIG9wdGlvbnMgZm9yIHRoZSBsYW5ndWFnZSBzZXJ2aWNlLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0Q29tcGlsZXJPcHRpb25zKCk6IENvbXBpbGVyT3B0aW9ucztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCBUeXBlU2NyaXB0IGNvbXBpbGVyIG9wdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICBzZXRDb21waWxlck9wdGlvbnMob3B0aW9uczogQ29tcGlsZXJPcHRpb25zKTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgY3VycmVudCBkaWFnbm9zdGljcyBvcHRpb25zIGZvciB0aGUgbGFuZ3VhZ2Ugc2VydmljZS5cbiAgICAgICAgICovXG4gICAgICAgIGdldERpYWdub3N0aWNzT3B0aW9ucygpOiBEaWFnbm9zdGljc09wdGlvbnM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25maWd1cmUgd2hldGhlciBzeW50YWN0aWMgYW5kL29yIHNlbWFudGljIHZhbGlkYXRpb24gc2hvdWxkXG4gICAgICAgICAqIGJlIHBlcmZvcm1lZFxuICAgICAgICAgKi9cbiAgICAgICAgc2V0RGlhZ25vc3RpY3NPcHRpb25zKG9wdGlvbnM6IERpYWdub3N0aWNzT3B0aW9ucyk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25maWd1cmUgd2Vid29ya2VyIG9wdGlvbnNcbiAgICAgICAgICovXG4gICAgICAgIHNldFdvcmtlck9wdGlvbnMob3B0aW9uczogV29ya2VyT3B0aW9ucyk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOby1vcC5cbiAgICAgICAgICovXG4gICAgICAgIHNldE1heGltdW1Xb3JrZXJJZGxlVGltZSh2YWx1ZTogbnVtYmVyKTogdm9pZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbmZpZ3VyZSBpZiBhbGwgZXhpc3RpbmcgbW9kZWxzIHNob3VsZCBiZSBlYWdlcmx5IHN5bmMnZFxuICAgICAgICAgKiB0byB0aGUgd29ya2VyIG9uIHN0YXJ0IG9yIHJlc3RhcnQuXG4gICAgICAgICAqL1xuICAgICAgICBzZXRFYWdlck1vZGVsU3luYyh2YWx1ZTogYm9vbGVhbik6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdGhlIGN1cnJlbnQgc2V0dGluZyBmb3Igd2hldGhlciBhbGwgZXhpc3RpbmcgbW9kZWxzIHNob3VsZCBiZSBlYWdlcmx5IHN5bmMnZFxuICAgICAgICAgKiB0byB0aGUgd29ya2VyIG9uIHN0YXJ0IG9yIHJlc3RhcnQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRFYWdlck1vZGVsU3luYygpOiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29uZmlndXJlIGlubGF5IGhpbnRzIG9wdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICBzZXRJbmxheUhpbnRzT3B0aW9ucyhvcHRpb25zOiBJbmxheUhpbnRzT3B0aW9ucyk6IHZvaWQ7XG4gICAgfVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgVHlwZVNjcmlwdFdvcmtlciB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgZGlhZ25vc3RpYyBtZXNzYWdlcyBmb3IgYW55IHN5bnRheCBpc3N1ZXMgaW4gdGhlIGdpdmVuIGZpbGUuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRTeW50YWN0aWNEaWFnbm9zdGljcyhmaWxlTmFtZTogc3RyaW5nKTogUHJvbWlzZTxEaWFnbm9zdGljW10+O1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGRpYWdub3N0aWMgbWVzc2FnZXMgZm9yIGFueSBzZW1hbnRpYyBpc3N1ZXMgaW4gdGhlIGdpdmVuIGZpbGUuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRTZW1hbnRpY0RpYWdub3N0aWNzKGZpbGVOYW1lOiBzdHJpbmcpOiBQcm9taXNlPERpYWdub3N0aWNbXT47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgZGlhZ25vc3RpYyBtZXNzYWdlcyBmb3IgYW55IHN1Z2dlc3Rpb25zIHJlbGF0ZWQgdG8gdGhlIGdpdmVuIGZpbGUuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRTdWdnZXN0aW9uRGlhZ25vc3RpY3MoZmlsZU5hbWU6IHN0cmluZyk6IFByb21pc2U8RGlhZ25vc3RpY1tdPjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgY29udGVudCBvZiBhIGdpdmVuIGZpbGUuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRTY3JpcHRUZXh0KGZpbGVOYW1lOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgZGlhZ25vc3RpYyBtZXNzYWdlcyByZWxhdGVkIHRvIHRoZSBjdXJyZW50IGNvbXBpbGVyIG9wdGlvbnMuXG4gICAgICAgICAqIEBwYXJhbSBmaWxlTmFtZSBOb3QgdXNlZFxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0Q29tcGlsZXJPcHRpb25zRGlhZ25vc3RpY3MoZmlsZU5hbWU6IHN0cmluZyk6IFByb21pc2U8RGlhZ25vc3RpY1tdPjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBjb2RlIGNvbXBsZXRpb25zIGZvciB0aGUgZ2l2ZW4gZmlsZSBhbmQgcG9zaXRpb24uXG4gICAgICAgICAqIEByZXR1cm5zIGBQcm9taXNlPHR5cGVzY3JpcHQuQ29tcGxldGlvbkluZm8gfCB1bmRlZmluZWQ+YFxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0Q29tcGxldGlvbnNBdFBvc2l0aW9uKGZpbGVOYW1lOiBzdHJpbmcsIHBvc2l0aW9uOiBudW1iZXIpOiBQcm9taXNlPGFueSB8IHVuZGVmaW5lZD47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgY29kZSBjb21wbGV0aW9uIGRldGFpbHMgZm9yIHRoZSBnaXZlbiBmaWxlLCBwb3NpdGlvbiwgYW5kIGVudHJ5LlxuICAgICAgICAgKiBAcmV0dXJucyBgUHJvbWlzZTx0eXBlc2NyaXB0LkNvbXBsZXRpb25FbnRyeURldGFpbHMgfCB1bmRlZmluZWQ+YFxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0Q29tcGxldGlvbkVudHJ5RGV0YWlscyhmaWxlTmFtZTogc3RyaW5nLCBwb3NpdGlvbjogbnVtYmVyLCBlbnRyeTogc3RyaW5nKTogUHJvbWlzZTxhbnkgfCB1bmRlZmluZWQ+O1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHNpZ25hdHVyZSBoZWxwIGl0ZW1zIGZvciB0aGUgaXRlbSBhdCB0aGUgZ2l2ZW4gZmlsZSBhbmQgcG9zaXRpb24uXG4gICAgICAgICAqIEByZXR1cm5zIGBQcm9taXNlPHR5cGVzY3JpcHQuU2lnbmF0dXJlSGVscEl0ZW1zIHwgdW5kZWZpbmVkPmBcbiAgICAgICAgICovXG4gICAgICAgIGdldFNpZ25hdHVyZUhlbHBJdGVtcyhmaWxlTmFtZTogc3RyaW5nLCBwb3NpdGlvbjogbnVtYmVyLCBvcHRpb25zOiBhbnkpOiBQcm9taXNlPGFueSB8IHVuZGVmaW5lZD47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgcXVpY2sgaW5mbyBmb3IgdGhlIGl0ZW0gYXQgdGhlIGdpdmVuIHBvc2l0aW9uIGluIHRoZSBmaWxlLlxuICAgICAgICAgKiBAcmV0dXJucyBgUHJvbWlzZTx0eXBlc2NyaXB0LlF1aWNrSW5mbyB8IHVuZGVmaW5lZD5gXG4gICAgICAgICAqL1xuICAgICAgICBnZXRRdWlja0luZm9BdFBvc2l0aW9uKGZpbGVOYW1lOiBzdHJpbmcsIHBvc2l0aW9uOiBudW1iZXIpOiBQcm9taXNlPGFueSB8IHVuZGVmaW5lZD47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgb3RoZXIgcmFuZ2VzIHdoaWNoIGFyZSByZWxhdGVkIHRvIHRoZSBpdGVtIGF0IHRoZSBnaXZlbiBwb3NpdGlvbiBpbiB0aGUgZmlsZSAob2Z0ZW4gdXNlZCBmb3IgaGlnaGxpZ2h0aW5nKS5cbiAgICAgICAgICogQHJldHVybnMgYFByb21pc2U8UmVhZG9ubHlBcnJheTx0eXBlc2NyaXB0LlJlZmVyZW5jZUVudHJ5PiB8IHVuZGVmaW5lZD5gXG4gICAgICAgICAqL1xuICAgICAgICBnZXRPY2N1cnJlbmNlc0F0UG9zaXRpb24oZmlsZU5hbWU6IHN0cmluZywgcG9zaXRpb246IG51bWJlcik6IFByb21pc2U8UmVhZG9ubHlBcnJheTxhbnk+IHwgdW5kZWZpbmVkPjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgZGVmaW5pdGlvbiBvZiB0aGUgaXRlbSBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24gaW4gdGhlIGZpbGUuXG4gICAgICAgICAqIEByZXR1cm5zIGBQcm9taXNlPFJlYWRvbmx5QXJyYXk8dHlwZXNjcmlwdC5EZWZpbml0aW9uSW5mbz4gfCB1bmRlZmluZWQ+YFxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0RGVmaW5pdGlvbkF0UG9zaXRpb24oZmlsZU5hbWU6IHN0cmluZywgcG9zaXRpb246IG51bWJlcik6IFByb21pc2U8UmVhZG9ubHlBcnJheTxhbnk+IHwgdW5kZWZpbmVkPjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCByZWZlcmVuY2VzIHRvIHRoZSBpdGVtIGF0IHRoZSBnaXZlbiBwb3NpdGlvbiBpbiB0aGUgZmlsZS5cbiAgICAgICAgICogQHJldHVybnMgYFByb21pc2U8dHlwZXNjcmlwdC5SZWZlcmVuY2VFbnRyeVtdIHwgdW5kZWZpbmVkPmBcbiAgICAgICAgICovXG4gICAgICAgIGdldFJlZmVyZW5jZXNBdFBvc2l0aW9uKGZpbGVOYW1lOiBzdHJpbmcsIHBvc2l0aW9uOiBudW1iZXIpOiBQcm9taXNlPGFueVtdIHwgdW5kZWZpbmVkPjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBvdXRsaW5lIGVudHJpZXMgZm9yIHRoZSBpdGVtIGF0IHRoZSBnaXZlbiBwb3NpdGlvbiBpbiB0aGUgZmlsZS5cbiAgICAgICAgICogQHJldHVybnMgYFByb21pc2U8dHlwZXNjcmlwdC5OYXZpZ2F0aW9uQmFySXRlbVtdPmBcbiAgICAgICAgICovXG4gICAgICAgIGdldE5hdmlnYXRpb25CYXJJdGVtcyhmaWxlTmFtZTogc3RyaW5nKTogUHJvbWlzZTxhbnlbXT47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgY2hhbmdlcyB3aGljaCBzaG91bGQgYmUgYXBwbGllZCB0byBmb3JtYXQgdGhlIGdpdmVuIGZpbGUuXG4gICAgICAgICAqIEBwYXJhbSBvcHRpb25zIGB0eXBlc2NyaXB0LkZvcm1hdENvZGVPcHRpb25zYFxuICAgICAgICAgKiBAcmV0dXJucyBgUHJvbWlzZTx0eXBlc2NyaXB0LlRleHRDaGFuZ2VbXT5gXG4gICAgICAgICAqL1xuICAgICAgICBnZXRGb3JtYXR0aW5nRWRpdHNGb3JEb2N1bWVudChmaWxlTmFtZTogc3RyaW5nLCBvcHRpb25zOiBhbnkpOiBQcm9taXNlPGFueVtdPjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBjaGFuZ2VzIHdoaWNoIHNob3VsZCBiZSBhcHBsaWVkIHRvIGZvcm1hdCB0aGUgZ2l2ZW4gcmFuZ2UgaW4gdGhlIGZpbGUuXG4gICAgICAgICAqIEBwYXJhbSBvcHRpb25zIGB0eXBlc2NyaXB0LkZvcm1hdENvZGVPcHRpb25zYFxuICAgICAgICAgKiBAcmV0dXJucyBgUHJvbWlzZTx0eXBlc2NyaXB0LlRleHRDaGFuZ2VbXT5gXG4gICAgICAgICAqL1xuICAgICAgICBnZXRGb3JtYXR0aW5nRWRpdHNGb3JSYW5nZShmaWxlTmFtZTogc3RyaW5nLCBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlciwgb3B0aW9uczogYW55KTogUHJvbWlzZTxhbnlbXT47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgZm9ybWF0dGluZyBjaGFuZ2VzIHdoaWNoIHNob3VsZCBiZSBhcHBsaWVkIGFmdGVyIHRoZSBnaXZlbiBrZXlzdHJva2UuXG4gICAgICAgICAqIEBwYXJhbSBvcHRpb25zIGB0eXBlc2NyaXB0LkZvcm1hdENvZGVPcHRpb25zYFxuICAgICAgICAgKiBAcmV0dXJucyBgUHJvbWlzZTx0eXBlc2NyaXB0LlRleHRDaGFuZ2VbXT5gXG4gICAgICAgICAqL1xuICAgICAgICBnZXRGb3JtYXR0aW5nRWRpdHNBZnRlcktleXN0cm9rZShmaWxlTmFtZTogc3RyaW5nLCBwb3N0aW9uOiBudW1iZXIsIGNoOiBzdHJpbmcsIG9wdGlvbnM6IGFueSk6IFByb21pc2U8YW55W10+O1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IG90aGVyIG9jY3VycmVuY2VzIHdoaWNoIHNob3VsZCBiZSB1cGRhdGVkIHdoZW4gcmVuYW1pbmcgdGhlIGl0ZW0gYXQgdGhlIGdpdmVuIGZpbGUgYW5kIHBvc2l0aW9uLlxuICAgICAgICAgKiBAcmV0dXJucyBgUHJvbWlzZTxyZWFkb25seSB0eXBlc2NyaXB0LlJlbmFtZUxvY2F0aW9uW10gfCB1bmRlZmluZWQ+YFxuICAgICAgICAgKi9cbiAgICAgICAgZmluZFJlbmFtZUxvY2F0aW9ucyhmaWxlTmFtZTogc3RyaW5nLCBwb3NpdG9uOiBudW1iZXIsIGZpbmRJblN0cmluZ3M6IGJvb2xlYW4sIGZpbmRJbkNvbW1lbnRzOiBib29sZWFuLCBwcm92aWRlUHJlZml4QW5kU3VmZml4VGV4dEZvclJlbmFtZTogYm9vbGVhbik6IFByb21pc2U8cmVhZG9ubHkgYW55W10gfCB1bmRlZmluZWQ+O1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGVkaXRzIHdoaWNoIHNob3VsZCBiZSBhcHBsaWVkIHRvIHJlbmFtZSB0aGUgaXRlbSBhdCB0aGUgZ2l2ZW4gZmlsZSBhbmQgcG9zaXRpb24gKG9yIGEgZmFpbHVyZSByZWFzb24pLlxuICAgICAgICAgKiBAcGFyYW0gb3B0aW9ucyBgdHlwZXNjcmlwdC5SZW5hbWVJbmZvT3B0aW9uc2BcbiAgICAgICAgICogQHJldHVybnMgYFByb21pc2U8dHlwZXNjcmlwdC5SZW5hbWVJbmZvPmBcbiAgICAgICAgICovXG4gICAgICAgIGdldFJlbmFtZUluZm8oZmlsZU5hbWU6IHN0cmluZywgcG9zaXRvbjogbnVtYmVyLCBvcHRpb25zOiBhbnkpOiBQcm9taXNlPGFueT47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdHJhbnNwaWxlZCBvdXRwdXQgZm9yIHRoZSBnaXZlbiBmaWxlLlxuICAgICAgICAgKiBAcmV0dXJucyBgdHlwZXNjcmlwdC5FbWl0T3V0cHV0YFxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0RW1pdE91dHB1dChmaWxlTmFtZTogc3RyaW5nKTogUHJvbWlzZTxFbWl0T3V0cHV0PjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBwb3NzaWJsZSBjb2RlIGZpeGVzIGF0IHRoZSBnaXZlbiBwb3NpdGlvbiBpbiB0aGUgZmlsZS5cbiAgICAgICAgICogQHBhcmFtIGZvcm1hdE9wdGlvbnMgYHR5cGVzY3JpcHQuRm9ybWF0Q29kZU9wdGlvbnNgXG4gICAgICAgICAqIEByZXR1cm5zIGBQcm9taXNlPFJlYWRvbmx5QXJyYXk8dHlwZXNjcmlwdC5Db2RlRml4QWN0aW9uPj5gXG4gICAgICAgICAqL1xuICAgICAgICBnZXRDb2RlRml4ZXNBdFBvc2l0aW9uKGZpbGVOYW1lOiBzdHJpbmcsIHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyLCBlcnJvckNvZGVzOiBudW1iZXJbXSwgZm9ybWF0T3B0aW9uczogYW55KTogUHJvbWlzZTxSZWFkb25seUFycmF5PGFueT4+O1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGlubGF5IGhpbnRzIGluIHRoZSByYW5nZSBvZiB0aGUgZmlsZS5cbiAgICAgICAgICogQHBhcmFtIGZpbGVOYW1lXG4gICAgICAgICAqIEByZXR1cm5zIGBQcm9taXNlPHR5cGVzY3JpcHQuSW5sYXlIaW50W10+YFxuICAgICAgICAgKi9cbiAgICAgICAgcHJvdmlkZUlubGF5SGludHMoZmlsZU5hbWU6IHN0cmluZywgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiBQcm9taXNlPFJlYWRvbmx5QXJyYXk8YW55Pj47XG4gICAgfVxuICAgIGV4cG9ydCBjb25zdCB0eXBlc2NyaXB0VmVyc2lvbjogc3RyaW5nO1xuICAgIGV4cG9ydCBjb25zdCB0eXBlc2NyaXB0RGVmYXVsdHM6IExhbmd1YWdlU2VydmljZURlZmF1bHRzO1xuICAgIGV4cG9ydCBjb25zdCBqYXZhc2NyaXB0RGVmYXVsdHM6IExhbmd1YWdlU2VydmljZURlZmF1bHRzO1xuICAgIGV4cG9ydCBjb25zdCBnZXRUeXBlU2NyaXB0V29ya2VyOiAoKSA9PiBQcm9taXNlPCguLi51cmlzOiBVcmlbXSkgPT4gUHJvbWlzZTxUeXBlU2NyaXB0V29ya2VyPj47XG4gICAgZXhwb3J0IGNvbnN0IGdldEphdmFTY3JpcHRXb3JrZXI6ICgpID0+IFByb21pc2U8KC4uLnVyaXM6IFVyaVtdKSA9PiBQcm9taXNlPFR5cGVTY3JpcHRXb3JrZXI+Pjtcbn1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmRlY2xhcmUgbmFtZXNwYWNlIG1vbmFjby5sYW5ndWFnZXMuY3NzIHtcbiAgICBleHBvcnQgaW50ZXJmYWNlIE9wdGlvbnMge1xuICAgICAgICByZWFkb25seSB2YWxpZGF0ZT86IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IGxpbnQ/OiB7XG4gICAgICAgICAgICByZWFkb25seSBjb21wYXRpYmxlVmVuZG9yUHJlZml4ZXM/OiAnaWdub3JlJyB8ICd3YXJuaW5nJyB8ICdlcnJvcic7XG4gICAgICAgICAgICByZWFkb25seSB2ZW5kb3JQcmVmaXg/OiAnaWdub3JlJyB8ICd3YXJuaW5nJyB8ICdlcnJvcic7XG4gICAgICAgICAgICByZWFkb25seSBkdXBsaWNhdGVQcm9wZXJ0aWVzPzogJ2lnbm9yZScgfCAnd2FybmluZycgfCAnZXJyb3InO1xuICAgICAgICAgICAgcmVhZG9ubHkgZW1wdHlSdWxlcz86ICdpZ25vcmUnIHwgJ3dhcm5pbmcnIHwgJ2Vycm9yJztcbiAgICAgICAgICAgIHJlYWRvbmx5IGltcG9ydFN0YXRlbWVudD86ICdpZ25vcmUnIHwgJ3dhcm5pbmcnIHwgJ2Vycm9yJztcbiAgICAgICAgICAgIHJlYWRvbmx5IGJveE1vZGVsPzogJ2lnbm9yZScgfCAnd2FybmluZycgfCAnZXJyb3InO1xuICAgICAgICAgICAgcmVhZG9ubHkgdW5pdmVyc2FsU2VsZWN0b3I/OiAnaWdub3JlJyB8ICd3YXJuaW5nJyB8ICdlcnJvcic7XG4gICAgICAgICAgICByZWFkb25seSB6ZXJvVW5pdHM/OiAnaWdub3JlJyB8ICd3YXJuaW5nJyB8ICdlcnJvcic7XG4gICAgICAgICAgICByZWFkb25seSBmb250RmFjZVByb3BlcnRpZXM/OiAnaWdub3JlJyB8ICd3YXJuaW5nJyB8ICdlcnJvcic7XG4gICAgICAgICAgICByZWFkb25seSBoZXhDb2xvckxlbmd0aD86ICdpZ25vcmUnIHwgJ3dhcm5pbmcnIHwgJ2Vycm9yJztcbiAgICAgICAgICAgIHJlYWRvbmx5IGFyZ3VtZW50c0luQ29sb3JGdW5jdGlvbj86ICdpZ25vcmUnIHwgJ3dhcm5pbmcnIHwgJ2Vycm9yJztcbiAgICAgICAgICAgIHJlYWRvbmx5IHVua25vd25Qcm9wZXJ0aWVzPzogJ2lnbm9yZScgfCAnd2FybmluZycgfCAnZXJyb3InO1xuICAgICAgICAgICAgcmVhZG9ubHkgaWVIYWNrPzogJ2lnbm9yZScgfCAnd2FybmluZycgfCAnZXJyb3InO1xuICAgICAgICAgICAgcmVhZG9ubHkgdW5rbm93blZlbmRvclNwZWNpZmljUHJvcGVydGllcz86ICdpZ25vcmUnIHwgJ3dhcm5pbmcnIHwgJ2Vycm9yJztcbiAgICAgICAgICAgIHJlYWRvbmx5IHByb3BlcnR5SWdub3JlZER1ZVRvRGlzcGxheT86ICdpZ25vcmUnIHwgJ3dhcm5pbmcnIHwgJ2Vycm9yJztcbiAgICAgICAgICAgIHJlYWRvbmx5IGltcG9ydGFudD86ICdpZ25vcmUnIHwgJ3dhcm5pbmcnIHwgJ2Vycm9yJztcbiAgICAgICAgICAgIHJlYWRvbmx5IGZsb2F0PzogJ2lnbm9yZScgfCAnd2FybmluZycgfCAnZXJyb3InO1xuICAgICAgICAgICAgcmVhZG9ubHkgaWRTZWxlY3Rvcj86ICdpZ25vcmUnIHwgJ3dhcm5pbmcnIHwgJ2Vycm9yJztcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbmZpZ3VyZXMgdGhlIENTUyBkYXRhIHR5cGVzIGtub3duIGJ5IHRoZSBsYW5nYXVnZSBzZXJ2aWNlLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZGF0YT86IENTU0RhdGFDb25maWd1cmF0aW9uO1xuICAgIH1cbiAgICBleHBvcnQgaW50ZXJmYWNlIE1vZGVDb25maWd1cmF0aW9uIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmluZXMgd2hldGhlciB0aGUgYnVpbHQtaW4gY29tcGxldGlvbkl0ZW1Qcm92aWRlciBpcyBlbmFibGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgY29tcGxldGlvbkl0ZW1zPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmluZXMgd2hldGhlciB0aGUgYnVpbHQtaW4gaG92ZXJQcm92aWRlciBpcyBlbmFibGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgaG92ZXJzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmluZXMgd2hldGhlciB0aGUgYnVpbHQtaW4gZG9jdW1lbnRTeW1ib2xQcm92aWRlciBpcyBlbmFibGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZG9jdW1lbnRTeW1ib2xzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmluZXMgd2hldGhlciB0aGUgYnVpbHQtaW4gZGVmaW5pdGlvbnMgcHJvdmlkZXIgaXMgZW5hYmxlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGRlZmluaXRpb25zPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmluZXMgd2hldGhlciB0aGUgYnVpbHQtaW4gcmVmZXJlbmNlcyBwcm92aWRlciBpcyBlbmFibGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgcmVmZXJlbmNlcz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIHdoZXRoZXIgdGhlIGJ1aWx0LWluIHJlZmVyZW5jZXMgcHJvdmlkZXIgaXMgZW5hYmxlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGRvY3VtZW50SGlnaGxpZ2h0cz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIHdoZXRoZXIgdGhlIGJ1aWx0LWluIHJlbmFtZSBwcm92aWRlciBpcyBlbmFibGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgcmVuYW1lPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmluZXMgd2hldGhlciB0aGUgYnVpbHQtaW4gY29sb3IgcHJvdmlkZXIgaXMgZW5hYmxlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGNvbG9ycz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIHdoZXRoZXIgdGhlIGJ1aWx0LWluIGZvbGRpbmdSYW5nZSBwcm92aWRlciBpcyBlbmFibGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZm9sZGluZ1Jhbmdlcz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIHdoZXRoZXIgdGhlIGJ1aWx0LWluIGRpYWdub3N0aWMgcHJvdmlkZXIgaXMgZW5hYmxlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGRpYWdub3N0aWNzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmluZXMgd2hldGhlciB0aGUgYnVpbHQtaW4gc2VsZWN0aW9uIHJhbmdlIHByb3ZpZGVyIGlzIGVuYWJsZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBzZWxlY3Rpb25SYW5nZXM/OiBib29sZWFuO1xuICAgIH1cbiAgICBleHBvcnQgaW50ZXJmYWNlIExhbmd1YWdlU2VydmljZURlZmF1bHRzIHtcbiAgICAgICAgcmVhZG9ubHkgbGFuZ3VhZ2VJZDogc3RyaW5nO1xuICAgICAgICByZWFkb25seSBvbkRpZENoYW5nZTogSUV2ZW50PExhbmd1YWdlU2VydmljZURlZmF1bHRzPjtcbiAgICAgICAgcmVhZG9ubHkgbW9kZUNvbmZpZ3VyYXRpb246IE1vZGVDb25maWd1cmF0aW9uO1xuICAgICAgICByZWFkb25seSBvcHRpb25zOiBPcHRpb25zO1xuICAgICAgICBzZXRPcHRpb25zKG9wdGlvbnM6IE9wdGlvbnMpOiB2b2lkO1xuICAgICAgICBzZXRNb2RlQ29uZmlndXJhdGlvbihtb2RlQ29uZmlndXJhdGlvbjogTW9kZUNvbmZpZ3VyYXRpb24pOiB2b2lkO1xuICAgICAgICAvKiogQGRlcHJlY2F0ZWQgVXNlIG9wdGlvbnMgaW5zdGVhZCAqL1xuICAgICAgICByZWFkb25seSBkaWFnbm9zdGljc09wdGlvbnM6IERpYWdub3N0aWNzT3B0aW9ucztcbiAgICAgICAgLyoqIEBkZXByZWNhdGVkIFVzZSBzZXRPcHRpb25zIGluc3RlYWQgKi9cbiAgICAgICAgc2V0RGlhZ25vc3RpY3NPcHRpb25zKG9wdGlvbnM6IERpYWdub3N0aWNzT3B0aW9ucyk6IHZvaWQ7XG4gICAgfVxuICAgIC8qKiBAZGVwcmVjYXRlZCBVc2UgT3B0aW9ucyBpbnN0ZWFkICovXG4gICAgZXhwb3J0IHR5cGUgRGlhZ25vc3RpY3NPcHRpb25zID0gT3B0aW9ucztcbiAgICBleHBvcnQgY29uc3QgY3NzRGVmYXVsdHM6IExhbmd1YWdlU2VydmljZURlZmF1bHRzO1xuICAgIGV4cG9ydCBjb25zdCBzY3NzRGVmYXVsdHM6IExhbmd1YWdlU2VydmljZURlZmF1bHRzO1xuICAgIGV4cG9ydCBjb25zdCBsZXNzRGVmYXVsdHM6IExhbmd1YWdlU2VydmljZURlZmF1bHRzO1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ1NTRGF0YUNvbmZpZ3VyYXRpb24ge1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lcyB3aGV0aGVyIHRoZSBzdGFuZGFyZCBDU1MgcHJvcGVydGllcywgYXQtZGlyZWN0aXZlcywgcHNldWRvQ2xhc3NlcyBhbmQgcHNldWRvRWxlbWVudHMgYXJlIHNob3duLlxuICAgICAgICAgKi9cbiAgICAgICAgdXNlRGVmYXVsdERhdGFQcm92aWRlcj86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm92aWRlcyBhIHNldCBvZiBjdXN0b20gZGF0YSBwcm92aWRlcnMuXG4gICAgICAgICAqL1xuICAgICAgICBkYXRhUHJvdmlkZXJzPzoge1xuICAgICAgICAgICAgW3Byb3ZpZGVySWQ6IHN0cmluZ106IENTU0RhdGFWMTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3VzdG9tIENTUyBwcm9wZXJ0aWVzLCBhdC1kaXJlY3RpdmVzLCBwc2V1ZG9DbGFzc2VzIGFuZCBwc2V1ZG9FbGVtZW50c1xuICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvdnNjb2RlLWNzcy1sYW5ndWFnZXNlcnZpY2UvYmxvYi9tYWluL2RvY3MvY3VzdG9tRGF0YS5tZFxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ1NTRGF0YVYxIHtcbiAgICAgICAgdmVyc2lvbjogMSB8IDEuMTtcbiAgICAgICAgcHJvcGVydGllcz86IElQcm9wZXJ0eURhdGFbXTtcbiAgICAgICAgYXREaXJlY3RpdmVzPzogSUF0RGlyZWN0aXZlRGF0YVtdO1xuICAgICAgICBwc2V1ZG9DbGFzc2VzPzogSVBzZXVkb0NsYXNzRGF0YVtdO1xuICAgICAgICBwc2V1ZG9FbGVtZW50cz86IElQc2V1ZG9FbGVtZW50RGF0YVtdO1xuICAgIH1cbiAgICBleHBvcnQgdHlwZSBFbnRyeVN0YXR1cyA9ICdzdGFuZGFyZCcgfCAnZXhwZXJpbWVudGFsJyB8ICdub25zdGFuZGFyZCcgfCAnb2Jzb2xldGUnO1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVJlZmVyZW5jZSB7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgdXJsOiBzdHJpbmc7XG4gICAgfVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVByb3BlcnR5RGF0YSB7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCBNYXJrdXBDb250ZW50O1xuICAgICAgICBicm93c2Vycz86IHN0cmluZ1tdO1xuICAgICAgICByZXN0cmljdGlvbnM/OiBzdHJpbmdbXTtcbiAgICAgICAgc3RhdHVzPzogRW50cnlTdGF0dXM7XG4gICAgICAgIHN5bnRheD86IHN0cmluZztcbiAgICAgICAgdmFsdWVzPzogSVZhbHVlRGF0YVtdO1xuICAgICAgICByZWZlcmVuY2VzPzogSVJlZmVyZW5jZVtdO1xuICAgICAgICByZWxldmFuY2U/OiBudW1iZXI7XG4gICAgfVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUF0RGlyZWN0aXZlRGF0YSB7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCBNYXJrdXBDb250ZW50O1xuICAgICAgICBicm93c2Vycz86IHN0cmluZ1tdO1xuICAgICAgICBzdGF0dXM/OiBFbnRyeVN0YXR1cztcbiAgICAgICAgcmVmZXJlbmNlcz86IElSZWZlcmVuY2VbXTtcbiAgICB9XG4gICAgZXhwb3J0IGludGVyZmFjZSBJUHNldWRvQ2xhc3NEYXRhIHtcbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICBkZXNjcmlwdGlvbj86IHN0cmluZyB8IE1hcmt1cENvbnRlbnQ7XG4gICAgICAgIGJyb3dzZXJzPzogc3RyaW5nW107XG4gICAgICAgIHN0YXR1cz86IEVudHJ5U3RhdHVzO1xuICAgICAgICByZWZlcmVuY2VzPzogSVJlZmVyZW5jZVtdO1xuICAgIH1cbiAgICBleHBvcnQgaW50ZXJmYWNlIElQc2V1ZG9FbGVtZW50RGF0YSB7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCBNYXJrdXBDb250ZW50O1xuICAgICAgICBicm93c2Vycz86IHN0cmluZ1tdO1xuICAgICAgICBzdGF0dXM/OiBFbnRyeVN0YXR1cztcbiAgICAgICAgcmVmZXJlbmNlcz86IElSZWZlcmVuY2VbXTtcbiAgICB9XG4gICAgZXhwb3J0IGludGVyZmFjZSBJVmFsdWVEYXRhIHtcbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICBkZXNjcmlwdGlvbj86IHN0cmluZyB8IE1hcmt1cENvbnRlbnQ7XG4gICAgICAgIGJyb3dzZXJzPzogc3RyaW5nW107XG4gICAgICAgIHN0YXR1cz86IEVudHJ5U3RhdHVzO1xuICAgICAgICByZWZlcmVuY2VzPzogSVJlZmVyZW5jZVtdO1xuICAgIH1cbiAgICBleHBvcnQgaW50ZXJmYWNlIE1hcmt1cENvbnRlbnQge1xuICAgICAgICBraW5kOiBNYXJrdXBLaW5kO1xuICAgICAgICB2YWx1ZTogc3RyaW5nO1xuICAgIH1cbiAgICBleHBvcnQgdHlwZSBNYXJrdXBLaW5kID0gJ3BsYWludGV4dCcgfCAnbWFya2Rvd24nO1xufVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuZGVjbGFyZSBuYW1lc3BhY2UgbW9uYWNvLmxhbmd1YWdlcy5qc29uIHtcbiAgICBleHBvcnQgaW50ZXJmYWNlIERpYWdub3N0aWNzT3B0aW9ucyB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBzZXQsIHRoZSB2YWxpZGF0b3Igd2lsbCBiZSBlbmFibGVkIGFuZCBwZXJmb3JtIHN5bnRheCBhbmQgc2NoZW1hIGJhc2VkIHZhbGlkYXRpb24sXG4gICAgICAgICAqIHVubGVzcyBgRGlhZ25vc3RpY3NPcHRpb25zLnNjaGVtYVZhbGlkYXRpb25gIGlzIHNldCB0byBgaWdub3JlYC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHZhbGlkYXRlPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHNldCwgY29tbWVudHMgYXJlIHRvbGVyYXRlZC4gSWYgc2V0IHRvIGZhbHNlLCBzeW50YXggZXJyb3JzIHdpbGwgYmUgZW1pdHRlZCBmb3IgY29tbWVudHMuXG4gICAgICAgICAqIGBEaWFnbm9zdGljc09wdGlvbnMuYWxsb3dDb21tZW50c2Agd2lsbCBvdmVycmlkZSB0aGlzIHNldHRpbmcuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBhbGxvd0NvbW1lbnRzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgbGlzdCBvZiBrbm93biBzY2hlbWFzIGFuZC9vciBhc3NvY2lhdGlvbnMgb2Ygc2NoZW1hcyB0byBmaWxlIG5hbWVzLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgc2NoZW1hcz86IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhlIFVSSSBvZiB0aGUgc2NoZW1hLCB3aGljaCBpcyBhbHNvIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBzY2hlbWEuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlYWRvbmx5IHVyaTogc3RyaW5nO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBIGxpc3Qgb2YgZ2xvYiBwYXR0ZXJucyB0aGF0IGRlc2NyaWJlIGZvciB3aGljaCBmaWxlIFVSSXMgdGhlIEpTT04gc2NoZW1hIHdpbGwgYmUgdXNlZC5cbiAgICAgICAgICAgICAqICcqJyBhbmQgJyoqJyB3aWxkY2FyZHMgYXJlIHN1cHBvcnRlZC4gRXhjbHVzaW9uIHBhdHRlcm5zIHN0YXJ0IHdpdGggJyEnLlxuICAgICAgICAgICAgICogRm9yIGV4YW1wbGUgJyouc2NoZW1hLmpzb24nLCAncGFja2FnZS5qc29uJywgJyFmb28qLnNjaGVtYS5qc29uJywgJ2Zvby8qKlxcL0JBRFJFU1AuanNvbicuXG4gICAgICAgICAgICAgKiBBIG1hdGNoIHN1Y2NlZWRzIHdoZW4gdGhlcmUgaXMgYXQgbGVhc3Qgb25lIHBhdHRlcm4gbWF0Y2hpbmcgYW5kIGxhc3QgbWF0Y2hpbmcgcGF0dGVybiBkb2VzIG5vdCBzdGFydCB3aXRoICchJy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcmVhZG9ubHkgZmlsZU1hdGNoPzogc3RyaW5nW107XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZSBzY2hlbWEgZm9yIHRoZSBnaXZlbiBVUkkuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlYWRvbmx5IHNjaGVtYT86IGFueTtcbiAgICAgICAgfVtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogIElmIHNldCwgdGhlIHNjaGVtYSBzZXJ2aWNlIHdvdWxkIGxvYWQgc2NoZW1hIGNvbnRlbnQgb24tZGVtYW5kIHdpdGggJ2ZldGNoJyBpZiBhdmFpbGFibGVcbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGVuYWJsZVNjaGVtYVJlcXVlc3Q/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHNldmVyaXR5IG9mIHByb2JsZW1zIGZyb20gc2NoZW1hIHZhbGlkYXRpb24uIElmIHNldCB0byAnaWdub3JlJywgc2NoZW1hIHZhbGlkYXRpb24gd2lsbCBiZSBza2lwcGVkLiBJZiBub3Qgc2V0LCAnd2FybmluZycgaXMgdXNlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHNjaGVtYVZhbGlkYXRpb24/OiBTZXZlcml0eUxldmVsO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHNldmVyaXR5IG9mIHByb2JsZW1zIHRoYXQgb2NjdXJyZWQgd2hlbiByZXNvbHZpbmcgYW5kIGxvYWRpbmcgc2NoZW1hcy4gSWYgc2V0IHRvICdpZ25vcmUnLCBzY2hlbWEgcmVzb2x2aW5nIHByb2JsZW1zIGFyZSBub3QgcmVwb3J0ZWQuIElmIG5vdCBzZXQsICd3YXJuaW5nJyBpcyB1c2VkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgc2NoZW1hUmVxdWVzdD86IFNldmVyaXR5TGV2ZWw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgc2V2ZXJpdHkgb2YgcmVwb3J0ZWQgdHJhaWxpbmcgY29tbWFzLiBJZiBub3Qgc2V0LCB0cmFpbGluZyBjb21tYXMgd2lsbCBiZSByZXBvcnRlZCBhcyBlcnJvcnMuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSB0cmFpbGluZ0NvbW1hcz86IFNldmVyaXR5TGV2ZWw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgc2V2ZXJpdHkgb2YgcmVwb3J0ZWQgY29tbWVudHMuIElmIG5vdCBzZXQsICdEaWFnbm9zdGljc09wdGlvbnMuYWxsb3dDb21tZW50cycgZGVmaW5lcyB3aGV0aGVyIGNvbW1lbnRzIGFyZSBpZ25vcmVkIG9yIHJlcG9ydGVkIGFzIGVycm9ycy5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGNvbW1lbnRzPzogU2V2ZXJpdHlMZXZlbDtcbiAgICB9XG4gICAgZXhwb3J0IHR5cGUgU2V2ZXJpdHlMZXZlbCA9ICdlcnJvcicgfCAnd2FybmluZycgfCAnaWdub3JlJztcbiAgICBleHBvcnQgaW50ZXJmYWNlIE1vZGVDb25maWd1cmF0aW9uIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmluZXMgd2hldGhlciB0aGUgYnVpbHQtaW4gZG9jdW1lbnRGb3JtYXR0aW5nRWRpdCBwcm92aWRlciBpcyBlbmFibGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZG9jdW1lbnRGb3JtYXR0aW5nRWRpdHM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lcyB3aGV0aGVyIHRoZSBidWlsdC1pbiBkb2N1bWVudFJhbmdlRm9ybWF0dGluZ0VkaXQgcHJvdmlkZXIgaXMgZW5hYmxlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdHM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lcyB3aGV0aGVyIHRoZSBidWlsdC1pbiBjb21wbGV0aW9uSXRlbVByb3ZpZGVyIGlzIGVuYWJsZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBjb21wbGV0aW9uSXRlbXM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lcyB3aGV0aGVyIHRoZSBidWlsdC1pbiBob3ZlclByb3ZpZGVyIGlzIGVuYWJsZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBob3ZlcnM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lcyB3aGV0aGVyIHRoZSBidWlsdC1pbiBkb2N1bWVudFN5bWJvbFByb3ZpZGVyIGlzIGVuYWJsZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBkb2N1bWVudFN5bWJvbHM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lcyB3aGV0aGVyIHRoZSBidWlsdC1pbiB0b2tlbnMgcHJvdmlkZXIgaXMgZW5hYmxlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHRva2Vucz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIHdoZXRoZXIgdGhlIGJ1aWx0LWluIGNvbG9yIHByb3ZpZGVyIGlzIGVuYWJsZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBjb2xvcnM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lcyB3aGV0aGVyIHRoZSBidWlsdC1pbiBmb2xkaW5nUmFuZ2UgcHJvdmlkZXIgaXMgZW5hYmxlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGZvbGRpbmdSYW5nZXM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lcyB3aGV0aGVyIHRoZSBidWlsdC1pbiBkaWFnbm9zdGljIHByb3ZpZGVyIGlzIGVuYWJsZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBkaWFnbm9zdGljcz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIHdoZXRoZXIgdGhlIGJ1aWx0LWluIHNlbGVjdGlvbiByYW5nZSBwcm92aWRlciBpcyBlbmFibGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgc2VsZWN0aW9uUmFuZ2VzPzogYm9vbGVhbjtcbiAgICB9XG4gICAgZXhwb3J0IGludGVyZmFjZSBMYW5ndWFnZVNlcnZpY2VEZWZhdWx0cyB7XG4gICAgICAgIHJlYWRvbmx5IGxhbmd1YWdlSWQ6IHN0cmluZztcbiAgICAgICAgcmVhZG9ubHkgb25EaWRDaGFuZ2U6IElFdmVudDxMYW5ndWFnZVNlcnZpY2VEZWZhdWx0cz47XG4gICAgICAgIHJlYWRvbmx5IGRpYWdub3N0aWNzT3B0aW9uczogRGlhZ25vc3RpY3NPcHRpb25zO1xuICAgICAgICByZWFkb25seSBtb2RlQ29uZmlndXJhdGlvbjogTW9kZUNvbmZpZ3VyYXRpb247XG4gICAgICAgIHNldERpYWdub3N0aWNzT3B0aW9ucyhvcHRpb25zOiBEaWFnbm9zdGljc09wdGlvbnMpOiB2b2lkO1xuICAgICAgICBzZXRNb2RlQ29uZmlndXJhdGlvbihtb2RlQ29uZmlndXJhdGlvbjogTW9kZUNvbmZpZ3VyYXRpb24pOiB2b2lkO1xuICAgIH1cbiAgICBleHBvcnQgY29uc3QganNvbkRlZmF1bHRzOiBMYW5ndWFnZVNlcnZpY2VEZWZhdWx0cztcbn1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmRlY2xhcmUgbmFtZXNwYWNlIG1vbmFjby5sYW5ndWFnZXMuaHRtbCB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBIVE1MRm9ybWF0Q29uZmlndXJhdGlvbiB7XG4gICAgICAgIHJlYWRvbmx5IHRhYlNpemU6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgaW5zZXJ0U3BhY2VzOiBib29sZWFuO1xuICAgICAgICByZWFkb25seSB3cmFwTGluZUxlbmd0aDogbnVtYmVyO1xuICAgICAgICByZWFkb25seSB1bmZvcm1hdHRlZDogc3RyaW5nO1xuICAgICAgICByZWFkb25seSBjb250ZW50VW5mb3JtYXR0ZWQ6IHN0cmluZztcbiAgICAgICAgcmVhZG9ubHkgaW5kZW50SW5uZXJIdG1sOiBib29sZWFuO1xuICAgICAgICByZWFkb25seSBwcmVzZXJ2ZU5ld0xpbmVzOiBib29sZWFuO1xuICAgICAgICByZWFkb25seSBtYXhQcmVzZXJ2ZU5ld0xpbmVzOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgICAgIHJlYWRvbmx5IGluZGVudEhhbmRsZWJhcnM6IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IGVuZFdpdGhOZXdsaW5lOiBib29sZWFuO1xuICAgICAgICByZWFkb25seSBleHRyYUxpbmVyczogc3RyaW5nO1xuICAgICAgICByZWFkb25seSB3cmFwQXR0cmlidXRlczogJ2F1dG8nIHwgJ2ZvcmNlJyB8ICdmb3JjZS1hbGlnbmVkJyB8ICdmb3JjZS1leHBhbmQtbXVsdGlsaW5lJztcbiAgICB9XG4gICAgZXhwb3J0IGludGVyZmFjZSBDb21wbGV0aW9uQ29uZmlndXJhdGlvbiB7XG4gICAgICAgIHJlYWRvbmx5IFtwcm92aWRlcklkOiBzdHJpbmddOiBib29sZWFuO1xuICAgIH1cbiAgICBleHBvcnQgaW50ZXJmYWNlIE9wdGlvbnMge1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgc2V0LCBjb21tZW50cyBhcmUgdG9sZXJhdGVkLiBJZiBzZXQgdG8gZmFsc2UsIHN5bnRheCBlcnJvcnMgd2lsbCBiZSBlbWl0dGVkIGZvciBjb21tZW50cy5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGZvcm1hdD86IEhUTUxGb3JtYXRDb25maWd1cmF0aW9uO1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBsaXN0IG9mIGtub3duIHNjaGVtYXMgYW5kL29yIGFzc29jaWF0aW9ucyBvZiBzY2hlbWFzIHRvIGZpbGUgbmFtZXMuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBzdWdnZXN0PzogQ29tcGxldGlvbkNvbmZpZ3VyYXRpb247XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25maWd1cmVzIHRoZSBIVE1MIGRhdGEgdHlwZXMga25vd24gYnkgdGhlIEhUTUwgbGFuZ2F1Z2Ugc2VydmljZS5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGRhdGE/OiBIVE1MRGF0YUNvbmZpZ3VyYXRpb247XG4gICAgfVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgTW9kZUNvbmZpZ3VyYXRpb24ge1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lcyB3aGV0aGVyIHRoZSBidWlsdC1pbiBjb21wbGV0aW9uSXRlbVByb3ZpZGVyIGlzIGVuYWJsZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBjb21wbGV0aW9uSXRlbXM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lcyB3aGV0aGVyIHRoZSBidWlsdC1pbiBob3ZlclByb3ZpZGVyIGlzIGVuYWJsZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBob3ZlcnM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lcyB3aGV0aGVyIHRoZSBidWlsdC1pbiBkb2N1bWVudFN5bWJvbFByb3ZpZGVyIGlzIGVuYWJsZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBkb2N1bWVudFN5bWJvbHM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lcyB3aGV0aGVyIHRoZSBidWlsdC1pbiBkZWZpbml0aW9ucyBwcm92aWRlciBpcyBlbmFibGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgbGlua3M/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lcyB3aGV0aGVyIHRoZSBidWlsdC1pbiByZWZlcmVuY2VzIHByb3ZpZGVyIGlzIGVuYWJsZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBkb2N1bWVudEhpZ2hsaWdodHM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lcyB3aGV0aGVyIHRoZSBidWlsdC1pbiByZW5hbWUgcHJvdmlkZXIgaXMgZW5hYmxlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHJlbmFtZT86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIHdoZXRoZXIgdGhlIGJ1aWx0LWluIGNvbG9yIHByb3ZpZGVyIGlzIGVuYWJsZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBjb2xvcnM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lcyB3aGV0aGVyIHRoZSBidWlsdC1pbiBmb2xkaW5nUmFuZ2UgcHJvdmlkZXIgaXMgZW5hYmxlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGZvbGRpbmdSYW5nZXM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lcyB3aGV0aGVyIHRoZSBidWlsdC1pbiBkaWFnbm9zdGljIHByb3ZpZGVyIGlzIGVuYWJsZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBkaWFnbm9zdGljcz86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIHdoZXRoZXIgdGhlIGJ1aWx0LWluIHNlbGVjdGlvbiByYW5nZSBwcm92aWRlciBpcyBlbmFibGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgc2VsZWN0aW9uUmFuZ2VzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmluZXMgd2hldGhlciB0aGUgYnVpbHQtaW4gZG9jdW1lbnRGb3JtYXR0aW5nRWRpdCBwcm92aWRlciBpcyBlbmFibGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZG9jdW1lbnRGb3JtYXR0aW5nRWRpdHM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lcyB3aGV0aGVyIHRoZSBidWlsdC1pbiBkb2N1bWVudFJhbmdlRm9ybWF0dGluZ0VkaXQgcHJvdmlkZXIgaXMgZW5hYmxlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdHM/OiBib29sZWFuO1xuICAgIH1cbiAgICBleHBvcnQgaW50ZXJmYWNlIExhbmd1YWdlU2VydmljZURlZmF1bHRzIHtcbiAgICAgICAgcmVhZG9ubHkgbGFuZ3VhZ2VJZDogc3RyaW5nO1xuICAgICAgICByZWFkb25seSBtb2RlQ29uZmlndXJhdGlvbjogTW9kZUNvbmZpZ3VyYXRpb247XG4gICAgICAgIHJlYWRvbmx5IG9uRGlkQ2hhbmdlOiBJRXZlbnQ8TGFuZ3VhZ2VTZXJ2aWNlRGVmYXVsdHM+O1xuICAgICAgICByZWFkb25seSBvcHRpb25zOiBPcHRpb25zO1xuICAgICAgICBzZXRPcHRpb25zKG9wdGlvbnM6IE9wdGlvbnMpOiB2b2lkO1xuICAgICAgICBzZXRNb2RlQ29uZmlndXJhdGlvbihtb2RlQ29uZmlndXJhdGlvbjogTW9kZUNvbmZpZ3VyYXRpb24pOiB2b2lkO1xuICAgIH1cbiAgICBleHBvcnQgY29uc3QgaHRtbExhbmd1YWdlU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlUmVnaXN0cmF0aW9uO1xuICAgIGV4cG9ydCBjb25zdCBodG1sRGVmYXVsdHM6IExhbmd1YWdlU2VydmljZURlZmF1bHRzO1xuICAgIGV4cG9ydCBjb25zdCBoYW5kbGViYXJMYW5ndWFnZVNlcnZpY2U6IExhbmd1YWdlU2VydmljZVJlZ2lzdHJhdGlvbjtcbiAgICBleHBvcnQgY29uc3QgaGFuZGxlYmFyRGVmYXVsdHM6IExhbmd1YWdlU2VydmljZURlZmF1bHRzO1xuICAgIGV4cG9ydCBjb25zdCByYXpvckxhbmd1YWdlU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlUmVnaXN0cmF0aW9uO1xuICAgIGV4cG9ydCBjb25zdCByYXpvckRlZmF1bHRzOiBMYW5ndWFnZVNlcnZpY2VEZWZhdWx0cztcbiAgICBleHBvcnQgaW50ZXJmYWNlIExhbmd1YWdlU2VydmljZVJlZ2lzdHJhdGlvbiBleHRlbmRzIElEaXNwb3NhYmxlIHtcbiAgICAgICAgcmVhZG9ubHkgZGVmYXVsdHM6IExhbmd1YWdlU2VydmljZURlZmF1bHRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYSBuZXcgSFRNTCBsYW5ndWFnZSBzZXJ2aWNlIGZvciB0aGUgbGFuZ3VhZ2VJZC5cbiAgICAgKiBOb3RlOiAnaHRtbCcsICdoYW5kbGViYXInIGFuZCAncmF6b3InIGFyZSByZWdpc3RlcmVkIGJ5IGRlZmF1bHQuXG4gICAgICpcbiAgICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gcmVnaXN0ZXIgYWRkaXRpb25hbCBsYW5ndWFnZSBpZHMgd2l0aCBhIEhUTUwgc2VydmljZS5cbiAgICAgKiBUaGUgbGFuZ3VhZ2Ugc2VydmVyIGhhcyB0byBiZSByZWdpc3RlcmVkIGJlZm9yZSBhbiBlZGl0b3IgbW9kZWwgaXMgb3BlbmVkLlxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckhUTUxMYW5ndWFnZVNlcnZpY2UobGFuZ3VhZ2VJZDogc3RyaW5nLCBvcHRpb25zPzogT3B0aW9ucywgbW9kZUNvbmZpZ3VyYXRpb24/OiBNb2RlQ29uZmlndXJhdGlvbik6IExhbmd1YWdlU2VydmljZVJlZ2lzdHJhdGlvbjtcbiAgICBleHBvcnQgaW50ZXJmYWNlIEhUTUxEYXRhQ29uZmlndXJhdGlvbiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIHdoZXRoZXIgdGhlIHN0YW5kYXJkIEhUTUwgdGFncyBhbmQgYXR0cmlidXRlcyBhcmUgc2hvd25cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHVzZURlZmF1bHREYXRhUHJvdmlkZXI/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvdmlkZXMgYSBzZXQgb2YgY3VzdG9tIGRhdGEgcHJvdmlkZXJzLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZGF0YVByb3ZpZGVycz86IHtcbiAgICAgICAgICAgIFtwcm92aWRlcklkOiBzdHJpbmddOiBIVE1MRGF0YVYxO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDdXN0b20gSFRNTCB0YWdzIGF0dHJpYnV0ZXMgYW5kIGF0dHJpYnV0ZSB2YWx1ZXNcbiAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L3ZzY29kZS1odG1sLWxhbmd1YWdlc2VydmljZS9ibG9iL21haW4vZG9jcy9jdXN0b21EYXRhLm1kXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBIVE1MRGF0YVYxIHtcbiAgICAgICAgcmVhZG9ubHkgdmVyc2lvbjogMSB8IDEuMTtcbiAgICAgICAgcmVhZG9ubHkgdGFncz86IElUYWdEYXRhW107XG4gICAgICAgIHJlYWRvbmx5IGdsb2JhbEF0dHJpYnV0ZXM/OiBJQXR0cmlidXRlRGF0YVtdO1xuICAgICAgICByZWFkb25seSB2YWx1ZVNldHM/OiBJVmFsdWVTZXRbXTtcbiAgICB9XG4gICAgZXhwb3J0IGludGVyZmFjZSBJUmVmZXJlbmNlIHtcbiAgICAgICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICAgICAgICByZWFkb25seSB1cmw6IHN0cmluZztcbiAgICB9XG4gICAgZXhwb3J0IGludGVyZmFjZSBJVGFnRGF0YSB7XG4gICAgICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgICAgICAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCBNYXJrdXBDb250ZW50O1xuICAgICAgICByZWFkb25seSBhdHRyaWJ1dGVzOiBJQXR0cmlidXRlRGF0YVtdO1xuICAgICAgICByZWFkb25seSByZWZlcmVuY2VzPzogSVJlZmVyZW5jZVtdO1xuICAgIH1cbiAgICBleHBvcnQgaW50ZXJmYWNlIElBdHRyaWJ1dGVEYXRhIHtcbiAgICAgICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICAgICAgICByZWFkb25seSBkZXNjcmlwdGlvbj86IHN0cmluZyB8IE1hcmt1cENvbnRlbnQ7XG4gICAgICAgIHJlYWRvbmx5IHZhbHVlU2V0Pzogc3RyaW5nO1xuICAgICAgICByZWFkb25seSB2YWx1ZXM/OiBJVmFsdWVEYXRhW107XG4gICAgICAgIHJlYWRvbmx5IHJlZmVyZW5jZXM/OiBJUmVmZXJlbmNlW107XG4gICAgfVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVZhbHVlRGF0YSB7XG4gICAgICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgICAgICAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCBNYXJrdXBDb250ZW50O1xuICAgICAgICByZWFkb25seSByZWZlcmVuY2VzPzogSVJlZmVyZW5jZVtdO1xuICAgIH1cbiAgICBleHBvcnQgaW50ZXJmYWNlIElWYWx1ZVNldCB7XG4gICAgICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgICAgICAgcmVhZG9ubHkgdmFsdWVzOiBJVmFsdWVEYXRhW107XG4gICAgfVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgTWFya3VwQ29udGVudCB7XG4gICAgICAgIHJlYWRvbmx5IGtpbmQ6IE1hcmt1cEtpbmQ7XG4gICAgICAgIHJlYWRvbmx5IHZhbHVlOiBzdHJpbmc7XG4gICAgfVxuICAgIGV4cG9ydCB0eXBlIE1hcmt1cEtpbmQgPSAncGxhaW50ZXh0JyB8ICdtYXJrZG93bic7XG59XG4iXX0=